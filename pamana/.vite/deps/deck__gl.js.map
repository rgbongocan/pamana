{
  "version": 3,
  "sources": ["../../node_modules/@deck.gl/aggregation-layers/dist/utils/aggregation-operation-utils.js", "../../node_modules/@deck.gl/aggregation-layers/dist/utils/gpu-grid-aggregation/gpu-grid-aggregator-constants.js", "../../node_modules/@deck.gl/aggregation-layers/dist/utils/gpu-grid-aggregation/aggregate-to-grid-vs.glsl.js", "../../node_modules/@deck.gl/aggregation-layers/dist/utils/gpu-grid-aggregation/aggregate-to-grid-fs.glsl.js", "../../node_modules/@deck.gl/aggregation-layers/dist/utils/gpu-grid-aggregation/aggregate-all-vs.glsl.js", "../../node_modules/@deck.gl/aggregation-layers/dist/utils/gpu-grid-aggregation/aggregate-all-fs.glsl.js", "../../node_modules/@deck.gl/aggregation-layers/dist/utils/gpu-grid-aggregation/transform-mean-vs.glsl.js", "../../node_modules/@deck.gl/aggregation-layers/dist/utils/resource-utils.js", "../../node_modules/@deck.gl/aggregation-layers/dist/utils/gpu-grid-aggregation/gpu-grid-aggregator.js", "../../node_modules/@deck.gl/aggregation-layers/dist/utils/color-utils.js", "../../node_modules/@deck.gl/aggregation-layers/dist/screen-grid-layer/screen-grid-layer-vertex.glsl.js", "../../node_modules/@deck.gl/aggregation-layers/dist/screen-grid-layer/screen-grid-layer-fragment.glsl.js", "../../node_modules/@deck.gl/aggregation-layers/dist/screen-grid-layer/screen-grid-cell-layer.js", "../../node_modules/@deck.gl/aggregation-layers/dist/utils/prop-utils.js", "../../node_modules/@deck.gl/aggregation-layers/dist/aggregation-layer.js", "../../node_modules/@deck.gl/aggregation-layers/dist/utils/scale-utils.js", "../../node_modules/@deck.gl/aggregation-layers/dist/utils/bin-sorter.js", "../../node_modules/@deck.gl/aggregation-layers/dist/utils/grid-aggregation-utils.js", "../../node_modules/@deck.gl/aggregation-layers/dist/cpu-grid-layer/grid-aggregator.js", "../../node_modules/@deck.gl/aggregation-layers/dist/grid-aggregation-layer.js", "../../node_modules/@deck.gl/aggregation-layers/dist/screen-grid-layer/screen-grid-layer.js", "../../node_modules/@deck.gl/aggregation-layers/dist/utils/cpu-aggregator.js", "../../node_modules/@deck.gl/aggregation-layers/dist/cpu-grid-layer/cpu-grid-layer.js", "../../node_modules/d3-hexbin/src/hexbin.js", "../../node_modules/@deck.gl/aggregation-layers/dist/hexagon-layer/hexagon-aggregator.js", "../../node_modules/@deck.gl/aggregation-layers/dist/hexagon-layer/hexagon-layer.js", "../../node_modules/@deck.gl/aggregation-layers/dist/contour-layer/marching-squares-codes.js", "../../node_modules/@deck.gl/aggregation-layers/dist/contour-layer/marching-squares.js", "../../node_modules/@deck.gl/aggregation-layers/dist/contour-layer/contour-utils.js", "../../node_modules/@deck.gl/aggregation-layers/dist/contour-layer/contour-layer.js", "../../node_modules/@deck.gl/aggregation-layers/dist/gpu-grid-layer/gpu-grid-cell-layer-vertex.glsl.js", "../../node_modules/@deck.gl/aggregation-layers/dist/gpu-grid-layer/gpu-grid-cell-layer-fragment.glsl.js", "../../node_modules/@deck.gl/aggregation-layers/dist/gpu-grid-layer/gpu-grid-cell-layer.js", "../../node_modules/@deck.gl/aggregation-layers/dist/gpu-grid-layer/gpu-grid-layer.js", "../../node_modules/@deck.gl/aggregation-layers/dist/grid-layer/grid-layer.js", "../../node_modules/@deck.gl/aggregation-layers/dist/heatmap-layer/heatmap-layer-utils.js", "../../node_modules/@deck.gl/aggregation-layers/dist/heatmap-layer/triangle-layer-vertex.glsl.js", "../../node_modules/@deck.gl/aggregation-layers/dist/heatmap-layer/triangle-layer-fragment.glsl.js", "../../node_modules/@deck.gl/aggregation-layers/dist/heatmap-layer/triangle-layer.js", "../../node_modules/@deck.gl/aggregation-layers/dist/heatmap-layer/weights-vs.glsl.js", "../../node_modules/@deck.gl/aggregation-layers/dist/heatmap-layer/weights-fs.glsl.js", "../../node_modules/@deck.gl/aggregation-layers/dist/heatmap-layer/max-vs.glsl.js", "../../node_modules/@deck.gl/aggregation-layers/dist/heatmap-layer/max-fs.glsl.js", "../../node_modules/@deck.gl/aggregation-layers/dist/heatmap-layer/heatmap-layer.js", "../../node_modules/@deck.gl/react/dist/deckgl.js", "../../node_modules/@deck.gl/react/dist/utils/use-isomorphic-layout-effect.js", "../../node_modules/@deck.gl/react/dist/utils/extract-jsx-layers.js", "../../node_modules/@deck.gl/react/dist/utils/inherits-from.js", "../../node_modules/@deck.gl/react/dist/utils/evaluate-children.js", "../../node_modules/@deck.gl/react/dist/utils/position-children-under-views.js", "../../node_modules/@deck.gl/react/dist/utils/extract-styles.js", "../../node_modules/preact/src/constants.js", "../../node_modules/preact/src/util.js", "../../node_modules/preact/src/options.js", "../../node_modules/preact/src/create-element.js", "../../node_modules/preact/src/component.js", "../../node_modules/preact/src/diff/props.js", "../../node_modules/preact/src/create-context.js", "../../node_modules/preact/src/diff/children.js", "../../node_modules/preact/src/diff/index.js", "../../node_modules/preact/src/render.js", "../../node_modules/preact/src/clone-element.js", "../../node_modules/preact/src/diff/catch-error.js", "../../node_modules/preact/jsx-runtime/src/utils.js", "../../node_modules/preact/src/constants.js", "../../node_modules/preact/jsx-runtime/src/index.js", "../../node_modules/@deck.gl/widgets/dist/components.js", "../../node_modules/@deck.gl/widgets/dist/fullscreen-widget.js", "../../node_modules/@deck.gl/widgets/dist/compass-widget.js", "../../node_modules/@deck.gl/widgets/dist/zoom-widget.js"],
  "sourcesContent": ["// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nexport const AGGREGATION_OPERATION = {\n    SUM: 1,\n    MEAN: 2,\n    MIN: 3,\n    MAX: 4\n};\nfunction sumReducer(accu, cur) {\n    return accu + cur;\n}\nfunction maxReducer(accu, cur) {\n    return cur > accu ? cur : accu;\n}\nfunction minReducer(accu, cur) {\n    return cur < accu ? cur : accu;\n}\nexport function getMean(pts, accessor) {\n    if (Number.isFinite(accessor)) {\n        return pts.length ? accessor : null;\n    }\n    const filtered = pts.map(accessor).filter(Number.isFinite);\n    return filtered.length ? filtered.reduce(sumReducer, 0) / filtered.length : null;\n}\nexport function getSum(pts, accessor) {\n    if (Number.isFinite(accessor)) {\n        return pts.length ? pts.length * accessor : null;\n    }\n    const filtered = pts.map(accessor).filter(Number.isFinite);\n    return filtered.length ? filtered.reduce(sumReducer, 0) : null;\n}\nexport function getMax(pts, accessor) {\n    if (Number.isFinite(accessor)) {\n        return pts.length ? accessor : null;\n    }\n    const filtered = pts.map(accessor).filter(Number.isFinite);\n    return filtered.length ? filtered.reduce(maxReducer, -Infinity) : null;\n}\nexport function getMin(pts, accessor) {\n    if (Number.isFinite(accessor)) {\n        return pts.length ? accessor : null;\n    }\n    const filtered = pts.map(accessor).filter(Number.isFinite);\n    return filtered.length ? filtered.reduce(minReducer, Infinity) : null;\n}\n// Function to convert from aggregation/accessor props (like colorAggregation and getColorWeight) to getValue prop (like getColorValue)\nexport function getValueFunc(aggregation, accessor, context) {\n    const op = AGGREGATION_OPERATION[aggregation] || AGGREGATION_OPERATION.SUM;\n    accessor = wrapAccessor(accessor, context);\n    switch (op) {\n        case AGGREGATION_OPERATION.MIN:\n            return pts => getMin(pts, accessor);\n        case AGGREGATION_OPERATION.SUM:\n            return pts => getSum(pts, accessor);\n        case AGGREGATION_OPERATION.MEAN:\n            return pts => getMean(pts, accessor);\n        case AGGREGATION_OPERATION.MAX:\n            return pts => getMax(pts, accessor);\n        default:\n            return null;\n    }\n}\nfunction wrapAccessor(accessor, context = {}) {\n    if (Number.isFinite(accessor)) {\n        return accessor;\n    }\n    return pt => {\n        context.index = pt.index;\n        return accessor(pt.source, context);\n    };\n}\nexport function wrapGetValueFunc(getValue, context = {}) {\n    return pts => {\n        context.indices = pts.map(pt => pt.index);\n        return getValue(pts.map(pt => pt.source), context);\n    };\n}\n", "import { GL } from '@luma.gl/constants';\nimport { AGGREGATION_OPERATION } from \"../aggregation-operation-utils.js\";\nexport const DEFAULT_RUN_PARAMS = {\n    projectPoints: false,\n    viewport: null,\n    createBufferObjects: true,\n    moduleSettings: {}\n};\nexport const MAX_32_BIT_FLOAT = 3.402823466e38;\nexport const MIN_BLEND_EQUATION = [32775, 32774];\nexport const MAX_BLEND_EQUATION = [32776, 32774];\nexport const MAX_MIN_BLEND_EQUATION = [32776, 32775];\nexport const EQUATION_MAP = {\n    [AGGREGATION_OPERATION.SUM]: 32774,\n    [AGGREGATION_OPERATION.MEAN]: 32774,\n    [AGGREGATION_OPERATION.MIN]: MIN_BLEND_EQUATION,\n    [AGGREGATION_OPERATION.MAX]: MAX_BLEND_EQUATION\n};\nexport const ELEMENTCOUNT = 4;\nexport const DEFAULT_WEIGHT_PARAMS = {\n    size: 1,\n    operation: AGGREGATION_OPERATION.SUM,\n    needMin: false,\n    needMax: false,\n    combineMaxMin: false\n};\nexport const PIXEL_SIZE = 4; // RGBA32F\nexport const WEIGHT_SIZE = 3;\nexport const MAX_MIN_TEXTURE_OPTS = {\n    format: 34836,\n    type: 5126,\n    border: 0,\n    mipmaps: false,\n    sampler: {\n        minFilter: 'nearest',\n        magFilter: 'nearest'\n    },\n    dataFormat: 6408,\n    width: 1,\n    height: 1\n};\n", "// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nexport default `\\\n#version 300 es\n#define SHADER_NAME gpu-aggregation-to-grid-vs\nin vec3 positions;\nin vec3 positions64Low;\nin vec3 weights;\nuniform vec2 cellSize;\nuniform vec2 gridSize;\nuniform bool projectPoints;\nuniform vec2 translation;\nuniform vec3 scaling;\nout vec3 vWeights;\nvec2 project_to_pixel(vec4 pos) {\nvec4 result;\npos.xy = pos.xy/pos.w;\nresult = pos + vec4(translation, 0., 0.);\nresult.xy = scaling.z > 0. ? result.xy * scaling.xy : result.xy;\nreturn result.xy;\n}\nvoid main(void) {\nvWeights = weights;\nvec4 windowPos = vec4(positions, 1.);\nif (projectPoints) {\nwindowPos = project_position_to_clipspace(positions, positions64Low, vec3(0));\n}\nvec2 pos = project_to_pixel(windowPos);\nvec2 pixelXY64[2];\npixelXY64[0] = vec2(pos.x, 0.);\npixelXY64[1] = vec2(pos.y, 0.);\nvec2 gridXY64[2];\ngridXY64[0] = div_fp64(pixelXY64[0], vec2(cellSize.x, 0));\ngridXY64[1] = div_fp64(pixelXY64[1], vec2(cellSize.y, 0));\nfloat x = floor(gridXY64[0].x);\nfloat y = floor(gridXY64[1].x);\npos = vec2(x, y);\npos = (pos * (2., 2.) / (gridSize)) - (1., 1.);\nvec2 offset = 1.0 / gridSize;\npos = pos + offset;\ngl_Position = vec4(pos, 0.0, 1.0);\ngl_PointSize = 1.0;\n}\n`;\n", "// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nexport default `\\\n#version 300 es\n#define SHADER_NAME gpu-aggregation-to-grid-fs\nprecision highp float;\nin vec3 vWeights;\nout vec4 fragColor;\nvoid main(void) {\nfragColor = vec4(vWeights, 1.0);\nDECKGL_FILTER_COLOR(fragColor, geometry);\n}\n`;\n", "// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nexport default `\\\n#version 300 es\n#define SHADER_NAME gpu-aggregation-all-vs-64\nin vec2 position;\nuniform ivec2 gridSize;\nout vec2 vTextureCoord;\nvoid main(void) {\nvec2 pos = vec2(-1.0, -1.0);\nvec2 offset = 1.0 / vec2(gridSize);\npos = pos + offset;\ngl_Position = vec4(pos, 0.0, 1.0);\nint yIndex = gl_InstanceID / gridSize[0];\nint xIndex = gl_InstanceID - (yIndex * gridSize[0]);\nvec2 yIndexFP64 = vec2(float(yIndex), 0.);\nvec2 xIndexFP64 = vec2(float(xIndex), 0.);\nvec2 gridSizeYFP64 = vec2(gridSize[1], 0.);\nvec2 gridSizeXFP64 = vec2(gridSize[0], 0.);\nvec2 texCoordXFP64 = div_fp64(yIndexFP64, gridSizeYFP64);\nvec2 texCoordYFP64 = div_fp64(xIndexFP64, gridSizeXFP64);\nvTextureCoord = vec2(texCoordYFP64.x, texCoordXFP64.x);\ngl_PointSize = 1.0;\n}\n`;\n", "// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nexport default `\\\n#version 300 es\n#define SHADER_NAME gpu-aggregation-all-fs\nprecision highp float;\nin vec2 vTextureCoord;\nuniform sampler2D uSampler;\nuniform bool combineMaxMin;\nout vec4 fragColor;\nvoid main(void) {\nvec4 textureColor = texture(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));\nif (textureColor.a == 0.) {\ndiscard;\n}\nfragColor.rgb = textureColor.rgb;\nfragColor.a = combineMaxMin ? textureColor.r : textureColor.a;\n}\n`;\n", "// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nexport default `\\\n#version 300 es\n#define SHADER_NAME gpu-aggregation-transform-mean-vs\nin vec4 aggregationValues;\nout vec4 meanValues;\nvoid main()\n{\nbool isCellValid = bool(aggregationValues.w > 0.);\nmeanValues.xyz = isCellValid ? aggregationValues.xyz/aggregationValues.w : vec3(0, 0, 0);\nmeanValues.w = aggregationValues.w;\ngl_PointSize = 1.0;\n}\n`;\n", "const DEFAULT_PARAMETERS = {\n    minFilter: 'nearest',\n    magFilter: 'nearest'\n};\n// TODO - not working\nexport function getFloatTexture(device, opts) {\n    const { width = 1, height = 1, data = null, parameters = DEFAULT_PARAMETERS } = opts;\n    const texture = device.createTexture({\n        data,\n        format: 'rgba32float', // device.info.type === 'webgl2' ? 'rgba32float' : GL.RGBA,\n        // type: GL.FLOAT,\n        // border: 0,\n        mipmaps: false,\n        sampler: parameters,\n        // dataFormat: GL.RGBA,\n        width,\n        height\n        // ts-expect-error\n        // unpackFlipY\n    });\n    return texture;\n}\nexport function getFramebuffer(device, opts) {\n    const { id, width = 1, height = 1, texture } = opts;\n    const fb = device.createFramebuffer({\n        id,\n        width,\n        height,\n        colorAttachments: [texture]\n    });\n    return fb;\n}\nexport function getFloatArray(array, size, fillValue = 0) {\n    if (!array || array.length < size) {\n        return new Float32Array(size).fill(fillValue);\n    }\n    return array;\n}\n", "// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { Model, TextureTransform } from '@luma.gl/engine';\nimport { fp64arithmetic } from '@luma.gl/shadertools';\nimport { GL } from '@luma.gl/constants';\nimport { project32, _mergeShaders as mergeShaders, getShaderAssembler } from '@deck.gl/core';\nimport { DEFAULT_RUN_PARAMS, MAX_32_BIT_FLOAT, MIN_BLEND_EQUATION, MAX_BLEND_EQUATION, MAX_MIN_BLEND_EQUATION, EQUATION_MAP, DEFAULT_WEIGHT_PARAMS, PIXEL_SIZE } from \"./gpu-grid-aggregator-constants.js\";\nimport { AGGREGATION_OPERATION } from \"../aggregation-operation-utils.js\";\nimport AGGREGATE_TO_GRID_VS from \"./aggregate-to-grid-vs.glsl.js\";\nimport AGGREGATE_TO_GRID_FS from \"./aggregate-to-grid-fs.glsl.js\";\nimport AGGREGATE_ALL_VS from \"./aggregate-all-vs.glsl.js\";\nimport AGGREGATE_ALL_FS from \"./aggregate-all-fs.glsl.js\";\nimport TRANSFORM_MEAN_VS from \"./transform-mean-vs.glsl.js\";\nimport { getFloatTexture, getFramebuffer } from \"./../resource-utils.js\";\nconst BUFFER_NAMES = ['aggregationBuffer', 'maxMinBuffer', 'minBuffer', 'maxBuffer'];\nconst ARRAY_BUFFER_MAP = {\n    maxData: 'maxBuffer',\n    minData: 'minBuffer',\n    maxMinData: 'maxMinBuffer'\n};\nconst REQUIRED_FEATURES = [\n    'float32-renderable-webgl',\n    'texture-blend-float-webgl'\n];\nexport default class GPUGridAggregator {\n    // Decode and return aggregation data of given pixel.\n    static getAggregationData({ aggregationData, maxData, minData, maxMinData, pixelIndex }) {\n        const index = pixelIndex * PIXEL_SIZE;\n        const results = {};\n        if (aggregationData) {\n            results.cellCount = aggregationData[index + 3];\n            results.cellWeight = aggregationData[index];\n        }\n        if (maxMinData) {\n            results.maxCellWieght = maxMinData[0];\n            results.minCellWeight = maxMinData[3];\n        }\n        else {\n            if (maxData) {\n                results.maxCellWieght = maxData[0];\n                results.totalCount = maxData[3];\n            }\n            if (minData) {\n                results.minCellWeight = minData[0];\n                results.totalCount = minData[3];\n            }\n        }\n        return results;\n    }\n    // Decodes and retuns counts and weights of all cells\n    static getCellData({ countsData, size = 1 }) {\n        const numCells = countsData.length / 4;\n        const cellWeights = new Float32Array(numCells * size);\n        const cellCounts = new Uint32Array(numCells);\n        for (let i = 0; i < numCells; i++) {\n            // weights in RGB channels\n            for (let sizeIndex = 0; sizeIndex < size; sizeIndex++) {\n                cellWeights[i * size + sizeIndex] = countsData[i * 4 + sizeIndex];\n            }\n            // count in Alpha channel\n            cellCounts[i] = countsData[i * 4 + 3];\n        }\n        return { cellCounts, cellWeights };\n    }\n    static isSupported(device) {\n        return REQUIRED_FEATURES.every(feature => device.features.has(feature));\n    }\n    constructor(device, props = {}) {\n        // DEBUG ONLY\n        // static logData({aggregationBuffer, minBuffer, maxBuffer, maxMinBuffer, limit = 10}) {\n        //   if (aggregationBuffer) {\n        //     console.log('Aggregation Data:');\n        //     const agrData = aggregationBuffer.getData();\n        //     for (let index = 0; index < agrData.length && limit > 0; index += 4) {\n        //       if (agrData[index + 3] > 0) {\n        //         console.log(\n        //           `index: ${index} weights: ${agrData[index]} ${agrData[index + 1]} ${\n        //             agrData[index + 2]\n        //           } count: ${agrData[index + 3]}`\n        //         );\n        //         limit--;\n        //       }\n        //     }\n        //   }\n        //   const obj = {minBuffer, maxBuffer, maxMinBuffer};\n        //   for (const key in obj) {\n        //     if (obj[key]) {\n        //       const data = obj[key].getData();\n        //       console.log(`${key} data : R: ${data[0]} G: ${data[1]} B: ${data[2]} A: ${data[3]}`);\n        //     }\n        //   }\n        // }\n        this.state = {\n            // per weight GPU resources\n            weightAttributes: {},\n            textures: {},\n            meanTextures: {},\n            buffers: {},\n            framebuffers: {},\n            maxMinFramebuffers: {},\n            minFramebuffers: {},\n            maxFramebuffers: {},\n            equations: {},\n            shaderOptions: {},\n            modelDirty: false,\n            // common resources to be deleted\n            resources: {},\n            // results\n            results: {}\n        };\n        this.id = props.id || 'gpu-grid-aggregator';\n        this.device = device;\n        const REQUIRED_FEATURES = [\n            'float32-renderable-webgl' // render to float texture\n        ];\n        this._hasGPUSupport = REQUIRED_FEATURES.every(feature => device.features.has(feature));\n        if (this._hasGPUSupport) {\n            this._setupModels();\n        }\n    }\n    // Delete owned resources.\n    delete() {\n        const { gridAggregationModel, allAggregationModel, meanTransform } = this;\n        const { textures, framebuffers, maxMinFramebuffers, minFramebuffers, maxFramebuffers, meanTextures, resources } = this.state;\n        gridAggregationModel?.destroy();\n        allAggregationModel?.destroy();\n        meanTransform?.destroy();\n        deleteResources([\n            framebuffers,\n            textures,\n            maxMinFramebuffers,\n            minFramebuffers,\n            maxFramebuffers,\n            meanTextures,\n            resources\n        ]);\n    }\n    // Perform aggregation and retun the results\n    run(opts = {}) {\n        // reset results\n        this.setState({ results: {} });\n        const aggregationParams = this._normalizeAggregationParams(opts);\n        return this._runAggregation(aggregationParams);\n    }\n    // Reads aggregation data into JS Array object\n    // For WebGL1, data is available in JS Array objects already.\n    // For WebGL2, data is read from Buffer objects and cached for subsequent queries.\n    getData(weightId) {\n        const data = {};\n        const results = this.state.results;\n        if (!results[weightId].aggregationData) {\n            // cache the results if reading from the buffer (WebGL2 path)\n            results[weightId].aggregationData = results[weightId].aggregationBuffer.getData();\n        }\n        data.aggregationData = results[weightId].aggregationData;\n        // Check for optional results\n        for (const arrayName in ARRAY_BUFFER_MAP) {\n            const bufferName = ARRAY_BUFFER_MAP[arrayName];\n            if (results[weightId][arrayName] || results[weightId][bufferName]) {\n                // cache the result\n                results[weightId][arrayName] =\n                    results[weightId][arrayName] || results[weightId][bufferName].getData();\n                data[arrayName] = results[weightId][arrayName];\n            }\n        }\n        return data;\n    }\n    updateShaders(shaderOptions = {}) {\n        this.setState({ shaderOptions, modelDirty: true });\n    }\n    // PRIVATE\n    _normalizeAggregationParams(opts) {\n        const aggregationParams = { ...DEFAULT_RUN_PARAMS, ...opts };\n        const { weights } = aggregationParams;\n        if (weights) {\n            aggregationParams.weights = normalizeWeightParams(weights);\n        }\n        return aggregationParams;\n    }\n    // Update priveate state\n    setState(updateObject) {\n        Object.assign(this.state, updateObject);\n    }\n    // GPU Aggregation methods\n    _getAggregateData(opts) {\n        const results = {};\n        const { textures, framebuffers, maxMinFramebuffers, minFramebuffers, maxFramebuffers, resources } = this.state;\n        const { weights } = opts;\n        for (const id in weights) {\n            results[id] = {};\n            const { needMin, needMax, combineMaxMin } = weights[id];\n            results[id].aggregationTexture = textures[id];\n            results[id].aggregationBuffer = this.device.readPixelsToBufferWebGL(framebuffers[id], {\n                target: weights[id].aggregationBuffer, // update if a buffer is provided\n                sourceType: 5126\n            });\n            if (needMin && needMax && combineMaxMin) {\n                results[id].maxMinBuffer = this.device.readPixelsToBufferWebGL(maxMinFramebuffers[id], {\n                    target: weights[id].maxMinBuffer, // update if a buffer is provided\n                    sourceType: 5126\n                });\n                results[id].maxMinTexture = resources[`${id}-maxMinTexture`];\n            }\n            else {\n                if (needMin) {\n                    results[id].minBuffer = this.device.readPixelsToBufferWebGL(minFramebuffers[id], {\n                        target: weights[id].minBuffer, // update if a buffer is provided\n                        sourceType: 5126\n                    });\n                    results[id].minTexture = resources[`${id}-minTexture`];\n                }\n                if (needMax) {\n                    results[id].maxBuffer = this.device.readPixelsToBufferWebGL(maxFramebuffers[id], {\n                        target: weights[id].maxBuffer, // update if a buffer is provided\n                        sourceType: 5126\n                    });\n                    results[id].maxTexture = resources[`${id}-maxTexture`];\n                }\n            }\n        }\n        this._trackGPUResultBuffers(results, weights);\n        return results;\n    }\n    _renderAggregateData(opts) {\n        const { cellSize, projectPoints, attributes, moduleSettings, numCol, numRow, weights, translation, scaling } = opts;\n        const { maxMinFramebuffers, minFramebuffers, maxFramebuffers } = this.state;\n        const gridSize = [numCol, numRow];\n        const parameters = {\n            blend: true,\n            depthTest: false,\n            blendFunc: [1, 1]\n        };\n        const uniforms = {\n            cellSize,\n            gridSize,\n            projectPoints,\n            translation,\n            scaling\n        };\n        for (const id in weights) {\n            const { needMin, needMax } = weights[id];\n            const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n            this._renderToWeightsTexture({\n                id,\n                parameters,\n                moduleSettings,\n                uniforms,\n                gridSize,\n                attributes,\n                weights\n            });\n            if (combineMaxMin) {\n                this._renderToMaxMinTexture({\n                    id,\n                    parameters: { ...parameters, blendEquation: MAX_MIN_BLEND_EQUATION },\n                    gridSize,\n                    minOrMaxFb: maxMinFramebuffers[id],\n                    clearParams: { clearColor: [0, 0, 0, MAX_32_BIT_FLOAT] },\n                    combineMaxMin\n                });\n            }\n            else {\n                if (needMin) {\n                    this._renderToMaxMinTexture({\n                        id,\n                        parameters: { ...parameters, blendEquation: MIN_BLEND_EQUATION },\n                        gridSize,\n                        minOrMaxFb: minFramebuffers[id],\n                        clearParams: { clearColor: [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0] },\n                        combineMaxMin\n                    });\n                }\n                if (needMax) {\n                    this._renderToMaxMinTexture({\n                        id,\n                        parameters: { ...parameters, blendEquation: MAX_BLEND_EQUATION },\n                        gridSize,\n                        minOrMaxFb: maxFramebuffers[id],\n                        clearParams: { clearColor: [0, 0, 0, 0] },\n                        combineMaxMin\n                    });\n                }\n            }\n        }\n    }\n    // render all aggregated grid-cells to generate Min, Max or MaxMin data texture\n    _renderToMaxMinTexture(opts) {\n        const { id, gridSize, minOrMaxFb, combineMaxMin, clearParams = {} } = opts;\n        const { framebuffers } = this.state;\n        const { allAggregationModel } = this;\n        this.device.withParametersWebGL({\n            ...clearParams,\n            framebuffer: minOrMaxFb,\n            viewport: [0, 0, gridSize[0], gridSize[1]]\n        }, () => {\n            this.device.clearWebGL({ color: true });\n            // allAggregationModel.setParameters(parameters);\n            allAggregationModel.setUniforms({ gridSize, combineMaxMin });\n            allAggregationModel.setBindings({ uSampler: framebuffers[id].texture });\n            allAggregationModel.draw();\n            // TODO - we need to create a render pass for the aggregation\n            // allAggregationModel.draw(renderPass);\n        });\n    }\n    // render all data points to aggregate weights\n    _renderToWeightsTexture(opts) {\n        const { id, parameters, moduleSettings, uniforms, gridSize, weights } = opts;\n        const { framebuffers, equations, weightAttributes } = this.state;\n        const { gridAggregationModel } = this;\n        const { operation } = weights[id];\n        const clearColor = operation === AGGREGATION_OPERATION.MIN\n            ? [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0]\n            : [0, 0, 0, 0];\n        this.device.withParametersWebGL({\n            framebuffer: framebuffers[id],\n            viewport: [0, 0, gridSize[0], gridSize[1]],\n            clearColor\n        }, () => {\n            this.device.clearWebGL({ color: true });\n            const attributes = { weights: weightAttributes[id] };\n            gridAggregationModel.draw({\n                parameters: { ...parameters, blendEquation: equations[id] },\n                moduleSettings,\n                uniforms,\n                attributes\n            });\n        });\n        if (operation === AGGREGATION_OPERATION.MEAN) {\n            const { meanTextures, textures } = this.state;\n            const transformOptions = {\n                _sourceTextures: { aggregationValues: meanTextures[id] }, // contains aggregated data\n                _targetTexture: textures[id], // store mean values,\n                elementCount: textures[id].width * textures[id].height\n            };\n            if (this.meanTransform) {\n                this.meanTransform.update(transformOptions);\n            }\n            else {\n                this.meanTransform = getMeanTransform(this.device, transformOptions);\n            }\n            this.meanTransform.run({\n                parameters: {\n                    blend: false,\n                    depthTest: false\n                }\n            });\n            // update framebuffer with mean results so device.readPixelsToBufferWebGL returns mean values\n            framebuffers[id].attach({ [36064]: textures[id] });\n        }\n    }\n    _runAggregation(opts) {\n        this._updateModels(opts);\n        this._setupFramebuffers(opts);\n        this._renderAggregateData(opts);\n        const results = this._getAggregateData(opts);\n        this.setState({ results });\n        return results;\n    }\n    // set up framebuffer for each weight\n    /* eslint-disable complexity, max-depth, max-statements*/\n    _setupFramebuffers(opts) {\n        const { textures, framebuffers, maxMinFramebuffers, minFramebuffers, maxFramebuffers, meanTextures, equations } = this.state;\n        const { weights } = opts;\n        const { numCol, numRow } = opts;\n        const framebufferSize = { width: numCol, height: numRow };\n        for (const id in weights) {\n            const { needMin, needMax, combineMaxMin, operation } = weights[id];\n            textures[id] =\n                weights[id].aggregationTexture ||\n                    textures[id] ||\n                    getFloatTexture(this.device, { id: `${id}-texture`, width: numCol, height: numRow });\n            textures[id].resize(framebufferSize);\n            let texture = textures[id];\n            if (operation === AGGREGATION_OPERATION.MEAN) {\n                // For MEAN, we first aggregatet into a temp texture\n                meanTextures[id] =\n                    meanTextures[id] ||\n                        getFloatTexture(this.device, { id: `${id}-mean-texture`, width: numCol, height: numRow });\n                meanTextures[id].resize(framebufferSize);\n                texture = meanTextures[id];\n            }\n            if (framebuffers[id]) {\n                framebuffers[id].attach({ [36064]: texture });\n            }\n            else {\n                framebuffers[id] = getFramebuffer(this.device, {\n                    id: `${id}-fb`,\n                    width: numCol,\n                    height: numRow,\n                    texture\n                });\n            }\n            framebuffers[id].resize(framebufferSize);\n            equations[id] = EQUATION_MAP[operation] || EQUATION_MAP[AGGREGATION_OPERATION.SUM];\n            // For min/max framebuffers will use default size 1X1\n            if (needMin || needMax) {\n                if (needMin && needMax && combineMaxMin) {\n                    if (!maxMinFramebuffers[id]) {\n                        texture = weights[id].maxMinTexture || this._getMinMaxTexture(`${id}-maxMinTexture`);\n                        maxMinFramebuffers[id] = getFramebuffer(this.device, { id: `${id}-maxMinFb`, texture });\n                    }\n                }\n                else {\n                    if (needMin) {\n                        if (!minFramebuffers[id]) {\n                            texture = weights[id].minTexture || this._getMinMaxTexture(`${id}-minTexture`);\n                            minFramebuffers[id] = getFramebuffer(this.device, {\n                                id: `${id}-minFb`,\n                                texture\n                            });\n                        }\n                    }\n                    if (needMax) {\n                        if (!maxFramebuffers[id]) {\n                            texture = weights[id].maxTexture || this._getMinMaxTexture(`${id}-maxTexture`);\n                            maxFramebuffers[id] = getFramebuffer(this.device, {\n                                id: `${id}-maxFb`,\n                                texture\n                            });\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /* eslint-enable complexity, max-depth, max-statements */\n    _getMinMaxTexture(name) {\n        const { resources } = this.state;\n        if (!resources[name]) {\n            resources[name] = getFloatTexture(this.device, { id: 'resourceName' });\n        }\n        return resources[name];\n    }\n    _setupModels({ numCol = 0, numRow = 0 } = {}) {\n        const { shaderOptions } = this.state;\n        this.gridAggregationModel?.destroy();\n        this.gridAggregationModel = getAggregationModel(this.device, shaderOptions);\n        if (!this.allAggregationModel) {\n            const instanceCount = numCol * numRow;\n            this.allAggregationModel = getAllAggregationModel(this.device, instanceCount);\n        }\n    }\n    // set up buffers for all weights\n    _setupWeightAttributes(opts) {\n        const { weightAttributes } = this.state;\n        const { weights } = opts;\n        for (const id in weights) {\n            weightAttributes[id] = opts.attributes[id];\n        }\n    }\n    /** GPU Aggregation results are provided in Buffers, if new Buffer objects are created track them for later deletion. */\n    /* eslint-disable max-depth */\n    _trackGPUResultBuffers(results, weights) {\n        const { resources } = this.state;\n        for (const id in results) {\n            if (results[id]) {\n                for (const bufferName of BUFFER_NAMES) {\n                    if (results[id][bufferName] && weights[id][bufferName] !== results[id][bufferName]) {\n                        // No result buffer is provided in weights object, `device.readPixelsToBufferWebGL` has created a new Buffer object\n                        // collect the new buffer for garabge collection\n                        const name = `gpu-result-${id}-${bufferName}`;\n                        if (resources[name]) {\n                            resources[name].delete();\n                        }\n                        resources[name] = results[id][bufferName];\n                    }\n                }\n            }\n        }\n    }\n    /* eslint-enable max-depth */\n    _updateModels(opts) {\n        const { vertexCount, attributes, numCol, numRow } = opts;\n        const { modelDirty } = this.state;\n        if (modelDirty) {\n            this._setupModels(opts);\n            this.setState({ modelDirty: false });\n        }\n        // this maps color/elevation to weight name.\n        this._setupWeightAttributes(opts);\n        this.gridAggregationModel.setVertexCount(vertexCount);\n        this.gridAggregationModel.setAttributes(attributes);\n        this.allAggregationModel.setInstanceCount(numCol * numRow);\n    }\n}\n// HELPER METHODS\nfunction normalizeWeightParams(weights) {\n    const result = {};\n    for (const id in weights) {\n        result[id] = { ...DEFAULT_WEIGHT_PARAMS, ...weights[id] };\n    }\n    return result;\n}\nfunction deleteResources(resources) {\n    resources = Array.isArray(resources) ? resources : [resources];\n    resources.forEach(obj => {\n        for (const name in obj) {\n            obj[name].delete();\n        }\n    });\n}\nfunction getAggregationModel(device, shaderOptions) {\n    const shaders = mergeShaders({\n        vs: AGGREGATE_TO_GRID_VS,\n        fs: AGGREGATE_TO_GRID_FS,\n        modules: [fp64arithmetic, project32]\n    }, shaderOptions);\n    return new Model(device, {\n        id: 'Grid-Aggregation-Model',\n        vertexCount: 1,\n        drawMode: 0,\n        shaderAssembler: getShaderAssembler(),\n        ...shaders\n    });\n}\nfunction getAllAggregationModel(device, instanceCount) {\n    return new Model(device, {\n        id: 'All-Aggregation-Model',\n        vs: AGGREGATE_ALL_VS,\n        fs: AGGREGATE_ALL_FS,\n        modules: [fp64arithmetic],\n        vertexCount: 1,\n        topology: 'point-list',\n        isInstanced: true,\n        instanceCount,\n        attributes: {\n            // @ts-expect-error\n            position: [0, 0]\n        }\n    });\n}\nfunction getMeanTransform(device, opts) {\n    return new TextureTransform(device, {\n        vs: TRANSFORM_MEAN_VS,\n        _targetTextureVarying: 'meanValues',\n        ...opts\n    });\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nexport const defaultColorRange = [\n    [255, 255, 178],\n    [254, 217, 118],\n    [254, 178, 76],\n    [253, 141, 60],\n    [240, 59, 32],\n    [189, 0, 38]\n];\n// Converts a colorRange array to a flat array with 4 components per color\nexport function colorRangeToFlatArray(colorRange, normalize = false, ArrayType = Float32Array) {\n    let flatArray;\n    if (Number.isFinite(colorRange[0])) {\n        // its already a flat array.\n        flatArray = new ArrayType(colorRange);\n    }\n    else {\n        // flatten it\n        flatArray = new ArrayType(colorRange.length * 4);\n        let index = 0;\n        for (let i = 0; i < colorRange.length; i++) {\n            const color = colorRange[i];\n            flatArray[index++] = color[0];\n            flatArray[index++] = color[1];\n            flatArray[index++] = color[2];\n            flatArray[index++] = Number.isFinite(color[3]) ? color[3] : 255;\n        }\n    }\n    if (normalize) {\n        for (let i = 0; i < flatArray.length; i++) {\n            flatArray[i] /= 255;\n        }\n    }\n    return flatArray;\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nexport default `\\\n#version 300 es\n#define SHADER_NAME screen-grid-layer-vertex-shader\n#define RANGE_COUNT 6\nin vec3 positions;\nin vec3 instancePositions;\nin vec4 instanceCounts;\nin vec3 instancePickingColors;\nuniform float opacity;\nuniform vec3 cellScale;\nuniform vec4 minColor;\nuniform vec4 maxColor;\nuniform vec4 colorRange[RANGE_COUNT];\nuniform vec2 colorDomain;\nuniform bool shouldUseMinMax;\nuniform sampler2D maxTexture;\nout vec4 vColor;\nout float vSampleCount;\nvec4 quantizeScale(vec2 domain, vec4 range[RANGE_COUNT], float value) {\nvec4 outColor = vec4(0., 0., 0., 0.);\nif (value >= domain.x && value <= domain.y) {\nfloat domainRange = domain.y - domain.x;\nif (domainRange <= 0.) {\noutColor = colorRange[0];\n} else {\nfloat rangeCount = float(RANGE_COUNT);\nfloat rangeStep = domainRange / rangeCount;\nfloat idx = floor((value - domain.x) / rangeStep);\nidx = clamp(idx, 0., rangeCount - 1.);\nint intIdx = int(idx);\noutColor = colorRange[intIdx];\n}\n}\noutColor = outColor / 255.;\nreturn outColor;\n}\nvoid main(void) {\nvSampleCount = instanceCounts.a;\nfloat weight = instanceCounts.r;\nfloat maxWeight = texture(maxTexture, vec2(0.5)).r;\nfloat step = weight / maxWeight;\nvec4 minMaxColor = mix(minColor, maxColor, step) / 255.;\nvec2 domain = colorDomain;\nfloat domainMaxValid = float(colorDomain.y != 0.);\ndomain.y = mix(maxWeight, colorDomain.y, domainMaxValid);\nvec4 rangeColor = quantizeScale(domain, colorRange, weight);\nfloat rangeMinMax = float(shouldUseMinMax);\nvec4 color = mix(rangeColor, minMaxColor, rangeMinMax);\nvColor = vec4(color.rgb, color.a * opacity);\npicking_setPickingColor(instancePickingColors);\ngl_Position = vec4(instancePositions + positions * cellScale, 1.);\n}\n`;\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n/* fragment shader for the grid-layer */\nexport default `\\\n#version 300 es\n#define SHADER_NAME screen-grid-layer-fragment-shader\nprecision highp float;\nin vec4 vColor;\nin float vSampleCount;\nout vec4 fragColor;\nvoid main(void) {\nif (vSampleCount <= 0.0) {\ndiscard;\n}\nfragColor = vColor;\nDECKGL_FILTER_COLOR(fragColor, geometry);\n}\n`;\n", "// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { Model, Geometry } from '@luma.gl/engine';\nimport { Layer, log, picking } from '@deck.gl/core';\nimport { defaultColorRange, colorRangeToFlatArray } from \"../utils/color-utils.js\";\nimport vs from \"./screen-grid-layer-vertex.glsl.js\";\nimport fs from \"./screen-grid-layer-fragment.glsl.js\";\nconst DEFAULT_MINCOLOR = [0, 0, 0, 0];\nconst DEFAULT_MAXCOLOR = [0, 255, 0, 255];\nconst COLOR_PROPS = ['minColor', 'maxColor', 'colorRange', 'colorDomain'];\nconst defaultProps = {\n    cellSizePixels: { type: 'number', value: 100, min: 1 },\n    cellMarginPixels: { type: 'number', value: 2, min: 0, max: 5 },\n    colorDomain: null,\n    colorRange: defaultColorRange\n};\nclass ScreenGridCellLayer extends Layer {\n    getShaders() {\n        return { vs, fs, modules: [picking] };\n    }\n    initializeState() {\n        const attributeManager = this.getAttributeManager();\n        attributeManager.addInstanced({\n            // eslint-disable-next-line @typescript-eslint/unbound-method\n            instancePositions: { size: 3, update: this.calculateInstancePositions },\n            instanceCounts: { size: 4, noAlloc: true }\n        });\n        this.setState({\n            model: this._getModel()\n        });\n    }\n    shouldUpdateState({ changeFlags }) {\n        // 'instanceCounts' buffer contetns change on viewport change.\n        return changeFlags.somethingChanged;\n    }\n    updateState(params) {\n        super.updateState(params);\n        const { oldProps, props, changeFlags } = params;\n        const attributeManager = this.getAttributeManager();\n        if (props.numInstances !== oldProps.numInstances) {\n            attributeManager.invalidateAll();\n        }\n        else if (oldProps.cellSizePixels !== props.cellSizePixels) {\n            attributeManager.invalidate('instancePositions');\n        }\n        this._updateUniforms(oldProps, props, changeFlags);\n    }\n    draw({ uniforms }) {\n        const { parameters, maxTexture } = this.props;\n        const minColor = this.props.minColor || DEFAULT_MINCOLOR;\n        const maxColor = this.props.maxColor || DEFAULT_MAXCOLOR;\n        // If colorDomain not specified we use default domain [1, maxCount]\n        // maxCount value will be sampled form maxTexture in vertex shader.\n        const colorDomain = this.props.colorDomain || [1, 0];\n        const model = this.state.model;\n        model.setUniforms(uniforms);\n        model.setBindings({\n            maxTexture\n        });\n        model.setUniforms({\n            // @ts-expect-error stricter luma gl types\n            minColor,\n            // @ts-expect-error stricter luma gl types\n            maxColor,\n            colorDomain\n        });\n        model.setParameters({\n            depthWriteEnabled: false,\n            // How to specify depth mask in WebGPU?\n            // depthMask: false,\n            ...parameters\n        });\n        model.draw(this.context.renderPass);\n    }\n    calculateInstancePositions(attribute, { numInstances }) {\n        const { width, height } = this.context.viewport;\n        const { cellSizePixels } = this.props;\n        const numCol = Math.ceil(width / cellSizePixels);\n        const { value, size } = attribute;\n        for (let i = 0; i < numInstances; i++) {\n            const x = i % numCol;\n            const y = Math.floor(i / numCol);\n            value[i * size + 0] = ((x * cellSizePixels) / width) * 2 - 1;\n            value[i * size + 1] = 1 - ((y * cellSizePixels) / height) * 2;\n            value[i * size + 2] = 0;\n        }\n    }\n    // Private Methods\n    _getModel() {\n        return new Model(this.context.device, {\n            ...this.getShaders(),\n            id: this.props.id,\n            bufferLayout: this.getAttributeManager().getBufferLayouts(),\n            geometry: new Geometry({\n                topology: 'triangle-list',\n                attributes: {\n                    // prettier-ignore\n                    positions: new Float32Array([\n                        0, 0, 0,\n                        1, 0, 0,\n                        1, 1, 0,\n                        0, 0, 0,\n                        1, 1, 0,\n                        0, 1, 0,\n                    ])\n                }\n            }),\n            isInstanced: true\n        });\n    }\n    _shouldUseMinMax() {\n        const { minColor, maxColor, colorDomain, colorRange } = this.props;\n        if (minColor || maxColor) {\n            log.deprecated('ScreenGridLayer props: minColor and maxColor', 'colorRange, colorDomain')();\n            return true;\n        }\n        // minColor and maxColor not supplied, check if colorRange or colorDomain supplied.\n        // NOTE: colorDomain and colorRange are experimental features, use them only when supplied.\n        if (colorDomain || colorRange) {\n            return false;\n        }\n        // None specified, use default minColor and maxColor\n        return true;\n    }\n    _updateUniforms(oldProps, props, changeFlags) {\n        const model = this.state.model;\n        if (COLOR_PROPS.some(key => oldProps[key] !== props[key])) {\n            model.setUniforms({ shouldUseMinMax: this._shouldUseMinMax() });\n        }\n        if (oldProps.colorRange !== props.colorRange) {\n            model.setUniforms({ colorRange: colorRangeToFlatArray(props.colorRange) });\n        }\n        if (oldProps.cellMarginPixels !== props.cellMarginPixels ||\n            oldProps.cellSizePixels !== props.cellSizePixels ||\n            changeFlags.viewportChanged) {\n            const { width, height } = this.context.viewport;\n            const { cellSizePixels, cellMarginPixels } = this.props;\n            const margin = cellSizePixels > cellMarginPixels ? cellMarginPixels : 0;\n            const cellScale = new Float32Array([\n                ((cellSizePixels - margin) / width) * 2,\n                (-(cellSizePixels - margin) / height) * 2,\n                1\n            ]);\n            // @ts-expect-error stricter luma gl types\n            model.setUniforms({ cellScale });\n        }\n    }\n}\nScreenGridCellLayer.layerName = 'ScreenGridCellLayer';\nScreenGridCellLayer.defaultProps = defaultProps;\nexport default ScreenGridCellLayer;\n", "// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nexport function filterProps(props, filterKeys) {\n    const filteredProps = {};\n    for (const key in props) {\n        if (!filterKeys.includes(key)) {\n            filteredProps[key] = props[key];\n        }\n    }\n    return filteredProps;\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { CompositeLayer, AttributeManager, _compareProps as compareProps } from '@deck.gl/core';\nimport { filterProps } from \"./utils/prop-utils.js\";\nclass AggregationLayer extends CompositeLayer {\n    initializeAggregationLayer(dimensions) {\n        super.initializeState(this.context);\n        this.setState({\n            // Layer props , when changed doesn't require updating aggregation\n            ignoreProps: filterProps(this.constructor._propTypes, dimensions.data.props),\n            dimensions\n        });\n    }\n    updateState(opts) {\n        super.updateState(opts);\n        const { changeFlags } = opts;\n        if (changeFlags.extensionsChanged) {\n            const shaders = this.getShaders({});\n            if (shaders && shaders.defines) {\n                shaders.defines.NON_INSTANCED_MODEL = 1;\n            }\n            this.updateShaders(shaders);\n        }\n        // Explictly call to update attributes as 'CompositeLayer' doesn't call this\n        this._updateAttributes();\n    }\n    updateAttributes(changedAttributes) {\n        // Super classes, can refer to state.changedAttributes to determine what\n        // attributes changed\n        this.setState({ changedAttributes });\n    }\n    getAttributes() {\n        return this.getAttributeManager().getAttributes();\n    }\n    getModuleSettings() {\n        // For regular layer draw this happens during draw cycle (_drawLayersInViewport) not during update cycle\n        // For aggregation layers this is called during updateState to update aggregation data\n        // NOTE: it is similar to LayerPass._getModuleParameters() but doesn't inlcude `effects` it is not needed for aggregation\n        const { viewport, mousePosition, device } = this.context;\n        const moduleSettings = Object.assign(Object.create(this.props), {\n            viewport,\n            mousePosition,\n            picking: {\n                isActive: 0\n            },\n            // @ts-expect-error TODO - assuming WebGL context\n            devicePixelRatio: device.canvasContext.cssToDeviceRatio()\n        });\n        return moduleSettings;\n    }\n    updateShaders(shaders) {\n        // Default implemention is empty, subclasses can update their Model objects if needed\n    }\n    /**\n     * Checks if aggregation is dirty\n     * @param {Object} updateOpts - object {props, oldProps, changeFlags}\n     * @param {Object} params - object {dimension, compareAll}\n     * @param {Object} params.dimension - {props, accessors} array of props and/or accessors\n     * @param {Boolean} params.compareAll - when `true` it will include non layer props for comparision\n     * @returns {Boolean} - returns true if dimensions' prop or accessor is changed\n     **/\n    isAggregationDirty(updateOpts, params = {}) {\n        const { props, oldProps, changeFlags } = updateOpts;\n        const { compareAll = false, dimension } = params;\n        const { ignoreProps } = this.state;\n        const { props: dataProps, accessors = [] } = dimension;\n        const { updateTriggersChanged } = changeFlags;\n        if (changeFlags.dataChanged) {\n            return true;\n        }\n        if (updateTriggersChanged) {\n            if (updateTriggersChanged.all) {\n                return true;\n            }\n            for (const accessor of accessors) {\n                if (updateTriggersChanged[accessor]) {\n                    return true;\n                }\n            }\n        }\n        if (compareAll) {\n            if (changeFlags.extensionsChanged) {\n                return true;\n            }\n            // Compare non layer props too (like extension props)\n            // ignoreprops refers to all Layer props other than aggregation props that need to be comapred\n            return compareProps({\n                oldProps,\n                newProps: props,\n                ignoreProps,\n                propTypes: this.constructor._propTypes\n            });\n        }\n        // Compare props of the dimension\n        for (const name of dataProps) {\n            if (props[name] !== oldProps[name]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Checks if an attribute is changed\n     * @param {String} name - name of the attribute\n     * @returns {Boolean} - `true` if attribute `name` is changed, `false` otherwise,\n     *                       If `name` is not passed or `undefiend`, `true` if any attribute is changed, `false` otherwise\n     **/\n    isAttributeChanged(name) {\n        const { changedAttributes } = this.state;\n        if (!name) {\n            // if name not specified return true if any attribute is changed\n            return !isObjectEmpty(changedAttributes);\n        }\n        return changedAttributes && changedAttributes[name] !== undefined;\n    }\n    // Private\n    // override Composite layer private method to create AttributeManager instance\n    _getAttributeManager() {\n        return new AttributeManager(this.context.device, {\n            id: this.props.id,\n            stats: this.context.stats\n        });\n    }\n}\nAggregationLayer.layerName = 'AggregationLayer';\nexport default AggregationLayer;\n// Helper methods\n// Returns true if given object is empty, false otherwise.\nfunction isObjectEmpty(obj) {\n    let isEmpty = true;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    for (const key in obj) {\n        isEmpty = false;\n        break;\n    }\n    return isEmpty;\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { log } from '@deck.gl/core';\n// a scale function wrapper just like d3-scales\nexport function getScale(domain, range, scaleFunction) {\n    const scale = scaleFunction;\n    scale.domain = () => domain;\n    scale.range = () => range;\n    return scale;\n}\n// Quantize scale is similar to linear scales,\n// except it uses a discrete rather than continuous range\n// return a quantize scale function\nexport function getQuantizeScale(domain, range) {\n    const scaleFunction = value => quantizeScale(domain, range, value);\n    return getScale(domain, range, scaleFunction);\n}\n// return a linear scale function\nexport function getLinearScale(domain, range) {\n    const scaleFunction = value => linearScale(domain, range, value);\n    return getScale(domain, range, scaleFunction);\n}\nexport function getQuantileScale(domain, range) {\n    // calculate threshold\n    const sortedDomain = domain.sort(ascending);\n    let i = 0;\n    const n = Math.max(1, range.length);\n    const thresholds = new Array(n - 1);\n    while (++i < n) {\n        thresholds[i - 1] = threshold(sortedDomain, i / n);\n    }\n    const scaleFunction = value => thresholdsScale(thresholds, range, value);\n    scaleFunction.thresholds = () => thresholds;\n    return getScale(domain, range, scaleFunction);\n}\nfunction ascending(a, b) {\n    return a - b;\n}\nfunction threshold(domain, fraction) {\n    const domainLength = domain.length;\n    if (fraction <= 0 || domainLength < 2) {\n        return domain[0];\n    }\n    if (fraction >= 1) {\n        return domain[domainLength - 1];\n    }\n    const domainFraction = (domainLength - 1) * fraction;\n    const lowIndex = Math.floor(domainFraction);\n    const low = domain[lowIndex];\n    const high = domain[lowIndex + 1];\n    return low + (high - low) * (domainFraction - lowIndex);\n}\nfunction bisectRight(a, x) {\n    let lo = 0;\n    let hi = a.length;\n    while (lo < hi) {\n        const mid = (lo + hi) >>> 1;\n        if (ascending(a[mid], x) > 0) {\n            hi = mid;\n        }\n        else {\n            lo = mid + 1;\n        }\n    }\n    return lo;\n}\n// return a quantize scale function\nfunction thresholdsScale(thresholds, range, value) {\n    return range[bisectRight(thresholds, value)];\n}\n// ordinal Scale\nfunction ordinalScale(domain, domainMap, range, value) {\n    const key = `${value}`;\n    let d = domainMap.get(key);\n    if (d === undefined) {\n        // update the domain\n        d = domain.push(value);\n        domainMap.set(key, d);\n    }\n    return range[(d - 1) % range.length];\n}\nexport function getOrdinalScale(domain, range) {\n    const domainMap = new Map();\n    const uniqueDomain = [];\n    for (const d of domain) {\n        const key = `${d}`;\n        if (!domainMap.has(key)) {\n            domainMap.set(key, uniqueDomain.push(d));\n        }\n    }\n    const scaleFunction = value => ordinalScale(uniqueDomain, domainMap, range, value);\n    return getScale(domain, range, scaleFunction);\n}\n// Quantize scale is similar to linear scales,\n// except it uses a discrete rather than continuous range\nexport function quantizeScale(domain, range, value) {\n    const domainRange = domain[1] - domain[0];\n    if (domainRange <= 0) {\n        log.warn('quantizeScale: invalid domain, returning range[0]')();\n        return range[0];\n    }\n    const step = domainRange / range.length;\n    const idx = Math.floor((value - domain[0]) / step);\n    const clampIdx = Math.max(Math.min(idx, range.length - 1), 0);\n    return range[clampIdx];\n}\n// Linear scale maps continuous domain to continuous range\nexport function linearScale(domain, range, value) {\n    return ((value - domain[0]) / (domain[1] - domain[0])) * (range[1] - range[0]) + range[0];\n}\n// get scale domains\nfunction notNullOrUndefined(d) {\n    return d !== undefined && d !== null;\n}\nexport function unique(values) {\n    const results = [];\n    values.forEach(v => {\n        if (!results.includes(v) && notNullOrUndefined(v)) {\n            results.push(v);\n        }\n    });\n    return results;\n}\nfunction getTruthyValues(data, valueAccessor) {\n    const values = typeof valueAccessor === 'function' ? data.map(valueAccessor) : data;\n    return values.filter(notNullOrUndefined);\n}\nexport function getLinearDomain(data, valueAccessor) {\n    const sorted = getTruthyValues(data, valueAccessor).sort();\n    return sorted.length ? [sorted[0], sorted[sorted.length - 1]] : [0, 0];\n}\nexport function getQuantileDomain(data, valueAccessor) {\n    return getTruthyValues(data, valueAccessor);\n}\nexport function getOrdinalDomain(data, valueAccessor) {\n    return unique(getTruthyValues(data, valueAccessor));\n}\nexport function getScaleDomain(scaleType, data, valueAccessor) {\n    switch (scaleType) {\n        case 'quantize':\n        case 'linear':\n            return getLinearDomain(data, valueAccessor);\n        case 'quantile':\n            return getQuantileDomain(data, valueAccessor);\n        case 'ordinal':\n            return getOrdinalDomain(data, valueAccessor);\n        default:\n            return getLinearDomain(data, valueAccessor);\n    }\n}\nexport function clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\nexport function getScaleFunctionByScaleType(scaleType) {\n    switch (scaleType) {\n        case 'quantize':\n            return getQuantizeScale;\n        case 'linear':\n            return getLinearScale;\n        case 'quantile':\n            return getQuantileScale;\n        case 'ordinal':\n            return getOrdinalScale;\n        default:\n            return getQuantizeScale;\n    }\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n// getValue takes an array of points returns a value to sort the bins on.\n// by default it returns the number of points\n// this is where to pass in a function to color the bins by\n// avg/mean/max of specific value of the point\nconst defaultGetValue = points => points.length;\nimport { clamp, getQuantileDomain, getOrdinalDomain } from \"./scale-utils.js\";\nconst MAX_32_BIT_FLOAT = 3.402823466e38;\n// access array of points in each bin\nconst defaultGetPoints = bin => bin.points;\n// access index of each bin\nconst defaultGetIndex = bin => bin.index;\n// d3-scending\nconst ascending = (a, b) => (a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN);\nconst defaultProps = {\n    getValue: defaultGetValue,\n    getPoints: defaultGetPoints,\n    getIndex: defaultGetIndex,\n    filterData: null\n};\nexport default class BinSorter {\n    constructor(bins = [], props = defaultProps) {\n        this.aggregatedBins = this.getAggregatedBins(bins, props);\n        this._updateMinMaxValues();\n        this.binMap = this.getBinMap();\n    }\n    /**\n     * Get an array of object with aggregated values and index of bins\n     * Array object will be sorted by value optionally.\n     * @param {Array} bins\n     * @param {Function} getValue\n     * @return {Array} array of values and index lookup\n     */\n    getAggregatedBins(bins, props) {\n        const { getValue = defaultGetValue, getPoints = defaultGetPoints, getIndex = defaultGetIndex, filterData } = props;\n        const hasFilter = typeof filterData === 'function';\n        const binCount = bins.length;\n        const aggregatedBins = [];\n        let index = 0;\n        for (let binIndex = 0; binIndex < binCount; binIndex++) {\n            const bin = bins[binIndex];\n            const points = getPoints(bin);\n            const i = getIndex(bin);\n            const filteredPoints = hasFilter ? points.filter(filterData) : points;\n            bin.filteredPoints = hasFilter ? filteredPoints : null;\n            const value = filteredPoints.length ? getValue(filteredPoints) : null;\n            if (value !== null && value !== undefined) {\n                // filter bins if value is null or undefined\n                aggregatedBins[index] = {\n                    i: Number.isFinite(i) ? i : binIndex,\n                    value,\n                    counts: filteredPoints.length\n                };\n                index++;\n            }\n        }\n        return aggregatedBins;\n    }\n    _percentileToIndex(percentileRange) {\n        const len = this.sortedBins.length;\n        if (len < 2) {\n            return [0, 0];\n        }\n        const [lower, upper] = percentileRange.map(n => clamp(n, 0, 100));\n        const lowerIdx = Math.ceil((lower / 100) * (len - 1));\n        const upperIdx = Math.floor((upper / 100) * (len - 1));\n        return [lowerIdx, upperIdx];\n    }\n    /**\n     * Get a mapping from cell/hexagon index to sorted bin\n     * This is used to retrieve bin value for color calculation\n     * @return {Object} bin index to aggregatedBins\n     */\n    getBinMap() {\n        const binMap = {};\n        for (const bin of this.aggregatedBins) {\n            binMap[bin.i] = bin;\n        }\n        return binMap;\n    }\n    // Private\n    /**\n     * Get ths max count of all bins\n     */\n    _updateMinMaxValues() {\n        let maxCount = 0;\n        let maxValue = 0;\n        let minValue = MAX_32_BIT_FLOAT;\n        let totalCount = 0;\n        for (const x of this.aggregatedBins) {\n            maxCount = maxCount > x.counts ? maxCount : x.counts;\n            maxValue = maxValue > x.value ? maxValue : x.value;\n            minValue = minValue < x.value ? minValue : x.value;\n            totalCount += x.counts;\n        }\n        this.maxCount = maxCount;\n        this.maxValue = maxValue;\n        this.minValue = minValue;\n        this.totalCount = totalCount;\n    }\n    /**\n     * Get range of values of all bins\n     * @param {Number[]} range\n     * @param {Number} range[0] - lower bound\n     * @param {Number} range[1] - upper bound\n     * @return {Array} array of new value range\n     */\n    getValueRange(percentileRange) {\n        if (!this.sortedBins) {\n            this.sortedBins = this.aggregatedBins.sort((a, b) => ascending(a.value, b.value));\n        }\n        if (!this.sortedBins.length) {\n            // @ts-expect-error\n            return [];\n        }\n        let lowerIdx = 0;\n        let upperIdx = this.sortedBins.length - 1;\n        if (Array.isArray(percentileRange)) {\n            const idxRange = this._percentileToIndex(percentileRange);\n            lowerIdx = idxRange[0];\n            upperIdx = idxRange[1];\n        }\n        return [this.sortedBins[lowerIdx].value, this.sortedBins[upperIdx].value];\n    }\n    getValueDomainByScale(scale, [lower = 0, upper = 100] = []) {\n        if (!this.sortedBins) {\n            this.sortedBins = this.aggregatedBins.sort((a, b) => ascending(a.value, b.value));\n        }\n        if (!this.sortedBins.length) {\n            return [];\n        }\n        const indexEdge = this._percentileToIndex([lower, upper]);\n        return this._getScaleDomain(scale, indexEdge);\n    }\n    _getScaleDomain(scaleType, [lowerIdx, upperIdx]) {\n        const bins = this.sortedBins;\n        switch (scaleType) {\n            case 'quantize':\n            case 'linear':\n                return [bins[lowerIdx].value, bins[upperIdx].value];\n            case 'quantile':\n                return getQuantileDomain(bins.slice(lowerIdx, upperIdx + 1), d => d.value);\n            case 'ordinal':\n                return getOrdinalDomain(bins, d => d.value);\n            default:\n                return [bins[lowerIdx].value, bins[upperIdx].value];\n        }\n    }\n}\n", "import { log, COORDINATE_SYSTEM } from '@deck.gl/core';\nconst R_EARTH = 6378000;\nfunction toFinite(n) {\n    return Number.isFinite(n) ? n : 0;\n}\n// Parse input data to build positions, wights and bounding box.\n/* eslint-disable-next-line max-statements */\nexport function getBoundingBox(attributes, vertexCount) {\n    // TODO - value might not exist (e.g. attribute transition)\n    const positions = attributes.positions.value;\n    let yMin = Infinity;\n    let yMax = -Infinity;\n    let xMin = Infinity;\n    let xMax = -Infinity;\n    let y;\n    let x;\n    for (let i = 0; i < vertexCount; i++) {\n        x = positions[i * 3];\n        y = positions[i * 3 + 1];\n        yMin = y < yMin ? y : yMin;\n        yMax = y > yMax ? y : yMax;\n        xMin = x < xMin ? x : xMin;\n        xMax = x > xMax ? x : xMax;\n    }\n    const boundingBox = {\n        xMin: toFinite(xMin),\n        xMax: toFinite(xMax),\n        yMin: toFinite(yMin),\n        yMax: toFinite(yMax)\n    };\n    return boundingBox;\n}\n/* eslint-enable max-statements */\n// Returns XY translation for positions to peform aggregation in +ve sapce\nfunction getTranslation(boundingBox, gridOffset, coordinateSystem, viewport) {\n    const { width, height } = viewport;\n    // Origin to define grid\n    // DEFAULT coordinate system is treated as LNGLAT\n    const worldOrigin = coordinateSystem === COORDINATE_SYSTEM.CARTESIAN ? [-width / 2, -height / 2] : [-180, -90];\n    // Other coordinate systems not supported/verified yet\n    log.assert(coordinateSystem === COORDINATE_SYSTEM.CARTESIAN ||\n        coordinateSystem === COORDINATE_SYSTEM.LNGLAT ||\n        coordinateSystem === COORDINATE_SYSTEM.DEFAULT);\n    const { xMin, yMin } = boundingBox;\n    return [\n        // Align origin to match grid cell boundaries in CPU and GPU aggregations\n        -1 * (alignToCell(xMin - worldOrigin[0], gridOffset.xOffset) + worldOrigin[0]),\n        -1 * (alignToCell(yMin - worldOrigin[1], gridOffset.yOffset) + worldOrigin[1])\n    ];\n}\n// Aligns `inValue` to given `cellSize`\nexport function alignToCell(inValue, cellSize) {\n    const sign = inValue < 0 ? -1 : 1;\n    let value = sign < 0 ? Math.abs(inValue) + cellSize : Math.abs(inValue);\n    value = Math.floor(value / cellSize) * cellSize;\n    return value * sign;\n}\n/**\n * Based on geometric center of sample points, calculate cellSize in lng/lat (degree) space\n * @param {object} boundingBox - {xMin, yMin, xMax, yMax} contains bounding box of data\n * @param {number} cellSize - grid cell size in meters\n * @param {boolean, optional} converToDegrees - when true offsets are converted from meters to lng/lat (degree) space\n * @returns {xOffset, yOffset} - cellSize size\n */\nexport function getGridOffset(boundingBox, cellSize, convertToMeters = true) {\n    if (!convertToMeters) {\n        return { xOffset: cellSize, yOffset: cellSize };\n    }\n    const { yMin, yMax } = boundingBox;\n    const centerLat = (yMin + yMax) / 2;\n    return calculateGridLatLonOffset(cellSize, centerLat);\n}\nexport function getGridParams(boundingBox, cellSize, viewport, coordinateSystem) {\n    const gridOffset = getGridOffset(boundingBox, cellSize, coordinateSystem !== COORDINATE_SYSTEM.CARTESIAN);\n    const translation = getTranslation(boundingBox, gridOffset, coordinateSystem, viewport);\n    const { xMin, yMin, xMax, yMax } = boundingBox;\n    const width = xMax - xMin + gridOffset.xOffset;\n    const height = yMax - yMin + gridOffset.yOffset;\n    const numCol = Math.ceil(width / gridOffset.xOffset);\n    const numRow = Math.ceil(height / gridOffset.yOffset);\n    return { gridOffset, translation, width, height, numCol, numRow };\n}\n/**\n * calculate grid layer cell size in lat lon based on world unit size\n * and current latitude\n * @param {number} cellSize\n * @param {number} latitude\n * @returns {object} - lat delta and lon delta\n */\nfunction calculateGridLatLonOffset(cellSize, latitude) {\n    const yOffset = calculateLatOffset(cellSize);\n    const xOffset = calculateLonOffset(latitude, cellSize);\n    return { yOffset, xOffset };\n}\n/**\n * with a given x-km change, calculate the increment of latitude\n * based on stackoverflow http://stackoverflow.com/questions/7477003\n * @param {number} dy - change in km\n * @return {number} - increment in latitude\n */\nfunction calculateLatOffset(dy) {\n    return (dy / R_EARTH) * (180 / Math.PI);\n}\n/**\n * with a given x-km change, and current latitude\n * calculate the increment of longitude\n * based on stackoverflow http://stackoverflow.com/questions/7477003\n * @param {number} lat - latitude of current location (based on city)\n * @param {number} dx - change in km\n * @return {number} - increment in longitude\n */\nfunction calculateLonOffset(lat, dx) {\n    return ((dx / R_EARTH) * (180 / Math.PI)) / Math.cos((lat * Math.PI) / 180);\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { createIterable } from '@deck.gl/core';\nimport { getGridOffset } from \"../utils/grid-aggregation-utils.js\";\n/**\n * Calculate density grid from an array of points\n * @param {Object} props - object containing :\n * @param {Iterable} [props.data] - data objects to be aggregated\n * @param {Integer} [props.cellSize] - size of the grid cell\n *\n * @param {Object} aggregationParams - object containing :\n * @param {Object} gridOffset - {xOffset, yOffset} cell size in meters\n * @param {Integer} width - width of the grid\n * @param {Integer} height - height of the grid\n * @param {Boolean} projectPoints - `true` if doing screen space projection, `false` otherwise\n * @param {Array} attributes - attributes array containing position values\n * @param {Viewport} viewport - viewport to be used for projection\n * @param {Array} posOffset - [xOffset, yOffset] offset to be applied to positions to get cell index\n * @param {Object} boundingBox - {xMin, yMin, xMax, yMax} bounding box of input data\n *\n * @returns {object} - grid data, cell dimension\n */\nexport function pointToDensityGridDataCPU(props, aggregationParams) {\n    const hashInfo = pointsToGridHashing(props, aggregationParams);\n    const result = getGridLayerDataFromGridHash(hashInfo);\n    return {\n        gridHash: hashInfo.gridHash,\n        gridOffset: hashInfo.gridOffset,\n        data: result\n    };\n}\n/**\n * Project points into each cell, return a hash table of cells\n * @param {Iterable} points\n * @param {number} cellSize - unit size in meters\n * @param {function} getPosition - position accessor\n * @returns {object} - grid hash and cell dimension\n */\n/* eslint-disable-next-line max-statements, complexity */\nfunction pointsToGridHashing(props, aggregationParams) {\n    const { data = [], cellSize } = props;\n    const { attributes, viewport, projectPoints, numInstances } = aggregationParams;\n    const positions = attributes.positions.value;\n    const { size } = attributes.positions.getAccessor();\n    const boundingBox = aggregationParams.boundingBox || getPositionBoundingBox(attributes.positions, numInstances);\n    const offsets = aggregationParams.posOffset || [180, 90];\n    const gridOffset = aggregationParams.gridOffset || getGridOffset(boundingBox, cellSize);\n    if (gridOffset.xOffset <= 0 || gridOffset.yOffset <= 0) {\n        return { gridHash: {}, gridOffset, offsets: [0, 0] };\n    }\n    const { width, height } = viewport;\n    const numCol = Math.ceil(width / gridOffset.xOffset);\n    const numRow = Math.ceil(height / gridOffset.yOffset);\n    // calculate count per cell\n    const gridHash = {};\n    const { iterable, objectInfo } = createIterable(data);\n    const position = new Array(3);\n    for (const pt of iterable) {\n        objectInfo.index++;\n        position[0] = positions[objectInfo.index * size];\n        position[1] = positions[objectInfo.index * size + 1];\n        position[2] = size >= 3 ? positions[objectInfo.index * size + 2] : 0;\n        const [x, y] = projectPoints ? viewport.project(position) : position;\n        if (Number.isFinite(x) && Number.isFinite(y)) {\n            const yIndex = Math.floor((y + offsets[1]) / gridOffset.yOffset);\n            const xIndex = Math.floor((x + offsets[0]) / gridOffset.xOffset);\n            if (!projectPoints ||\n                // when doing screen space agggregation (projectPoints = true), filter points outside of the viewport range.\n                (xIndex >= 0 && xIndex < numCol && yIndex >= 0 && yIndex < numRow)) {\n                const key = `${yIndex}-${xIndex}`;\n                gridHash[key] = gridHash[key] || { count: 0, points: [], lonIdx: xIndex, latIdx: yIndex };\n                gridHash[key].count += 1;\n                gridHash[key].points.push({\n                    source: pt,\n                    index: objectInfo.index\n                });\n            }\n        }\n    }\n    return { gridHash, gridOffset, offsets: [offsets[0] * -1, offsets[1] * -1] };\n}\n/* eslint-enable max-statements, complexity */\nfunction getGridLayerDataFromGridHash({ gridHash, gridOffset, offsets }) {\n    const data = new Array(Object.keys(gridHash).length);\n    let i = 0;\n    for (const key in gridHash) {\n        const idxs = key.split('-');\n        const latIdx = parseInt(idxs[0], 10);\n        const lonIdx = parseInt(idxs[1], 10);\n        const index = i++;\n        data[index] = {\n            index,\n            position: [\n                offsets[0] + gridOffset.xOffset * lonIdx,\n                offsets[1] + gridOffset.yOffset * latIdx\n            ],\n            ...gridHash[key]\n        };\n    }\n    return data;\n}\n// Calculate bounding box of position attribute\nfunction getPositionBoundingBox(positionAttribute, numInstance) {\n    // TODO - value might not exist (e.g. attribute transition)\n    const positions = positionAttribute.value;\n    const { size } = positionAttribute.getAccessor();\n    let yMin = Infinity;\n    let yMax = -Infinity;\n    let xMin = Infinity;\n    let xMax = -Infinity;\n    let y;\n    let x;\n    for (let i = 0; i < numInstance; i++) {\n        x = positions[i * size];\n        y = positions[i * size + 1];\n        if (Number.isFinite(x) && Number.isFinite(y)) {\n            yMin = y < yMin ? y : yMin;\n            yMax = y > yMax ? y : yMax;\n            xMin = x < xMin ? x : xMin;\n            xMax = x > xMax ? x : xMax;\n        }\n    }\n    return { xMin, xMax, yMin, yMax };\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { GL } from '@luma.gl/constants';\nimport { log } from '@deck.gl/core';\nimport AggregationLayer from \"./aggregation-layer.js\";\nimport GPUGridAggregator from \"./utils/gpu-grid-aggregation/gpu-grid-aggregator.js\";\nimport BinSorter from \"./utils/bin-sorter.js\";\nimport { pointToDensityGridDataCPU } from \"./cpu-grid-layer/grid-aggregator.js\";\nclass GridAggregationLayer extends AggregationLayer {\n    initializeAggregationLayer({ dimensions }) {\n        super.initializeAggregationLayer(dimensions);\n        this.setState({\n            // CPU aggregation results\n            layerData: {},\n            gpuGridAggregator: new GPUGridAggregator(this.context.device, {\n                id: `${this.id}-gpu-aggregator`\n            }),\n            cpuGridAggregator: pointToDensityGridDataCPU\n        });\n    }\n    updateState(opts) {\n        // get current attributes\n        super.updateState(opts);\n        this.updateAggregationState(opts);\n        const { aggregationDataDirty, aggregationWeightsDirty, gpuAggregation } = this.state;\n        if (this.getNumInstances() <= 0) {\n            return;\n        }\n        let aggregationDirty = false;\n        // CPU aggregation is two steps\n        // 1. Create bins (based on cellSize and position) 2. Aggregate weights for each bin\n        // For GPU aggregation both above steps are combined into one step\n        // step-1\n        if (aggregationDataDirty || (gpuAggregation && aggregationWeightsDirty)) {\n            this._updateAggregation(opts);\n            aggregationDirty = true;\n        }\n        // step-2 (Applicalbe for CPU aggregation only)\n        if (!gpuAggregation && (aggregationDataDirty || aggregationWeightsDirty)) {\n            this._updateWeightBins();\n            this._uploadAggregationResults();\n            aggregationDirty = true;\n        }\n        this.setState({ aggregationDirty });\n    }\n    finalizeState(context) {\n        const { count } = this.state.weights;\n        if (count && count.aggregationBuffer) {\n            count.aggregationBuffer.delete();\n        }\n        this.state.gpuGridAggregator?.delete();\n        super.finalizeState(context);\n    }\n    updateShaders(shaders) {\n        if (this.state.gpuAggregation) {\n            this.state.gpuGridAggregator.updateShaders(shaders);\n        }\n    }\n    // Methods that can be overriden by subclasses for customizations\n    updateAggregationState(opts) {\n        // Sublayers should implement this method.\n        log.assert(false);\n    }\n    allocateResources(numRow, numCol) {\n        if (this.state.numRow !== numRow || this.state.numCol !== numCol) {\n            const dataBytes = numCol * numRow * 4 * 4;\n            const { weights } = this.state;\n            for (const name in weights) {\n                const weight = weights[name];\n                if (weight.aggregationBuffer) {\n                    weight.aggregationBuffer.delete();\n                }\n                weight.aggregationBuffer = this.context.device.createBuffer({\n                    byteLength: dataBytes,\n                    // @ts-expect-error legacy\n                    accessor: {\n                        size: 4,\n                        type: 5126,\n                        divisor: 1\n                    }\n                });\n            }\n        }\n    }\n    updateResults({ aggregationData, maxMinData, maxData, minData }) {\n        const { count } = this.state.weights;\n        if (count) {\n            count.aggregationData = aggregationData;\n            count.maxMinData = maxMinData;\n            count.maxData = maxData;\n            count.minData = minData;\n        }\n    }\n    // Private\n    _updateAggregation(opts) {\n        const { cpuGridAggregator, gpuGridAggregator, gridOffset, posOffset, translation = [0, 0], scaling = [0, 0, 0], boundingBox, projectPoints, gpuAggregation, numCol, numRow } = this.state;\n        const { props } = opts;\n        const { viewport } = this.context;\n        const attributes = this.getAttributes();\n        const vertexCount = this.getNumInstances();\n        if (!gpuAggregation) {\n            const result = cpuGridAggregator(props, {\n                gridOffset,\n                projectPoints,\n                attributes,\n                viewport,\n                posOffset,\n                boundingBox\n            });\n            this.setState({\n                layerData: result\n            });\n        }\n        else {\n            const { weights } = this.state;\n            gpuGridAggregator.run({\n                weights,\n                cellSize: [gridOffset.xOffset, gridOffset.yOffset],\n                numCol,\n                numRow,\n                translation,\n                scaling,\n                vertexCount,\n                projectPoints,\n                attributes,\n                moduleSettings: this.getModuleSettings()\n            });\n        }\n    }\n    _updateWeightBins() {\n        const { getValue } = this.state;\n        const sortedBins = new BinSorter(this.state.layerData.data || [], { getValue });\n        this.setState({ sortedBins });\n    }\n    _uploadAggregationResults() {\n        const { numCol, numRow } = this.state;\n        const { data } = this.state.layerData;\n        const { aggregatedBins, minValue, maxValue, totalCount } = this.state.sortedBins;\n        const ELEMENTCOUNT = 4;\n        const aggregationSize = numCol * numRow * ELEMENTCOUNT;\n        const aggregationData = new Float32Array(aggregationSize).fill(0);\n        for (const bin of aggregatedBins) {\n            const { lonIdx, latIdx } = data[bin.i];\n            const { value, counts } = bin;\n            const cellIndex = (lonIdx + latIdx * numCol) * ELEMENTCOUNT;\n            aggregationData[cellIndex] = value;\n            aggregationData[cellIndex + ELEMENTCOUNT - 1] = counts;\n        }\n        const maxMinData = new Float32Array([maxValue, 0, 0, minValue]);\n        const maxData = new Float32Array([maxValue, 0, 0, totalCount]);\n        const minData = new Float32Array([minValue, 0, 0, totalCount]);\n        this.updateResults({ aggregationData, maxMinData, maxData, minData });\n    }\n}\nGridAggregationLayer.layerName = 'GridAggregationLayer';\nexport default GridAggregationLayer;\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { log } from '@deck.gl/core';\nimport GPUGridAggregator from \"../utils/gpu-grid-aggregation/gpu-grid-aggregator.js\";\nimport { AGGREGATION_OPERATION, getValueFunc } from \"../utils/aggregation-operation-utils.js\";\nimport ScreenGridCellLayer from \"./screen-grid-cell-layer.js\";\nimport GridAggregationLayer from \"../grid-aggregation-layer.js\";\nimport { getFloatTexture } from \"../utils/resource-utils.js\";\nconst defaultProps = {\n    ...ScreenGridCellLayer.defaultProps,\n    getPosition: { type: 'accessor', value: (d) => d.position },\n    getWeight: { type: 'accessor', value: 1 },\n    gpuAggregation: false, // TODO(v9): Re-enable GPU aggregation.\n    aggregation: 'SUM'\n};\nconst POSITION_ATTRIBUTE_NAME = 'positions';\nconst DIMENSIONS = {\n    data: {\n        props: ['cellSizePixels']\n    },\n    weights: {\n        props: ['aggregation'],\n        accessors: ['getWeight']\n    }\n};\n/** Aggregates data into histogram bins and renders them as a grid. */\nclass ScreenGridLayer extends GridAggregationLayer {\n    initializeState() {\n        super.initializeAggregationLayer({\n            dimensions: DIMENSIONS,\n            // @ts-expect-error\n            getCellSize: props => props.cellSizePixels // TODO\n        });\n        const weights = {\n            count: {\n                size: 1,\n                operation: AGGREGATION_OPERATION.SUM,\n                needMax: true,\n                maxTexture: getFloatTexture(this.context.device, { id: `${this.id}-max-texture` })\n            }\n        };\n        this.setState({\n            supported: true,\n            projectPoints: true, // aggregation in screen space\n            weights,\n            subLayerData: { attributes: {} },\n            maxTexture: weights.count.maxTexture,\n            positionAttributeName: 'positions',\n            posOffset: [0, 0],\n            translation: [1, -1]\n        });\n        const attributeManager = this.getAttributeManager();\n        attributeManager.add({\n            [POSITION_ATTRIBUTE_NAME]: {\n                size: 3,\n                accessor: 'getPosition',\n                type: 'float64',\n                fp64: this.use64bitPositions()\n            },\n            // this attribute is used in gpu aggregation path only\n            count: { size: 3, accessor: 'getWeight' }\n        });\n    }\n    shouldUpdateState({ changeFlags }) {\n        return this.state.supported && changeFlags.somethingChanged;\n    }\n    updateState(opts) {\n        super.updateState(opts);\n    }\n    renderLayers() {\n        if (!this.state.supported) {\n            return [];\n        }\n        const { maxTexture, numRow, numCol, weights } = this.state;\n        const { updateTriggers } = this.props;\n        const { aggregationBuffer } = weights.count;\n        const CellLayerClass = this.getSubLayerClass('cells', ScreenGridCellLayer);\n        return new CellLayerClass(this.props, this.getSubLayerProps({\n            id: 'cell-layer',\n            updateTriggers\n        }), {\n            data: { attributes: { instanceCounts: aggregationBuffer } },\n            maxTexture,\n            numInstances: numRow * numCol\n        });\n    }\n    finalizeState(context) {\n        super.finalizeState(context);\n        const { aggregationBuffer, maxBuffer, maxTexture } = this.state;\n        aggregationBuffer?.delete();\n        maxBuffer?.delete();\n        maxTexture?.delete();\n    }\n    getPickingInfo({ info }) {\n        const { index } = info;\n        if (index >= 0) {\n            const { gpuGridAggregator, gpuAggregation, weights } = this.state;\n            // Get count aggregation results\n            const aggregationResults = gpuAggregation\n                ? gpuGridAggregator.getData('count')\n                : weights.count;\n            // Each instance (one cell) is aggregated into single pixel,\n            // Get current instance's aggregation details.\n            info.object = GPUGridAggregator.getAggregationData({\n                pixelIndex: index,\n                ...aggregationResults\n            });\n        }\n        return info;\n    }\n    // Aggregation Overrides\n    updateResults({ aggregationData, maxData }) {\n        const { count } = this.state.weights;\n        count.aggregationData = aggregationData;\n        count.aggregationBuffer.write(aggregationData);\n        count.maxData = maxData;\n        count.maxTexture.setImageData({ data: maxData });\n    }\n    /* eslint-disable complexity, max-statements */\n    updateAggregationState(opts) {\n        const cellSize = opts.props.cellSizePixels;\n        const cellSizeChanged = opts.oldProps.cellSizePixels !== cellSize;\n        const { viewportChanged } = opts.changeFlags;\n        let gpuAggregation = opts.props.gpuAggregation;\n        if (this.state.gpuAggregation !== opts.props.gpuAggregation) {\n            if (gpuAggregation && !GPUGridAggregator.isSupported(this.context.device)) {\n                log.warn('GPU Grid Aggregation not supported, falling back to CPU')();\n                gpuAggregation = false;\n            }\n        }\n        const gpuAggregationChanged = gpuAggregation !== this.state.gpuAggregation;\n        this.setState({\n            gpuAggregation\n        });\n        const positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n        const { dimensions } = this.state;\n        const { data, weights } = dimensions;\n        const aggregationDataDirty = positionsChanged ||\n            gpuAggregationChanged ||\n            viewportChanged ||\n            this.isAggregationDirty(opts, {\n                compareAll: gpuAggregation, // check for all (including extentions props) when using gpu aggregation\n                dimension: data\n            });\n        const aggregationWeightsDirty = this.isAggregationDirty(opts, { dimension: weights });\n        this.setState({\n            aggregationDataDirty,\n            aggregationWeightsDirty\n        });\n        const { viewport } = this.context;\n        if (viewportChanged || cellSizeChanged) {\n            const { width, height } = viewport;\n            const numCol = Math.ceil(width / cellSize);\n            const numRow = Math.ceil(height / cellSize);\n            this.allocateResources(numRow, numCol);\n            this.setState({\n                // transformation from clipspace to screen(pixel) space\n                scaling: [width / 2, -height / 2, 1],\n                gridOffset: { xOffset: cellSize, yOffset: cellSize },\n                width,\n                height,\n                numCol,\n                numRow\n            });\n        }\n        if (aggregationWeightsDirty) {\n            this._updateAccessors(opts);\n        }\n        if (aggregationDataDirty || aggregationWeightsDirty) {\n            this._resetResults();\n        }\n    }\n    /* eslint-enable complexity, max-statements */\n    // Private\n    _updateAccessors(opts) {\n        const { getWeight, aggregation, data } = opts.props;\n        const { count } = this.state.weights;\n        if (count) {\n            count.getWeight = getWeight;\n            count.operation = AGGREGATION_OPERATION[aggregation];\n        }\n        this.setState({ getValue: getValueFunc(aggregation, getWeight, { data }) });\n    }\n    _resetResults() {\n        const { count } = this.state.weights;\n        if (count) {\n            count.aggregationData = null;\n        }\n    }\n}\nScreenGridLayer.layerName = 'ScreenGridLayer';\nScreenGridLayer.defaultProps = defaultProps;\nexport default ScreenGridLayer;\n", "// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport BinSorter from \"./bin-sorter.js\";\nimport { getScaleFunctionByScaleType } from \"./scale-utils.js\";\nimport { getValueFunc, wrapGetValueFunc } from \"./aggregation-operation-utils.js\";\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() { }\nconst dimensionSteps = ['getBins', 'getDomain', 'getScaleFunc'];\nconst defaultDimensions = [\n    {\n        key: 'fillColor',\n        accessor: 'getFillColor',\n        pickingInfo: 'colorValue',\n        getBins: {\n            triggers: {\n                value: {\n                    prop: 'getColorValue',\n                    updateTrigger: 'getColorValue'\n                },\n                weight: {\n                    prop: 'getColorWeight',\n                    updateTrigger: 'getColorWeight'\n                },\n                aggregation: {\n                    prop: 'colorAggregation'\n                },\n                filterData: {\n                    prop: '_filterData',\n                    updateTrigger: '_filterData'\n                }\n            }\n        },\n        getDomain: {\n            triggers: {\n                lowerPercentile: {\n                    prop: 'lowerPercentile'\n                },\n                upperPercentile: {\n                    prop: 'upperPercentile'\n                },\n                scaleType: {\n                    prop: 'colorScaleType'\n                }\n            }\n        },\n        getScaleFunc: {\n            triggers: {\n                domain: { prop: 'colorDomain' },\n                range: { prop: 'colorRange' }\n            },\n            onSet: {\n                props: 'onSetColorDomain'\n            }\n        },\n        nullValue: [0, 0, 0, 0]\n    },\n    {\n        key: 'elevation',\n        accessor: 'getElevation',\n        pickingInfo: 'elevationValue',\n        getBins: {\n            triggers: {\n                value: {\n                    prop: 'getElevationValue',\n                    updateTrigger: 'getElevationValue'\n                },\n                weight: {\n                    prop: 'getElevationWeight',\n                    updateTrigger: 'getElevationWeight'\n                },\n                aggregation: {\n                    prop: 'elevationAggregation'\n                },\n                filterData: {\n                    prop: '_filterData',\n                    updateTrigger: '_filterData'\n                }\n            }\n        },\n        getDomain: {\n            triggers: {\n                lowerPercentile: {\n                    prop: 'elevationLowerPercentile'\n                },\n                upperPercentile: {\n                    prop: 'elevationUpperPercentile'\n                },\n                scaleType: {\n                    prop: 'elevationScaleType'\n                }\n            }\n        },\n        getScaleFunc: {\n            triggers: {\n                domain: { prop: 'elevationDomain' },\n                range: { prop: 'elevationRange' }\n            },\n            onSet: {\n                props: 'onSetElevationDomain'\n            }\n        },\n        nullValue: -1\n    }\n];\nconst defaultGetCellSize = props => props.cellSize;\nexport default class CPUAggregator {\n    constructor(opts) {\n        this.state = {\n            layerData: {\n                data: undefined\n            },\n            dimensions: {\n            // color: {\n            //   getValue: null,\n            //   domain: null,\n            //   sortedBins: null,\n            //   scaleFunc: noop\n            // },\n            // elevation: {\n            //   getValue: null,\n            //   domain: null,\n            //   sortedBins: null,\n            //   scaleFunc: noop\n            // }\n            }\n        };\n        this.changeFlags = {};\n        this.dimensionUpdaters = {};\n        this._getCellSize = opts.getCellSize || defaultGetCellSize;\n        this._getAggregator = opts.getAggregator;\n        this._addDimension(opts.dimensions || defaultDimensions);\n    }\n    static defaultDimensions() {\n        return defaultDimensions;\n    }\n    updateState(opts, aggregationParams) {\n        const { oldProps, props, changeFlags } = opts;\n        this.updateGetValueFuncs(oldProps, props, changeFlags);\n        const reprojectNeeded = this.needsReProjectPoints(oldProps, props, changeFlags);\n        let aggregationDirty = false;\n        if (changeFlags.dataChanged || reprojectNeeded) {\n            // project data into bin and aggregate wegiths per bin\n            this.getAggregatedData(props, aggregationParams);\n            aggregationDirty = true;\n        }\n        else {\n            const dimensionChanges = this.getDimensionChanges(oldProps, props, changeFlags) || [];\n            // this here is layer\n            dimensionChanges.forEach(f => typeof f === 'function' && f());\n            aggregationDirty = true;\n        }\n        this.setState({ aggregationDirty });\n        return this.state;\n    }\n    // Update private state\n    setState(updateObject) {\n        this.state = { ...this.state, ...updateObject };\n    }\n    // Update private state.dimensions\n    setDimensionState(key, updateObject) {\n        this.setState({\n            dimensions: {\n                ...this.state.dimensions,\n                [key]: { ...this.state.dimensions[key], ...updateObject }\n            }\n        });\n    }\n    normalizeResult(result = {}) {\n        // support previous hexagonAggregator API\n        if (result.hexagons) {\n            return { data: result.hexagons, ...result };\n        }\n        else if (result.layerData) {\n            return { data: result.layerData, ...result };\n        }\n        return result;\n    }\n    getAggregatedData(props, aggregationParams) {\n        const aggregator = this._getAggregator(props);\n        const result = aggregator(props, aggregationParams);\n        this.setState({\n            layerData: this.normalizeResult(result)\n        });\n        this.changeFlags = {\n            layerData: true\n        };\n        this.getSortedBins(props);\n    }\n    updateGetValueFuncs(oldProps, props, changeFlags) {\n        for (const key in this.dimensionUpdaters) {\n            const { value, weight, aggregation } = this.dimensionUpdaters[key].getBins.triggers;\n            let getValue = props[value.prop];\n            const getValueChanged = this.needUpdateDimensionStep(this.dimensionUpdaters[key].getBins, oldProps, props, changeFlags);\n            if (getValueChanged) {\n                if (getValue) {\n                    getValue = wrapGetValueFunc(getValue, { data: props.data });\n                }\n                else {\n                    // If `getValue` is not provided from props, build it with aggregation and weight.\n                    getValue = getValueFunc(props[aggregation.prop], props[weight.prop], { data: props.data });\n                }\n            }\n            if (getValue) {\n                this.setDimensionState(key, { getValue });\n            }\n        }\n    }\n    needsReProjectPoints(oldProps, props, changeFlags) {\n        return (this._getCellSize(oldProps) !== this._getCellSize(props) ||\n            this._getAggregator(oldProps) !== this._getAggregator(props) ||\n            (changeFlags.updateTriggersChanged &&\n                (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPosition)));\n    }\n    // Adds dimensions\n    addDimension(dimensions) {\n        this._addDimension(dimensions);\n    }\n    _addDimension(dimensions = []) {\n        dimensions.forEach(dimension => {\n            const { key } = dimension;\n            this.dimensionUpdaters[key] = this.getDimensionUpdaters(dimension);\n            this.state.dimensions[key] = {\n                getValue: null,\n                domain: null,\n                sortedBins: null,\n                scaleFunc: noop\n            };\n        });\n    }\n    getDimensionUpdaters({ key, accessor, pickingInfo, getBins, getDomain, getScaleFunc, nullValue }) {\n        return {\n            key,\n            accessor,\n            pickingInfo,\n            getBins: { updater: this.getDimensionSortedBins.bind(this), ...getBins },\n            getDomain: { updater: this.getDimensionValueDomain.bind(this), ...getDomain },\n            getScaleFunc: { updater: this.getDimensionScale.bind(this), ...getScaleFunc },\n            attributeAccessor: this.getSubLayerDimensionAttribute(key, nullValue)\n        };\n    }\n    needUpdateDimensionStep(dimensionStep, oldProps, props, changeFlags) {\n        // whether need to update current dimension step\n        // dimension step is the value, domain, scaleFunction of each dimension\n        // each step is an object with properties links to layer prop and whether the prop is\n        // controlled by updateTriggers\n        // getBins: {\n        //   value: {\n        //     prop: 'getElevationValue',\n        //     updateTrigger: 'getElevationValue'\n        //   },\n        //   weight: {\n        //     prop: 'getElevationWeight',\n        //     updateTrigger: 'getElevationWeight'\n        //   },\n        //   aggregation: {\n        //     prop: 'elevationAggregation'\n        //   }\n        // }\n        return Object.values(dimensionStep.triggers).some((item) => {\n            if (item.updateTrigger) {\n                // check based on updateTriggers change first\n                // if data has changed, always update value\n                return (changeFlags.dataChanged ||\n                    (changeFlags.updateTriggersChanged &&\n                        (changeFlags.updateTriggersChanged.all ||\n                            changeFlags.updateTriggersChanged[item.updateTrigger])));\n            }\n            // fallback to direct comparison\n            return oldProps[item.prop] !== props[item.prop];\n        });\n    }\n    getDimensionChanges(oldProps, props, changeFlags) {\n        // const {dimensionUpdaters} = this.state;\n        const updaters = [];\n        // get dimension to be updated\n        for (const key in this.dimensionUpdaters) {\n            // return the first triggered updater for each dimension\n            const needUpdate = dimensionSteps.find(step => this.needUpdateDimensionStep(this.dimensionUpdaters[key][step], oldProps, props, changeFlags));\n            if (needUpdate) {\n                updaters.push(this.dimensionUpdaters[key][needUpdate].updater.bind(this, props, this.dimensionUpdaters[key]));\n            }\n        }\n        return updaters.length ? updaters : null;\n    }\n    getUpdateTriggers(props) {\n        const _updateTriggers = props.updateTriggers || {};\n        const updateTriggers = {};\n        for (const key in this.dimensionUpdaters) {\n            const { accessor } = this.dimensionUpdaters[key];\n            // fold dimension triggers into each accessor\n            updateTriggers[accessor] = {};\n            dimensionSteps.forEach(step => {\n                Object.values(this.dimensionUpdaters[key][step].triggers).forEach(({ prop, updateTrigger }) => {\n                    if (updateTrigger) {\n                        // if prop is based on updateTrigger e.g. getColorValue, getColorWeight\n                        // and updateTriggers is passed in from layer prop\n                        // fold the updateTriggers into accessor\n                        const fromProp = _updateTriggers[updateTrigger];\n                        if (typeof fromProp === 'object' && !Array.isArray(fromProp)) {\n                            // if updateTrigger is an object spread it\n                            Object.assign(updateTriggers[accessor], fromProp);\n                        }\n                        else if (fromProp !== undefined) {\n                            updateTriggers[accessor][prop] = fromProp;\n                        }\n                    }\n                    else {\n                        // if prop is not based on updateTrigger\n                        updateTriggers[accessor][prop] = props[prop];\n                    }\n                });\n            });\n        }\n        return updateTriggers;\n    }\n    getSortedBins(props) {\n        for (const key in this.dimensionUpdaters) {\n            this.getDimensionSortedBins(props, this.dimensionUpdaters[key]);\n        }\n    }\n    getDimensionSortedBins(props, dimensionUpdater) {\n        const { key } = dimensionUpdater;\n        const { getValue } = this.state.dimensions[key];\n        const sortedBins = new BinSorter(this.state.layerData.data || [], {\n            getValue,\n            filterData: props._filterData\n        });\n        this.setDimensionState(key, { sortedBins });\n        this.getDimensionValueDomain(props, dimensionUpdater);\n    }\n    getDimensionValueDomain(props, dimensionUpdater) {\n        const { getDomain, key } = dimensionUpdater;\n        const { triggers: { lowerPercentile, upperPercentile, scaleType } } = getDomain;\n        const valueDomain = this.state.dimensions[key].sortedBins.getValueDomainByScale(props[scaleType.prop], [props[lowerPercentile.prop], props[upperPercentile.prop]]);\n        this.setDimensionState(key, { valueDomain });\n        this.getDimensionScale(props, dimensionUpdater);\n    }\n    getDimensionScale(props, dimensionUpdater) {\n        const { key, getScaleFunc, getDomain } = dimensionUpdater;\n        const { domain, range } = getScaleFunc.triggers;\n        const { scaleType } = getDomain.triggers;\n        const { onSet } = getScaleFunc;\n        const dimensionRange = props[range.prop];\n        const dimensionDomain = props[domain.prop] || this.state.dimensions[key].valueDomain;\n        const getScaleFunction = getScaleFunctionByScaleType(scaleType && props[scaleType.prop]);\n        const scaleFunc = getScaleFunction(dimensionDomain, dimensionRange);\n        if (typeof onSet === 'object' && typeof props[onSet.props] === 'function') {\n            props[onSet.props](scaleFunc.domain());\n        }\n        this.setDimensionState(key, { scaleFunc });\n    }\n    getSubLayerDimensionAttribute(key, nullValue) {\n        return cell => {\n            const { sortedBins, scaleFunc } = this.state.dimensions[key];\n            const bin = sortedBins.binMap[cell.index];\n            if (bin && bin.counts === 0) {\n                // no points left in bin after filtering\n                return nullValue;\n            }\n            const cv = bin && bin.value;\n            const domain = scaleFunc.domain();\n            const isValueInDomain = cv >= domain[0] && cv <= domain[domain.length - 1];\n            // if cell value is outside domain, set alpha to 0\n            return isValueInDomain ? scaleFunc(cv) : nullValue;\n        };\n    }\n    getSubLayerAccessors(props) {\n        const accessors = {};\n        for (const key in this.dimensionUpdaters) {\n            const { accessor } = this.dimensionUpdaters[key];\n            accessors[accessor] = this.getSubLayerDimensionAttribute(props, key);\n        }\n        return accessors;\n    }\n    getPickingInfo({ info }) {\n        const isPicked = info.picked && info.index > -1;\n        let object = null;\n        if (isPicked) {\n            // const {sortedColorBins, sortedElevationBins} = this.state;\n            // @ts-expect-error\n            const cell = this.state.layerData.data[info.index];\n            const binInfo = {};\n            for (const key in this.dimensionUpdaters) {\n                const { pickingInfo } = this.dimensionUpdaters[key];\n                const { sortedBins } = this.state.dimensions[key];\n                const value = sortedBins.binMap[cell.index] && sortedBins.binMap[cell.index].value;\n                binInfo[pickingInfo] = value;\n            }\n            object = Object.assign(binInfo, cell, {\n                points: cell.filteredPoints || cell.points\n            });\n        }\n        // override object with picked cell\n        info.picked = Boolean(object);\n        info.object = object;\n        return info;\n    }\n    getAccessor(dimensionKey) {\n        if (!this.dimensionUpdaters.hasOwnProperty(dimensionKey)) {\n            return noop;\n        }\n        return this.dimensionUpdaters[dimensionKey].attributeAccessor;\n    }\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { GridCellLayer } from '@deck.gl/layers';\nimport { defaultColorRange } from \"../utils/color-utils.js\";\nimport { pointToDensityGridDataCPU } from \"./grid-aggregator.js\";\nimport CPUAggregator from \"../utils/cpu-aggregator.js\";\nimport AggregationLayer from \"../aggregation-layer.js\";\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction nop() { }\nconst defaultProps = {\n    // color\n    colorDomain: null,\n    colorRange: defaultColorRange,\n    getColorValue: { type: 'accessor', value: null }, // default value is calculated from `getColorWeight` and `colorAggregation`\n    getColorWeight: { type: 'accessor', value: 1 },\n    colorAggregation: 'SUM',\n    lowerPercentile: { type: 'number', min: 0, max: 100, value: 0 },\n    upperPercentile: { type: 'number', min: 0, max: 100, value: 100 },\n    colorScaleType: 'quantize',\n    onSetColorDomain: nop,\n    // elevation\n    elevationDomain: null,\n    elevationRange: [0, 1000],\n    getElevationValue: { type: 'accessor', value: null }, // default value is calculated from `getElevationWeight` and `elevationAggregation`\n    getElevationWeight: { type: 'accessor', value: 1 },\n    elevationAggregation: 'SUM',\n    elevationLowerPercentile: { type: 'number', min: 0, max: 100, value: 0 },\n    elevationUpperPercentile: { type: 'number', min: 0, max: 100, value: 100 },\n    elevationScale: { type: 'number', min: 0, value: 1 },\n    elevationScaleType: 'linear',\n    onSetElevationDomain: nop,\n    gridAggregator: pointToDensityGridDataCPU,\n    // grid\n    cellSize: { type: 'number', min: 0, max: 1000, value: 1000 },\n    coverage: { type: 'number', min: 0, max: 1, value: 1 },\n    getPosition: { type: 'accessor', value: (x) => x.position },\n    extruded: false,\n    // Optional material for 'lighting' shader module\n    material: true,\n    // data filter\n    _filterData: { type: 'function', value: null, optional: true }\n};\n/** Aggregate data into a grid-based heatmap. Aggregation is performed on CPU. */\nclass CPUGridLayer extends AggregationLayer {\n    initializeState() {\n        const cpuAggregator = new CPUAggregator({\n            getAggregator: props => props.gridAggregator,\n            getCellSize: props => props.cellSize\n        });\n        this.state = {\n            cpuAggregator,\n            aggregatorState: cpuAggregator.state\n        };\n        const attributeManager = this.getAttributeManager();\n        attributeManager.add({\n            positions: { size: 3, type: 'float64', accessor: 'getPosition' }\n        });\n        // color and elevation attributes can't be added as attributes\n        // they are calcualted using 'getValue' accessor that takes an array of pints.\n    }\n    updateState(opts) {\n        super.updateState(opts);\n        this.setState({\n            // make a copy of the internal state of cpuAggregator for testing\n            aggregatorState: this.state.cpuAggregator.updateState(opts, {\n                viewport: this.context.viewport,\n                attributes: this.getAttributes(),\n                numInstances: this.getNumInstances()\n            })\n        });\n    }\n    getPickingInfo({ info }) {\n        return this.state.cpuAggregator.getPickingInfo({ info });\n    }\n    // create a method for testing\n    _onGetSublayerColor(cell) {\n        return this.state.cpuAggregator.getAccessor('fillColor')(cell);\n    }\n    // create a method for testing\n    _onGetSublayerElevation(cell) {\n        return this.state.cpuAggregator.getAccessor('elevation')(cell);\n    }\n    _getSublayerUpdateTriggers() {\n        return this.state.cpuAggregator.getUpdateTriggers(this.props);\n    }\n    renderLayers() {\n        const { elevationScale, extruded, cellSize, coverage, material, transitions } = this.props;\n        const { cpuAggregator } = this.state;\n        const SubLayerClass = this.getSubLayerClass('grid-cell', GridCellLayer);\n        const updateTriggers = this._getSublayerUpdateTriggers();\n        return new SubLayerClass({\n            cellSize,\n            coverage,\n            material,\n            elevationScale,\n            extruded,\n            getFillColor: this._onGetSublayerColor.bind(this),\n            getElevation: this._onGetSublayerElevation.bind(this),\n            transitions: transitions && {\n                getFillColor: transitions.getColorValue || transitions.getColorWeight,\n                getElevation: transitions.getElevationValue || transitions.getElevationWeight\n            }\n        }, this.getSubLayerProps({\n            id: 'grid-cell',\n            updateTriggers\n        }), {\n            data: cpuAggregator.state.layerData.data\n        });\n    }\n}\nCPUGridLayer.layerName = 'CPUGridLayer';\nCPUGridLayer.defaultProps = defaultProps;\nexport default CPUGridLayer;\n", "var thirdPi = Math.PI / 3,\n    angles = [0, thirdPi, 2 * thirdPi, 3 * thirdPi, 4 * thirdPi, 5 * thirdPi];\n\nfunction pointX(d) {\n  return d[0];\n}\n\nfunction pointY(d) {\n  return d[1];\n}\n\nexport default function() {\n  var x0 = 0,\n      y0 = 0,\n      x1 = 1,\n      y1 = 1,\n      x = pointX,\n      y = pointY,\n      r,\n      dx,\n      dy;\n\n  function hexbin(points) {\n    var binsById = {}, bins = [], i, n = points.length;\n\n    for (i = 0; i < n; ++i) {\n      if (isNaN(px = +x.call(null, point = points[i], i, points))\n          || isNaN(py = +y.call(null, point, i, points))) continue;\n\n      var point,\n          px,\n          py,\n          pj = Math.round(py = py / dy),\n          pi = Math.round(px = px / dx - (pj & 1) / 2),\n          py1 = py - pj;\n\n      if (Math.abs(py1) * 3 > 1) {\n        var px1 = px - pi,\n            pi2 = pi + (px < pi ? -1 : 1) / 2,\n            pj2 = pj + (py < pj ? -1 : 1),\n            px2 = px - pi2,\n            py2 = py - pj2;\n        if (px1 * px1 + py1 * py1 > px2 * px2 + py2 * py2) pi = pi2 + (pj & 1 ? 1 : -1) / 2, pj = pj2;\n      }\n\n      var id = pi + \"-\" + pj, bin = binsById[id];\n      if (bin) bin.push(point);\n      else {\n        bins.push(bin = binsById[id] = [point]);\n        bin.x = (pi + (pj & 1) / 2) * dx;\n        bin.y = pj * dy;\n      }\n    }\n\n    return bins;\n  }\n\n  function hexagon(radius) {\n    var x0 = 0, y0 = 0;\n    return angles.map(function(angle) {\n      var x1 = Math.sin(angle) * radius,\n          y1 = -Math.cos(angle) * radius,\n          dx = x1 - x0,\n          dy = y1 - y0;\n      x0 = x1, y0 = y1;\n      return [dx, dy];\n    });\n  }\n\n  hexbin.hexagon = function(radius) {\n    return \"m\" + hexagon(radius == null ? r : +radius).join(\"l\") + \"z\";\n  };\n\n  hexbin.centers = function() {\n    var centers = [],\n        j = Math.round(y0 / dy),\n        i = Math.round(x0 / dx);\n    for (var y = j * dy; y < y1 + r; y += dy, ++j) {\n      for (var x = i * dx + (j & 1) * dx / 2; x < x1 + dx / 2; x += dx) {\n        centers.push([x, y]);\n      }\n    }\n    return centers;\n  };\n\n  hexbin.mesh = function() {\n    var fragment = hexagon(r).slice(0, 4).join(\"l\");\n    return hexbin.centers().map(function(p) { return \"M\" + p + \"m\" + fragment; }).join(\"\");\n  };\n\n  hexbin.x = function(_) {\n    return arguments.length ? (x = _, hexbin) : x;\n  };\n\n  hexbin.y = function(_) {\n    return arguments.length ? (y = _, hexbin) : y;\n  };\n\n  hexbin.radius = function(_) {\n    return arguments.length ? (r = +_, dx = r * 2 * Math.sin(thirdPi), dy = r * 1.5, hexbin) : r;\n  };\n\n  hexbin.size = function(_) {\n    return arguments.length ? (x0 = y0 = 0, x1 = +_[0], y1 = +_[1], hexbin) : [x1 - x0, y1 - y0];\n  };\n\n  hexbin.extent = function(_) {\n    return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], hexbin) : [[x0, y0], [x1, y1]];\n  };\n\n  return hexbin.radius(1);\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { hexbin } from 'd3-hexbin';\nimport { createIterable, log } from '@deck.gl/core';\n/**\n * Use d3-hexbin to performs hexagonal binning from geo points to hexagons\n * @param {Iterable} data - array of points\n * @param {Number} radius - hexagon radius in meter\n * @param {function} getPosition - get points lon lat\n * @param {Object} viewport - current viewport object\n\n * @return {Object} - hexagons and countRange\n */\nexport function pointToHexbin(props, aggregationParams) {\n    const { data, radius } = props;\n    const { viewport, attributes } = aggregationParams;\n    // get hexagon radius in mercator world unit\n    const centerLngLat = data.length ? getPointsCenter(data, aggregationParams) : null;\n    const radiusCommon = getRadiusInCommon(radius, viewport, centerLngLat);\n    // add world space coordinates to points\n    const screenPoints = [];\n    const { iterable, objectInfo } = createIterable(data);\n    const positions = attributes.positions.value;\n    const { size } = attributes.positions.getAccessor();\n    for (const object of iterable) {\n        objectInfo.index++;\n        const posIndex = objectInfo.index * size;\n        const position = [positions[posIndex], positions[posIndex + 1]];\n        const arrayIsFinite = Number.isFinite(position[0]) && Number.isFinite(position[1]);\n        if (arrayIsFinite) {\n            screenPoints.push({\n                screenCoord: viewport.projectFlat(position),\n                source: object,\n                index: objectInfo.index\n            });\n        }\n        else {\n            log.warn('HexagonLayer: invalid position')();\n        }\n    }\n    const newHexbin = hexbin()\n        .radius(radiusCommon)\n        .x(d => d.screenCoord[0])\n        .y(d => d.screenCoord[1]);\n    const hexagonBins = newHexbin(screenPoints);\n    return {\n        hexagons: hexagonBins.map((hex, index) => ({\n            position: viewport.unprojectFlat([hex.x, hex.y]),\n            points: hex,\n            index\n        })),\n        radiusCommon\n    };\n}\n/**\n * Get the bounding box of all data points\n */\nexport function getPointsCenter(data, aggregationParams) {\n    const { attributes } = aggregationParams;\n    const positions = attributes.positions.value;\n    const { size } = attributes.positions.getAccessor();\n    let minX = Infinity;\n    let minY = Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n    let i;\n    for (i = 0; i < size * data.length; i += size) {\n        const x = positions[i];\n        const y = positions[i + 1];\n        const arrayIsFinite = Number.isFinite(x) && Number.isFinite(y);\n        if (arrayIsFinite) {\n            minX = Math.min(x, minX);\n            maxX = Math.max(x, maxX);\n            minY = Math.min(y, minY);\n            maxY = Math.max(y, maxY);\n        }\n    }\n    // return center\n    return [minX, minY, maxX, maxY].every(Number.isFinite)\n        ? [(minX + maxX) / 2, (minY + maxY) / 2]\n        : null;\n}\n/**\n * Get radius in mercator world space coordinates from meter\n * @param {Number} radius - in meter\n * @param {Object} viewport - current viewport object\n * @param {Array<Number>} center - data center\n\n * @return {Number} radius in mercator world spcae coordinates\n */\nexport function getRadiusInCommon(radius, viewport, center) {\n    const { unitsPerMeter } = viewport.getDistanceScales(center);\n    // x, y distance should be the same\n    return radius * unitsPerMeter[0];\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { log } from '@deck.gl/core';\nimport { ColumnLayer } from '@deck.gl/layers';\nimport { defaultColorRange } from \"../utils/color-utils.js\";\nimport { pointToHexbin } from \"./hexagon-aggregator.js\";\nimport CPUAggregator from \"../utils/cpu-aggregator.js\";\nimport AggregationLayer from \"../aggregation-layer.js\";\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction nop() { }\nconst defaultProps = {\n    // color\n    colorDomain: null,\n    colorRange: defaultColorRange,\n    getColorValue: { type: 'accessor', value: null }, // default value is calcuated from `getColorWeight` and `colorAggregation`\n    getColorWeight: { type: 'accessor', value: 1 },\n    colorAggregation: 'SUM',\n    lowerPercentile: { type: 'number', value: 0, min: 0, max: 100 },\n    upperPercentile: { type: 'number', value: 100, min: 0, max: 100 },\n    colorScaleType: 'quantize',\n    onSetColorDomain: nop,\n    // elevation\n    elevationDomain: null,\n    elevationRange: [0, 1000],\n    getElevationValue: { type: 'accessor', value: null }, // default value is calcuated from `getElevationWeight` and `elevationAggregation`\n    getElevationWeight: { type: 'accessor', value: 1 },\n    elevationAggregation: 'SUM',\n    elevationLowerPercentile: { type: 'number', value: 0, min: 0, max: 100 },\n    elevationUpperPercentile: { type: 'number', value: 100, min: 0, max: 100 },\n    elevationScale: { type: 'number', min: 0, value: 1 },\n    elevationScaleType: 'linear',\n    onSetElevationDomain: nop,\n    radius: { type: 'number', value: 1000, min: 1 },\n    coverage: { type: 'number', min: 0, max: 1, value: 1 },\n    extruded: false,\n    hexagonAggregator: pointToHexbin,\n    getPosition: { type: 'accessor', value: (x) => x.position },\n    // Optional material for 'lighting' shader module\n    material: true,\n    // data filter\n    _filterData: { type: 'function', value: null, optional: true }\n};\n/** Aggregates data into a hexagon-based heatmap. The color and height of a hexagon are determined based on the objects it contains. */\nclass HexagonLayer extends AggregationLayer {\n    initializeState() {\n        const cpuAggregator = new CPUAggregator({\n            getAggregator: props => props.hexagonAggregator,\n            getCellSize: props => props.radius\n        });\n        this.state = {\n            cpuAggregator,\n            aggregatorState: cpuAggregator.state,\n            vertices: null\n        };\n        const attributeManager = this.getAttributeManager();\n        attributeManager.add({\n            positions: { size: 3, type: 'float64', accessor: 'getPosition' }\n        });\n        // color and elevation attributes can't be added as attributes\n        // they are calculated using 'getValue' accessor that takes an array of pints.\n    }\n    updateState(opts) {\n        super.updateState(opts);\n        if (opts.changeFlags.propsOrDataChanged) {\n            const aggregatorState = this.state.cpuAggregator.updateState(opts, {\n                viewport: this.context.viewport,\n                attributes: this.getAttributes()\n            });\n            if (this.state.aggregatorState.layerData !== aggregatorState.layerData) {\n                // if user provided custom aggregator and returns hexagonVertices,\n                // Need to recalculate radius and angle based on vertices\n                // @ts-expect-error\n                const { hexagonVertices } = aggregatorState.layerData || {};\n                this.setState({\n                    vertices: hexagonVertices && this.convertLatLngToMeterOffset(hexagonVertices)\n                });\n            }\n            this.setState({\n                // make a copy of the internal state of cpuAggregator for testing\n                aggregatorState\n            });\n        }\n    }\n    convertLatLngToMeterOffset(hexagonVertices) {\n        const { viewport } = this.context;\n        if (Array.isArray(hexagonVertices) && hexagonVertices.length === 6) {\n            // get centroid of hexagons\n            const vertex0 = hexagonVertices[0];\n            const vertex3 = hexagonVertices[3];\n            const centroid = [(vertex0[0] + vertex3[0]) / 2, (vertex0[1] + vertex3[1]) / 2];\n            const centroidFlat = viewport.projectFlat(centroid);\n            const { metersPerUnit } = viewport.getDistanceScales(centroid);\n            // offset all points by centroid to meter offset\n            const vertices = hexagonVertices.map(vt => {\n                const vtFlat = viewport.projectFlat(vt);\n                return [\n                    (vtFlat[0] - centroidFlat[0]) * metersPerUnit[0],\n                    (vtFlat[1] - centroidFlat[1]) * metersPerUnit[1]\n                ];\n            });\n            return vertices;\n        }\n        log.error('HexagonLayer: hexagonVertices needs to be an array of 6 points')();\n        return null;\n    }\n    getPickingInfo({ info }) {\n        return this.state.cpuAggregator.getPickingInfo({ info });\n    }\n    // create a method for testing\n    _onGetSublayerColor(cell) {\n        return this.state.cpuAggregator.getAccessor('fillColor')(cell);\n    }\n    // create a method for testing\n    _onGetSublayerElevation(cell) {\n        return this.state.cpuAggregator.getAccessor('elevation')(cell);\n    }\n    _getSublayerUpdateTriggers() {\n        return this.state.cpuAggregator.getUpdateTriggers(this.props);\n    }\n    renderLayers() {\n        const { elevationScale, extruded, coverage, material, transitions } = this.props;\n        const { aggregatorState, vertices } = this.state;\n        const SubLayerClass = this.getSubLayerClass('hexagon-cell', ColumnLayer);\n        const updateTriggers = this._getSublayerUpdateTriggers();\n        const geometry = vertices\n            ? { vertices, radius: 1 }\n            : {\n                // default geometry\n                // @ts-expect-error TODO - undefined property?\n                radius: aggregatorState.layerData.radiusCommon || 1,\n                radiusUnits: 'common',\n                angle: 90\n            };\n        return new SubLayerClass({\n            ...geometry,\n            diskResolution: 6,\n            elevationScale,\n            extruded,\n            coverage,\n            material,\n            getFillColor: this._onGetSublayerColor.bind(this),\n            getElevation: this._onGetSublayerElevation.bind(this),\n            transitions: transitions && {\n                getFillColor: transitions.getColorValue || transitions.getColorWeight,\n                getElevation: transitions.getElevationValue || transitions.getElevationWeight\n            }\n        }, this.getSubLayerProps({\n            id: 'hexagon-cell',\n            updateTriggers\n        }), {\n            data: aggregatorState.layerData.data\n        });\n    }\n}\nHexagonLayer.layerName = 'HexagonLayer';\nHexagonLayer.defaultProps = defaultProps;\nexport default HexagonLayer;\n", "// Code to Offsets Map needed to implement Marching Squares algorithm\n// Ref: https://en.wikipedia.org/wiki/Marching_squares\n// Table to map code to the intersection offsets\n// All offsets are relative to the center of marching cell (which is top right corner of grid-cell, and center of marching-square)\nconst HALF = 0.5;\nconst ONE6TH = 1 / 6;\nconst OFFSET = {\n    N: [0, HALF], // NORTH\n    E: [HALF, 0], // EAST\n    S: [0, -HALF], // SOUTH\n    W: [-HALF, 0], // WEST\n    // CORNERS\n    NE: [HALF, HALF],\n    NW: [-HALF, HALF],\n    SE: [HALF, -HALF],\n    SW: [-HALF, -HALF]\n};\n// NOTE: vertices are ordered in CCW direction, starting from NW corner\n// Triangles\nconst SW_TRIANGLE = [OFFSET.W, OFFSET.SW, OFFSET.S];\nconst SE_TRIANGLE = [OFFSET.S, OFFSET.SE, OFFSET.E];\nconst NE_TRIANGLE = [OFFSET.E, OFFSET.NE, OFFSET.N];\nconst NW_TRIANGLE = [OFFSET.NW, OFFSET.W, OFFSET.N];\n// Trapezoids\nconst SW_TRAPEZOID = [\n    [-HALF, ONE6TH],\n    [-HALF, -ONE6TH],\n    [-ONE6TH, -HALF],\n    [ONE6TH, -HALF]\n];\nconst SE_TRAPEZOID = [\n    [-ONE6TH, -HALF],\n    [ONE6TH, -HALF],\n    [HALF, -ONE6TH],\n    [HALF, ONE6TH]\n];\nconst NE_TRAPEZOID = [\n    [HALF, -ONE6TH],\n    [HALF, ONE6TH],\n    [ONE6TH, HALF],\n    [-ONE6TH, HALF]\n];\nconst NW_TRAPEZOID = [\n    [-HALF, ONE6TH],\n    [-HALF, -ONE6TH],\n    [ONE6TH, HALF],\n    [-ONE6TH, HALF]\n];\n// Rectangles\nconst S_RECTANGLE = [OFFSET.W, OFFSET.SW, OFFSET.SE, OFFSET.E];\nconst E_RECTANGLE = [OFFSET.S, OFFSET.SE, OFFSET.NE, OFFSET.N];\nconst N_RECTANGLE = [OFFSET.NW, OFFSET.W, OFFSET.E, OFFSET.NE];\nconst W_RECTANGLE = [OFFSET.NW, OFFSET.SW, OFFSET.S, OFFSET.N];\nconst EW_RECTANGEL = [\n    [-HALF, ONE6TH],\n    [-HALF, -ONE6TH],\n    [HALF, -ONE6TH],\n    [HALF, ONE6TH]\n];\nconst SN_RECTANGEL = [\n    [-ONE6TH, -HALF],\n    [ONE6TH, -HALF],\n    [ONE6TH, HALF],\n    [-ONE6TH, HALF]\n];\n// Square\nconst SQUARE = [OFFSET.NW, OFFSET.SW, OFFSET.SE, OFFSET.NE];\n// Pentagons\nconst SW_PENTAGON = [OFFSET.NW, OFFSET.SW, OFFSET.SE, OFFSET.E, OFFSET.N];\nconst SE_PENTAGON = [OFFSET.W, OFFSET.SW, OFFSET.SE, OFFSET.NE, OFFSET.N];\nconst NE_PENTAGON = [OFFSET.NW, OFFSET.W, OFFSET.S, OFFSET.SE, OFFSET.NE];\nconst NW_PENTAGON = [OFFSET.NW, OFFSET.SW, OFFSET.S, OFFSET.E, OFFSET.NE];\nconst NW_N_PENTAGON = [OFFSET.NW, OFFSET.W, [HALF, -ONE6TH], [HALF, ONE6TH], OFFSET.N];\nconst NE_E_PENTAGON = [[-ONE6TH, -HALF], [ONE6TH, -HALF], OFFSET.E, OFFSET.NE, OFFSET.N];\nconst SE_S_PENTAGON = [[-HALF, ONE6TH], [-HALF, -ONE6TH], OFFSET.S, OFFSET.SE, OFFSET.E];\nconst SW_W_PENTAGON = [OFFSET.W, OFFSET.SW, OFFSET.S, [ONE6TH, HALF], [-ONE6TH, HALF]];\nconst NW_W_PENTAGON = [OFFSET.NW, OFFSET.W, [-ONE6TH, -HALF], [ONE6TH, -HALF], OFFSET.N];\nconst NE_N_PENTAGON = [[-HALF, ONE6TH], [-HALF, -ONE6TH], OFFSET.E, OFFSET.NE, OFFSET.N];\nconst SE_E_PENTAGON = [OFFSET.S, OFFSET.SE, OFFSET.E, [ONE6TH, HALF], [-ONE6TH, HALF]];\nconst SW_S_PENTAGON = [OFFSET.W, OFFSET.SW, OFFSET.S, [HALF, -ONE6TH], [HALF, ONE6TH]];\n// Hexagon\nconst S_HEXAGON = [OFFSET.W, OFFSET.SW, OFFSET.SE, OFFSET.E, [ONE6TH, HALF], [-ONE6TH, HALF]];\nconst E_HEXAGON = [[-HALF, ONE6TH], [-HALF, -ONE6TH], OFFSET.S, OFFSET.SE, OFFSET.NE, OFFSET.N];\nconst N_HEXAGON = [OFFSET.NW, OFFSET.W, [-ONE6TH, -HALF], [ONE6TH, -HALF], OFFSET.E, OFFSET.NE];\nconst W_HEXAGON = [OFFSET.NW, OFFSET.SW, OFFSET.S, [HALF, -ONE6TH], [HALF, ONE6TH], OFFSET.N];\nconst SW_NE_HEXAGON = [OFFSET.W, OFFSET.SW, OFFSET.S, OFFSET.E, OFFSET.NE, OFFSET.N];\nconst NW_SE_HEXAGON = [OFFSET.NW, OFFSET.W, OFFSET.S, OFFSET.SE, OFFSET.E, OFFSET.N];\n// Heptagon (7-sided)\nconst NE_HEPTAGON = [\n    [-HALF, ONE6TH],\n    [-HALF, -ONE6TH],\n    [-ONE6TH, -HALF],\n    [ONE6TH, -HALF],\n    OFFSET.E,\n    OFFSET.NE,\n    OFFSET.N\n];\nconst SW_HEPTAGON = [\n    OFFSET.W,\n    OFFSET.SW,\n    OFFSET.S,\n    [HALF, -ONE6TH],\n    [HALF, ONE6TH],\n    [ONE6TH, HALF],\n    [-ONE6TH, HALF]\n];\nconst NW_HEPTAGON = [\n    OFFSET.NW,\n    OFFSET.W,\n    [-ONE6TH, -HALF],\n    [ONE6TH, -HALF],\n    [HALF, -ONE6TH],\n    [HALF, ONE6TH],\n    OFFSET.N\n];\nconst SE_HEPTAGON = [\n    [-HALF, ONE6TH],\n    [-HALF, -ONE6TH],\n    OFFSET.S,\n    OFFSET.SE,\n    OFFSET.E,\n    [ONE6TH, HALF],\n    [-ONE6TH, HALF]\n];\n// Octagon\nconst OCTAGON = [\n    [-HALF, ONE6TH],\n    [-HALF, -ONE6TH],\n    [-ONE6TH, -HALF],\n    [ONE6TH, -HALF],\n    [HALF, -ONE6TH],\n    [HALF, ONE6TH],\n    [ONE6TH, HALF],\n    [-ONE6TH, HALF]\n];\n// Note: above wiki page invertes white/black dots for generating the code, we don't\nexport const ISOLINES_CODE_OFFSET_MAP = {\n    // key is equal to the code of 4 vertices (invert the code specified in wiki)\n    // value can be an array or an Object\n    // Array : [line] or [line, line], where each line is [start-point, end-point], and each point is [x, y]\n    // Object : to handle saddle cases, whos output depends on mean value of all 4 corners\n    //  key: code of mean value (0 or 1)\n    //  value: Array , as above defines one or two line segments\n    0: [],\n    1: [[OFFSET.W, OFFSET.S]],\n    2: [[OFFSET.S, OFFSET.E]],\n    3: [[OFFSET.W, OFFSET.E]],\n    4: [[OFFSET.N, OFFSET.E]],\n    5: {\n        0: [\n            [OFFSET.W, OFFSET.S],\n            [OFFSET.N, OFFSET.E]\n        ],\n        1: [\n            [OFFSET.W, OFFSET.N],\n            [OFFSET.S, OFFSET.E]\n        ]\n    },\n    6: [[OFFSET.N, OFFSET.S]],\n    7: [[OFFSET.W, OFFSET.N]],\n    8: [[OFFSET.W, OFFSET.N]],\n    9: [[OFFSET.N, OFFSET.S]],\n    10: {\n        0: [\n            [OFFSET.W, OFFSET.N],\n            [OFFSET.S, OFFSET.E]\n        ],\n        1: [\n            [OFFSET.W, OFFSET.S],\n            [OFFSET.N, OFFSET.E]\n        ]\n    },\n    11: [[OFFSET.N, OFFSET.E]],\n    12: [[OFFSET.W, OFFSET.E]],\n    13: [[OFFSET.S, OFFSET.E]],\n    14: [[OFFSET.W, OFFSET.S]],\n    15: []\n};\nfunction ternaryToIndex(ternary) {\n    return parseInt(ternary, 4);\n}\nexport const ISOBANDS_CODE_OFFSET_MAP = {\n    // Below list of cases, follow the same order as in above mentioned wiki page.\n    // Each case has its code on first commented line // T,TR,R,C\n    // where T: Top, TR: Top-right, R: Right and C: current, each will be either 0, 1 or 2\n    // final code is binary representation of above code , where takes 2 digits\n    // for example:  code 2-2-2-1 => 10-10-10-01 => 10101001 => 169\n    // no contours\n    [ternaryToIndex('0000')]: [],\n    [ternaryToIndex('2222')]: [],\n    // single triangle\n    [ternaryToIndex('2221')]: [SW_TRIANGLE],\n    [ternaryToIndex('2212')]: [SE_TRIANGLE],\n    [ternaryToIndex('2122')]: [NE_TRIANGLE],\n    [ternaryToIndex('1222')]: [NW_TRIANGLE],\n    [ternaryToIndex('0001')]: [SW_TRIANGLE],\n    [ternaryToIndex('0010')]: [SE_TRIANGLE],\n    [ternaryToIndex('0100')]: [NE_TRIANGLE],\n    [ternaryToIndex('1000')]: [NW_TRIANGLE],\n    // single trapezoid\n    [ternaryToIndex('2220')]: [SW_TRAPEZOID],\n    [ternaryToIndex('2202')]: [SE_TRAPEZOID],\n    [ternaryToIndex('2022')]: [NE_TRAPEZOID],\n    [ternaryToIndex('0222')]: [NW_TRAPEZOID],\n    [ternaryToIndex('0002')]: [SW_TRAPEZOID],\n    [ternaryToIndex('0020')]: [SE_TRAPEZOID],\n    [ternaryToIndex('0200')]: [NE_TRAPEZOID],\n    [ternaryToIndex('2000')]: [NW_TRAPEZOID],\n    // single rectangle\n    [ternaryToIndex('0011')]: [S_RECTANGLE],\n    [ternaryToIndex('0110')]: [E_RECTANGLE],\n    [ternaryToIndex('1100')]: [N_RECTANGLE],\n    [ternaryToIndex('1001')]: [W_RECTANGLE],\n    [ternaryToIndex('2211')]: [S_RECTANGLE],\n    [ternaryToIndex('2112')]: [E_RECTANGLE],\n    [ternaryToIndex('1122')]: [N_RECTANGLE],\n    [ternaryToIndex('1221')]: [W_RECTANGLE],\n    [ternaryToIndex('2200')]: [EW_RECTANGEL],\n    [ternaryToIndex('2002')]: [SN_RECTANGEL],\n    [ternaryToIndex('0022')]: [EW_RECTANGEL],\n    [ternaryToIndex('0220')]: [SN_RECTANGEL],\n    // single square\n    // 1111\n    [ternaryToIndex('1111')]: [SQUARE],\n    // single pentagon\n    [ternaryToIndex('1211')]: [SW_PENTAGON],\n    [ternaryToIndex('2111')]: [SE_PENTAGON],\n    [ternaryToIndex('1112')]: [NE_PENTAGON],\n    [ternaryToIndex('1121')]: [NW_PENTAGON],\n    [ternaryToIndex('1011')]: [SW_PENTAGON],\n    [ternaryToIndex('0111')]: [SE_PENTAGON],\n    [ternaryToIndex('1110')]: [NE_PENTAGON],\n    [ternaryToIndex('1101')]: [NW_PENTAGON],\n    [ternaryToIndex('1200')]: [NW_N_PENTAGON],\n    [ternaryToIndex('0120')]: [NE_E_PENTAGON],\n    [ternaryToIndex('0012')]: [SE_S_PENTAGON],\n    [ternaryToIndex('2001')]: [SW_W_PENTAGON],\n    [ternaryToIndex('1022')]: [NW_N_PENTAGON],\n    [ternaryToIndex('2102')]: [NE_E_PENTAGON],\n    [ternaryToIndex('2210')]: [SE_S_PENTAGON],\n    [ternaryToIndex('0221')]: [SW_W_PENTAGON],\n    [ternaryToIndex('1002')]: [NW_W_PENTAGON],\n    [ternaryToIndex('2100')]: [NE_N_PENTAGON],\n    [ternaryToIndex('0210')]: [SE_E_PENTAGON],\n    [ternaryToIndex('0021')]: [SW_S_PENTAGON],\n    [ternaryToIndex('1220')]: [NW_W_PENTAGON],\n    [ternaryToIndex('0122')]: [NE_N_PENTAGON],\n    [ternaryToIndex('2012')]: [SE_E_PENTAGON],\n    [ternaryToIndex('2201')]: [SW_S_PENTAGON],\n    // single hexagon\n    [ternaryToIndex('0211')]: [S_HEXAGON],\n    [ternaryToIndex('2110')]: [E_HEXAGON],\n    [ternaryToIndex('1102')]: [N_HEXAGON],\n    [ternaryToIndex('1021')]: [W_HEXAGON],\n    [ternaryToIndex('2011')]: [S_HEXAGON],\n    [ternaryToIndex('0112')]: [E_HEXAGON],\n    [ternaryToIndex('1120')]: [N_HEXAGON],\n    [ternaryToIndex('1201')]: [W_HEXAGON],\n    [ternaryToIndex('2101')]: [SW_NE_HEXAGON],\n    [ternaryToIndex('0121')]: [SW_NE_HEXAGON],\n    [ternaryToIndex('1012')]: [NW_SE_HEXAGON],\n    [ternaryToIndex('1210')]: [NW_SE_HEXAGON],\n    // 6-sided polygons based on mean weight\n    // NOTE: merges mean value codes for extreme changes (as per above Wiki doc)\n    [ternaryToIndex('0101')]: {\n        0: [SW_TRIANGLE, NE_TRIANGLE],\n        1: [SW_NE_HEXAGON],\n        2: [SW_NE_HEXAGON]\n    },\n    [ternaryToIndex('1010')]: {\n        0: [NW_TRIANGLE, SE_TRIANGLE],\n        1: [NW_SE_HEXAGON],\n        2: [NW_SE_HEXAGON]\n    },\n    [ternaryToIndex('2121')]: {\n        0: [SW_NE_HEXAGON],\n        1: [SW_NE_HEXAGON],\n        2: [SW_TRIANGLE, NE_TRIANGLE]\n    },\n    [ternaryToIndex('1212')]: {\n        0: [NW_SE_HEXAGON],\n        1: [NW_SE_HEXAGON],\n        2: [NW_TRIANGLE, SE_TRIANGLE]\n    },\n    // 7-sided polygons based on mean weight\n    [ternaryToIndex('2120')]: {\n        0: [NE_HEPTAGON],\n        1: [NE_HEPTAGON],\n        2: [SW_TRAPEZOID, NE_TRIANGLE]\n    },\n    [ternaryToIndex('2021')]: {\n        0: [SW_HEPTAGON],\n        1: [SW_HEPTAGON],\n        2: [SW_TRIANGLE, NE_TRAPEZOID]\n    },\n    [ternaryToIndex('1202')]: {\n        0: [NW_HEPTAGON],\n        1: [NW_HEPTAGON],\n        2: [NW_TRIANGLE, SE_TRAPEZOID]\n    },\n    [ternaryToIndex('0212')]: {\n        0: [SE_HEPTAGON],\n        1: [SE_HEPTAGON],\n        2: [SE_TRIANGLE, NW_TRAPEZOID]\n    },\n    [ternaryToIndex('0102')]: {\n        0: [SW_TRAPEZOID, NE_TRIANGLE],\n        1: [NE_HEPTAGON],\n        2: [NE_HEPTAGON]\n    },\n    [ternaryToIndex('0201')]: {\n        0: [SW_TRIANGLE, NE_TRAPEZOID],\n        1: [SW_HEPTAGON],\n        2: [SW_HEPTAGON]\n    },\n    [ternaryToIndex('1020')]: {\n        0: [NW_TRIANGLE, SE_TRAPEZOID],\n        1: [NW_HEPTAGON],\n        2: [NW_HEPTAGON]\n    },\n    [ternaryToIndex('2010')]: {\n        0: [SE_TRIANGLE, NW_TRAPEZOID],\n        1: [SE_HEPTAGON],\n        2: [SE_HEPTAGON]\n    },\n    // 8-sided polygons based on mean weight\n    [ternaryToIndex('2020')]: {\n        0: [NW_TRAPEZOID, SE_TRAPEZOID],\n        1: [OCTAGON],\n        2: [SW_TRAPEZOID, NE_TRAPEZOID]\n    },\n    [ternaryToIndex('0202')]: {\n        0: [NE_TRAPEZOID, SW_TRAPEZOID],\n        1: [OCTAGON],\n        2: [NW_TRAPEZOID, SE_TRAPEZOID]\n    }\n};\n", "// All utility methods needed to implement Marching Squares algorithm\n// Ref: https://en.wikipedia.org/wiki/Marching_squares\nimport { log } from '@deck.gl/core';\nimport { ISOLINES_CODE_OFFSET_MAP, ISOBANDS_CODE_OFFSET_MAP } from \"./marching-squares-codes.js\";\nexport const CONTOUR_TYPE = {\n    ISO_LINES: 1,\n    ISO_BANDS: 2\n};\nconst DEFAULT_THRESHOLD_DATA = {\n    zIndex: 0,\n    zOffset: 0.005\n};\n// Utility methods\nfunction getVertexCode(weight, threshold) {\n    // threshold must be a single value or a range (array of size 2)\n    // Iso-bands\n    if (Array.isArray(threshold)) {\n        if (weight < threshold[0]) {\n            return 0;\n        }\n        return weight < threshold[1] ? 1 : 2;\n    }\n    // Iso-lines\n    return weight >= threshold ? 1 : 0;\n}\n// Returns marching square code for given cell\n/* eslint-disable complexity, max-statements*/\nexport function getCode(opts) {\n    // Assumptions\n    // Origin is on bottom-left , and X increase to right, Y to top\n    // When processing one cell, we process 4 cells, by extending row to top and on column to right\n    // to create a 2X2 cell grid\n    const { cellWeights, x, y, width, height } = opts;\n    let threshold = opts.threshold;\n    if (opts.thresholdValue) {\n        log.deprecated('thresholdValue', 'threshold')();\n        threshold = opts.thresholdValue;\n    }\n    const isLeftBoundary = x < 0;\n    const isRightBoundary = x >= width - 1;\n    const isBottomBoundary = y < 0;\n    const isTopBoundary = y >= height - 1;\n    const isBoundary = isLeftBoundary || isRightBoundary || isBottomBoundary || isTopBoundary;\n    const weights = {};\n    const codes = {};\n    // TOP\n    if (isLeftBoundary || isTopBoundary) {\n        codes.top = 0;\n    }\n    else {\n        weights.top = cellWeights[(y + 1) * width + x];\n        codes.top = getVertexCode(weights.top, threshold);\n    }\n    // TOP-RIGHT\n    if (isRightBoundary || isTopBoundary) {\n        codes.topRight = 0;\n    }\n    else {\n        weights.topRight = cellWeights[(y + 1) * width + x + 1];\n        codes.topRight = getVertexCode(weights.topRight, threshold);\n    }\n    // RIGHT\n    if (isRightBoundary || isBottomBoundary) {\n        codes.right = 0;\n    }\n    else {\n        weights.right = cellWeights[y * width + x + 1];\n        codes.right = getVertexCode(weights.right, threshold);\n    }\n    // CURRENT\n    if (isLeftBoundary || isBottomBoundary) {\n        codes.current = 0;\n    }\n    else {\n        weights.current = cellWeights[y * width + x];\n        codes.current = getVertexCode(weights.current, threshold);\n    }\n    const { top, topRight, right, current } = codes;\n    let code = -1;\n    if (Number.isFinite(threshold)) {\n        code = (top << 3) | (topRight << 2) | (right << 1) | current;\n    }\n    if (Array.isArray(threshold)) {\n        code = (top << 6) | (topRight << 4) | (right << 2) | current;\n    }\n    let meanCode = 0;\n    // meanCode is only needed for saddle cases, and they should\n    // only occur when we are not processing a cell on boundary\n    // because when on a boundary either, bottom-row, top-row, left-column or right-column will have both 0 codes\n    if (!isBoundary) {\n        meanCode = getVertexCode((weights.top + weights.topRight + weights.right + weights.current) / 4, threshold);\n    }\n    return { code, meanCode };\n}\n/* eslint-enable complexity, max-statements*/\n// Returns intersection vertices for given cellindex\n// [x, y] refers current marching cell, reference vertex is always top-right corner\nexport function getVertices(opts) {\n    const { gridOrigin, cellSize, x, y, code, meanCode, type = CONTOUR_TYPE.ISO_LINES } = opts;\n    const thresholdData = { ...DEFAULT_THRESHOLD_DATA, ...opts.thresholdData };\n    let offsets = type === CONTOUR_TYPE.ISO_BANDS\n        ? ISOBANDS_CODE_OFFSET_MAP[code]\n        : ISOLINES_CODE_OFFSET_MAP[code];\n    // handle saddle cases\n    if (!Array.isArray(offsets)) {\n        offsets = offsets[meanCode];\n    }\n    // Reference vertex is at top-right move to top-right corner\n    const vZ = thresholdData.zIndex * thresholdData.zOffset;\n    const rX = (x + 1) * cellSize[0];\n    const rY = (y + 1) * cellSize[1];\n    const refVertexX = gridOrigin[0] + rX;\n    const refVertexY = gridOrigin[1] + rY;\n    // offsets format\n    // ISO_LINES: [[1A, 1B], [2A, 2B]],\n    // ISO_BANDS: [[1A, 1B, 1C, ...], [2A, 2B, 2C, ...]],\n    // vertices format\n    // ISO_LINES: [[x1A, y1A], [x1B, y1B], [x2A, x2B], ...],\n    // ISO_BANDS:  => confirms to SolidPolygonLayer's simple polygon format\n    //      [\n    //        [[x1A, y1A], [x1B, y1B], [x1C, y1C] ... ],\n    //        ...\n    //      ]\n    if (type === CONTOUR_TYPE.ISO_BANDS) {\n        const polygons = [];\n        offsets.forEach(polygonOffsets => {\n            const polygon = [];\n            polygonOffsets.forEach(xyOffset => {\n                const vX = refVertexX + xyOffset[0] * cellSize[0];\n                const vY = refVertexY + xyOffset[1] * cellSize[1];\n                polygon.push([vX, vY, vZ]);\n            });\n            polygons.push(polygon);\n        });\n        return polygons;\n    }\n    // default case is ISO_LINES\n    const lines = [];\n    offsets.forEach(xyOffsets => {\n        xyOffsets.forEach(offset => {\n            const vX = refVertexX + offset[0] * cellSize[0];\n            const vY = refVertexY + offset[1] * cellSize[1];\n            lines.push([vX, vY, vZ]);\n        });\n    });\n    return lines;\n}\n", "import { getCode, getVertices, CONTOUR_TYPE } from \"./marching-squares.js\";\n// Given all the cell weights, generates contours for each threshold.\n/* eslint-disable max-depth */\nexport function generateContours({ thresholdData, cellWeights, gridSize, gridOrigin, cellSize }) {\n    const contourSegments = [];\n    const contourPolygons = [];\n    const width = gridSize[0];\n    const height = gridSize[1];\n    let segmentIndex = 0;\n    let polygonIndex = 0;\n    for (const data of thresholdData) {\n        const { contour } = data;\n        const { threshold } = contour;\n        for (let x = -1; x < width; x++) {\n            for (let y = -1; y < height; y++) {\n                // Get the MarchingSquares code based on neighbor cell weights.\n                const { code, meanCode } = getCode({\n                    cellWeights,\n                    threshold,\n                    x,\n                    y,\n                    width,\n                    height\n                });\n                const opts = {\n                    type: CONTOUR_TYPE.ISO_BANDS,\n                    gridOrigin,\n                    cellSize,\n                    x,\n                    y,\n                    width,\n                    height,\n                    code,\n                    meanCode,\n                    thresholdData: data\n                };\n                if (Array.isArray(threshold)) {\n                    opts.type = CONTOUR_TYPE.ISO_BANDS;\n                    const polygons = getVertices(opts);\n                    for (const polygon of polygons) {\n                        contourPolygons[polygonIndex++] = {\n                            vertices: polygon,\n                            contour\n                        };\n                    }\n                }\n                else {\n                    // Get the intersection vertices based on MarchingSquares code.\n                    opts.type = CONTOUR_TYPE.ISO_LINES;\n                    const vertices = getVertices(opts);\n                    for (let i = 0; i < vertices.length; i += 2) {\n                        contourSegments[segmentIndex++] = {\n                            start: vertices[i],\n                            end: vertices[i + 1],\n                            contour\n                        };\n                    }\n                }\n            }\n        }\n    }\n    return { contourSegments, contourPolygons };\n}\n/* eslint-enable max-depth */\n", "// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { LineLayer, SolidPolygonLayer } from '@deck.gl/layers';\nimport { generateContours } from \"./contour-utils.js\";\nimport { log } from '@deck.gl/core';\nimport GPUGridAggregator from \"../utils/gpu-grid-aggregation/gpu-grid-aggregator.js\";\nimport { AGGREGATION_OPERATION, getValueFunc } from \"../utils/aggregation-operation-utils.js\";\nimport { getBoundingBox, getGridParams } from \"../utils/grid-aggregation-utils.js\";\nimport GridAggregationLayer from \"../grid-aggregation-layer.js\";\nconst DEFAULT_COLOR = [255, 255, 255, 255];\nconst DEFAULT_STROKE_WIDTH = 1;\nconst DEFAULT_THRESHOLD = 1;\nconst defaultProps = {\n    // grid aggregation\n    cellSize: { type: 'number', min: 1, max: 1000, value: 1000 },\n    getPosition: { type: 'accessor', value: (x) => x.position },\n    getWeight: { type: 'accessor', value: 1 },\n    gpuAggregation: false, // TODO(v9): Re-enable GPU aggregation.\n    aggregation: 'SUM',\n    // contour lines\n    contours: {\n        type: 'object',\n        value: [{ threshold: DEFAULT_THRESHOLD }],\n        optional: true,\n        compare: 3\n    },\n    zOffset: 0.005\n};\nconst POSITION_ATTRIBUTE_NAME = 'positions';\nconst DIMENSIONS = {\n    data: {\n        props: ['cellSize']\n    },\n    weights: {\n        props: ['aggregation'],\n        accessors: ['getWeight']\n    }\n};\n/** Aggregate data into iso-lines or iso-bands for a given threshold and cell size. */\nclass ContourLayer extends GridAggregationLayer {\n    initializeState() {\n        super.initializeAggregationLayer({\n            dimensions: DIMENSIONS\n        });\n        this.setState({\n            contourData: {},\n            projectPoints: false,\n            weights: {\n                count: {\n                    size: 1,\n                    operation: AGGREGATION_OPERATION.SUM\n                }\n            }\n        });\n        const attributeManager = this.getAttributeManager();\n        attributeManager.add({\n            [POSITION_ATTRIBUTE_NAME]: {\n                size: 3,\n                accessor: 'getPosition',\n                type: 'float64',\n                fp64: this.use64bitPositions()\n            },\n            // this attribute is used in gpu aggregation path only\n            count: { size: 3, accessor: 'getWeight' }\n        });\n    }\n    updateState(opts) {\n        super.updateState(opts);\n        let contoursChanged = false;\n        const { oldProps, props } = opts;\n        const { aggregationDirty } = this.state;\n        if (oldProps.contours !== props.contours || oldProps.zOffset !== props.zOffset) {\n            contoursChanged = true;\n            this._updateThresholdData(opts.props);\n        }\n        if (this.getNumInstances() > 0 && (aggregationDirty || contoursChanged)) {\n            this._generateContours();\n        }\n    }\n    renderLayers() {\n        const { contourSegments, contourPolygons } = this.state.contourData;\n        const LinesSubLayerClass = this.getSubLayerClass('lines', LineLayer);\n        const BandsSubLayerClass = this.getSubLayerClass('bands', SolidPolygonLayer);\n        // Contour lines layer\n        const lineLayer = contourSegments &&\n            contourSegments.length > 0 &&\n            new LinesSubLayerClass(this.getSubLayerProps({\n                id: 'lines'\n            }), {\n                data: this.state.contourData.contourSegments,\n                getSourcePosition: d => d.start,\n                getTargetPosition: d => d.end,\n                getColor: d => d.contour.color || DEFAULT_COLOR,\n                getWidth: d => d.contour.strokeWidth || DEFAULT_STROKE_WIDTH\n            });\n        // Contour bands layer\n        const bandsLayer = contourPolygons &&\n            contourPolygons.length > 0 &&\n            new BandsSubLayerClass(this.getSubLayerProps({\n                id: 'bands'\n            }), {\n                data: this.state.contourData.contourPolygons,\n                getPolygon: d => d.vertices,\n                getFillColor: d => d.contour.color || DEFAULT_COLOR\n            });\n        return [lineLayer, bandsLayer];\n    }\n    // Aggregation Overrides\n    /* eslint-disable max-statements, complexity */\n    updateAggregationState(opts) {\n        const { props, oldProps } = opts;\n        const { cellSize, coordinateSystem } = props;\n        const { viewport } = this.context;\n        const cellSizeChanged = oldProps.cellSize !== cellSize;\n        let gpuAggregation = props.gpuAggregation;\n        if (this.state.gpuAggregation !== props.gpuAggregation) {\n            if (gpuAggregation && !GPUGridAggregator.isSupported(this.context.device)) {\n                log.warn('GPU Grid Aggregation not supported, falling back to CPU')();\n                gpuAggregation = false;\n            }\n        }\n        const gpuAggregationChanged = gpuAggregation !== this.state.gpuAggregation;\n        this.setState({\n            gpuAggregation\n        });\n        const { dimensions } = this.state;\n        const positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n        const { data, weights } = dimensions;\n        let { boundingBox } = this.state;\n        if (positionsChanged) {\n            boundingBox = getBoundingBox(this.getAttributes(), this.getNumInstances());\n            this.setState({ boundingBox });\n        }\n        if (positionsChanged || cellSizeChanged) {\n            const { gridOffset, translation, width, height, numCol, numRow } = getGridParams(boundingBox, cellSize, viewport, coordinateSystem);\n            this.allocateResources(numRow, numCol);\n            this.setState({\n                gridOffset,\n                boundingBox,\n                translation,\n                posOffset: translation.slice(), // Used for CPU aggregation, to offset points\n                gridOrigin: [-1 * translation[0], -1 * translation[1]],\n                width,\n                height,\n                numCol,\n                numRow\n            });\n        }\n        const aggregationDataDirty = positionsChanged ||\n            gpuAggregationChanged ||\n            this.isAggregationDirty(opts, {\n                dimension: data,\n                compareAll: gpuAggregation // check for all (including extentions props) when using gpu aggregation\n            });\n        const aggregationWeightsDirty = this.isAggregationDirty(opts, {\n            dimension: weights\n        });\n        if (aggregationWeightsDirty) {\n            this._updateAccessors(opts);\n        }\n        if (aggregationDataDirty || aggregationWeightsDirty) {\n            this._resetResults();\n        }\n        this.setState({\n            aggregationDataDirty,\n            aggregationWeightsDirty\n        });\n    }\n    /* eslint-enable max-statements, complexity */\n    // Private (Aggregation)\n    _updateAccessors(opts) {\n        const { getWeight, aggregation, data } = opts.props;\n        const { count } = this.state.weights;\n        if (count) {\n            count.getWeight = getWeight;\n            count.operation = AGGREGATION_OPERATION[aggregation];\n        }\n        this.setState({ getValue: getValueFunc(aggregation, getWeight, { data }) });\n    }\n    _resetResults() {\n        const { count } = this.state.weights;\n        if (count) {\n            count.aggregationData = null;\n        }\n    }\n    // Private (Contours)\n    _generateContours() {\n        const { numCol, numRow, gridOrigin, gridOffset, thresholdData } = this.state;\n        const { count } = this.state.weights;\n        let { aggregationData } = count;\n        if (!aggregationData) {\n            // @ts-ignore\n            aggregationData = count.aggregationBuffer.readSyncWebGL();\n            count.aggregationData = aggregationData;\n        }\n        const { cellWeights } = GPUGridAggregator.getCellData({ countsData: aggregationData });\n        const contourData = generateContours({\n            thresholdData,\n            cellWeights,\n            gridSize: [numCol, numRow],\n            gridOrigin,\n            cellSize: [gridOffset.xOffset, gridOffset.yOffset]\n        });\n        // contourData contains both iso-lines and iso-bands if requested.\n        this.setState({ contourData });\n    }\n    _updateThresholdData(props) {\n        const { contours, zOffset } = props;\n        const count = contours.length;\n        const thresholdData = new Array(count);\n        for (let i = 0; i < count; i++) {\n            const contour = contours[i];\n            thresholdData[i] = {\n                contour,\n                zIndex: contour.zIndex || i,\n                zOffset\n            };\n        }\n        this.setState({ thresholdData });\n    }\n}\nContourLayer.layerName = 'ContourLayer';\nContourLayer.defaultProps = defaultProps;\nexport default ContourLayer;\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n// Inspired by screen-grid-layer vertex shader in deck.gl\nexport default `\\\n#version 300 es\n#define SHADER_NAME gpu-grid-cell-layer-vertex-shader\n#define RANGE_COUNT 6\nin vec3 positions;\nin vec3 normals;\nin vec4 colors;\nin vec4 elevations;\nin vec3 instancePickingColors;\nuniform vec2 offset;\nuniform bool extruded;\nuniform float cellSize;\nuniform float coverage;\nuniform float opacity;\nuniform float elevationScale;\nuniform ivec2 gridSize;\nuniform vec2 gridOrigin;\nuniform vec2 gridOriginLow;\nuniform vec2 gridOffset;\nuniform vec2 gridOffsetLow;\nuniform vec4 colorRange[RANGE_COUNT];\nuniform vec2 elevationRange;\nuniform vec2 colorDomain;\nuniform bool colorDomainValid;\nuniform vec2 elevationDomain;\nuniform bool elevationDomainValid;\nlayout(std140) uniform;\nuniform ColorData\n{\nvec4 maxMinCount;\n} colorData;\nuniform ElevationData\n{\nvec4 maxMinCount;\n} elevationData;\n#define EPSILON 0.00001\nout vec4 vColor;\nvec4 quantizeScale(vec2 domain, vec4 range[RANGE_COUNT], float value) {\nvec4 outColor = vec4(0., 0., 0., 0.);\nif (value >= (domain.x - EPSILON) && value <= (domain.y + EPSILON)) {\nfloat domainRange = domain.y - domain.x;\nif (domainRange <= 0.) {\noutColor = colorRange[0];\n} else {\nfloat rangeCount = float(RANGE_COUNT);\nfloat rangeStep = domainRange / rangeCount;\nfloat idx = floor((value - domain.x) / rangeStep);\nidx = clamp(idx, 0., rangeCount - 1.);\nint intIdx = int(idx);\noutColor = colorRange[intIdx];\n}\n}\nreturn outColor;\n}\nfloat linearScale(vec2 domain, vec2 range, float value) {\nif (value >= (domain.x - EPSILON) && value <= (domain.y + EPSILON)) {\nreturn ((value - domain.x) / (domain.y - domain.x)) * (range.y - range.x) + range.x;\n}\nreturn -1.;\n}\nvoid main(void) {\nvec2 clrDomain = colorDomainValid ? colorDomain : vec2(colorData.maxMinCount.a, colorData.maxMinCount.r);\nvec4 color = quantizeScale(clrDomain, colorRange, colors.r);\nfloat elevation = 0.0;\nif (extruded) {\nvec2 elvDomain = elevationDomainValid ? elevationDomain : vec2(elevationData.maxMinCount.a, elevationData.maxMinCount.r);\nelevation = linearScale(elvDomain, elevationRange, elevations.r);\nelevation = elevation  * (positions.z + 1.0) / 2.0 * elevationScale;\n}\nfloat shouldRender = float(color.r > 0.0 && elevations.r >= 0.0);\nfloat dotRadius = cellSize / 2. * coverage * shouldRender;\nint yIndex = (gl_InstanceID / gridSize[0]);\nint xIndex = gl_InstanceID - (yIndex * gridSize[0]);\nvec2 instancePositionXFP64 = mul_fp64(vec2(gridOffset[0], gridOffsetLow[0]), vec2(float(xIndex), 0.));\ninstancePositionXFP64 = sum_fp64(instancePositionXFP64, vec2(gridOrigin[0], gridOriginLow[0]));\nvec2 instancePositionYFP64 = mul_fp64(vec2(gridOffset[1], gridOffsetLow[1]), vec2(float(yIndex), 0.));\ninstancePositionYFP64 = sum_fp64(instancePositionYFP64, vec2(gridOrigin[1], gridOriginLow[1]));\nvec3 centroidPosition = vec3(instancePositionXFP64[0], instancePositionYFP64[0], elevation);\nvec3 centroidPosition64Low = vec3(instancePositionXFP64[1], instancePositionYFP64[1], 0.0);\ngeometry.worldPosition = centroidPosition;\nvec3 pos = vec3(project_size(positions.xy + offset) * dotRadius, 0.);\npicking_setPickingColor(instancePickingColors);\ngl_Position = project_position_to_clipspace(centroidPosition, centroidPosition64Low, pos, geometry.position);\nvec3 normals_commonspace = project_normal(normals);\nif (extruded) {\nvec3 lightColor = lighting_getLightColor(color.rgb, project_uCameraPosition, geometry.position.xyz, normals_commonspace);\nvColor = vec4(lightColor, color.a * opacity) / 255.;\n} else {\nvColor = vec4(color.rgb, color.a * opacity) / 255.;\n}\n}\n`;\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nexport default `\\\n#version 300 es\n#define SHADER_NAME gpu-grid-cell-layer-fragment-shader\nprecision highp float;\nin vec4 vColor;\nout vec4 fragColor;\nvoid main(void) {\nfragColor = vColor;\nfragColor = picking_filterColor(fragColor);\n}\n`;\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { Layer, fp64LowPart, project32, gouraudLighting, picking } from '@deck.gl/core';\nimport { CubeGeometry } from '@luma.gl/engine';\nimport { fp64arithmetic } from '@luma.gl/shadertools';\nimport { Model } from '@luma.gl/engine';\nimport { GL } from '@luma.gl/constants';\nimport { defaultColorRange, colorRangeToFlatArray } from \"../utils/color-utils.js\";\nimport vs from \"./gpu-grid-cell-layer-vertex.glsl.js\";\nimport fs from \"./gpu-grid-cell-layer-fragment.glsl.js\";\nconst COLOR_DATA_UBO_INDEX = 0;\nconst ELEVATION_DATA_UBO_INDEX = 1;\nconst defaultProps = {\n    // color\n    colorDomain: null,\n    colorRange: defaultColorRange,\n    // elevation\n    elevationDomain: null,\n    elevationRange: [0, 1000],\n    elevationScale: { type: 'number', min: 0, value: 1 },\n    // grid\n    gridSize: { type: 'array', value: [1, 1] },\n    gridOrigin: { type: 'array', value: [0, 0] },\n    gridOffset: { type: 'array', value: [0, 0] },\n    cellSize: { type: 'number', min: 0, max: 1000, value: 1000 },\n    offset: { type: 'array', value: [1, 1] },\n    coverage: { type: 'number', min: 0, max: 1, value: 1 },\n    extruded: true,\n    material: true // Use lighting module defaults\n};\nclass GPUGridCellLayer extends Layer {\n    getShaders() {\n        return super.getShaders({\n            vs,\n            fs,\n            modules: [project32, gouraudLighting, picking, fp64arithmetic]\n        });\n    }\n    initializeState() {\n        const attributeManager = this.getAttributeManager();\n        attributeManager.addInstanced({\n            colors: {\n                size: 4,\n                noAlloc: true\n            },\n            elevations: {\n                size: 4,\n                noAlloc: true\n            }\n        });\n        const model = this._getModel();\n        this._setupUniformBuffer(model);\n        this.setState({ model });\n    }\n    _getModel() {\n        return new Model(this.context.device, {\n            ...this.getShaders(),\n            id: this.props.id,\n            geometry: new CubeGeometry(),\n            isInstanced: true\n        });\n    }\n    draw({ uniforms }) {\n        const { cellSize, offset, extruded, elevationScale, coverage, gridSize, gridOrigin, gridOffset, elevationRange, colorMaxMinBuffer, elevationMaxMinBuffer } = this.props;\n        const model = this.state.model;\n        const gridOriginLow = [fp64LowPart(gridOrigin[0]), fp64LowPart(gridOrigin[1])];\n        const gridOffsetLow = [fp64LowPart(gridOffset[0]), fp64LowPart(gridOffset[1])];\n        const domainUniforms = this.getDomainUniforms();\n        const colorRange = colorRangeToFlatArray(this.props.colorRange);\n        this.bindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer);\n        model.setUniforms(uniforms);\n        model.setUniforms(domainUniforms);\n        model.setUniforms({\n            cellSize,\n            offset,\n            extruded,\n            elevationScale,\n            coverage,\n            gridSize,\n            gridOrigin,\n            gridOriginLow,\n            gridOffset,\n            gridOffsetLow,\n            colorRange,\n            elevationRange\n        });\n        model.draw(this.context.renderPass);\n        this.unbindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer);\n    }\n    bindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer) {\n        colorMaxMinBuffer.bind({ target: 35345, index: COLOR_DATA_UBO_INDEX });\n        elevationMaxMinBuffer.bind({ target: 35345, index: ELEVATION_DATA_UBO_INDEX });\n    }\n    unbindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer) {\n        colorMaxMinBuffer.unbind({ target: 35345, index: COLOR_DATA_UBO_INDEX });\n        elevationMaxMinBuffer.unbind({ target: 35345, index: ELEVATION_DATA_UBO_INDEX });\n    }\n    getDomainUniforms() {\n        const { colorDomain, elevationDomain } = this.props;\n        const domainUniforms = {};\n        if (colorDomain !== null) {\n            domainUniforms.colorDomainValid = true;\n            domainUniforms.colorDomain = colorDomain;\n        }\n        else {\n            domainUniforms.colorDomainValid = false;\n        }\n        if (elevationDomain !== null) {\n            domainUniforms.elevationDomainValid = true;\n            domainUniforms.elevationDomain = elevationDomain;\n        }\n        else {\n            domainUniforms.elevationDomainValid = false;\n        }\n        return domainUniforms;\n    }\n    _setupUniformBuffer(model) {\n        // @ts-expect-error TODO v9 This code is not portable to WebGPU\n        const programHandle = model.pipeline.handle;\n        const gl = this.context.gl;\n        const colorIndex = gl.getUniformBlockIndex(programHandle, 'ColorData');\n        const elevationIndex = gl.getUniformBlockIndex(programHandle, 'ElevationData');\n        gl.uniformBlockBinding(programHandle, colorIndex, COLOR_DATA_UBO_INDEX);\n        gl.uniformBlockBinding(programHandle, elevationIndex, ELEVATION_DATA_UBO_INDEX);\n    }\n}\nGPUGridCellLayer.layerName = 'GPUGridCellLayer';\nGPUGridCellLayer.defaultProps = defaultProps;\nexport default GPUGridCellLayer;\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { GL } from '@luma.gl/constants';\nimport { log } from '@deck.gl/core';\nimport GPUGridAggregator from \"../utils/gpu-grid-aggregation/gpu-grid-aggregator.js\";\nimport { AGGREGATION_OPERATION } from \"../utils/aggregation-operation-utils.js\";\nimport { defaultColorRange, colorRangeToFlatArray } from \"../utils/color-utils.js\";\nimport GPUGridCellLayer from \"./gpu-grid-cell-layer.js\";\nimport { pointToDensityGridDataCPU } from \"./../cpu-grid-layer/grid-aggregator.js\";\nimport GridAggregationLayer from \"../grid-aggregation-layer.js\";\nimport { getBoundingBox, getGridParams } from \"../utils/grid-aggregation-utils.js\";\nconst defaultProps = {\n    // color\n    colorDomain: null,\n    colorRange: defaultColorRange,\n    getColorWeight: { type: 'accessor', value: 1 },\n    colorAggregation: 'SUM',\n    // elevation\n    elevationDomain: null,\n    elevationRange: [0, 1000],\n    getElevationWeight: { type: 'accessor', value: 1 },\n    elevationAggregation: 'SUM',\n    elevationScale: { type: 'number', min: 0, value: 1 },\n    // grid\n    cellSize: { type: 'number', min: 1, max: 1000, value: 1000 },\n    coverage: { type: 'number', min: 0, max: 1, value: 1 },\n    getPosition: { type: 'accessor', value: (x) => x.position },\n    extruded: false,\n    // Optional material for 'lighting' shader module\n    material: true\n};\n// This layer only perform GPU aggregation, no need to seperate data and weight props\n// aggregation will be dirty when any of the props are changed.\nconst DIMENSIONS = {\n    data: {\n        props: ['cellSize', 'colorAggregation', 'elevationAggregation']\n    }\n    // rest of the changes are detected by `state.attributesChanged`\n};\nconst POSITION_ATTRIBUTE_NAME = 'positions';\n/** Aggregate data into a grid-based heatmap. Aggregation is performed on GPU. */\nclass GPUGridLayer extends GridAggregationLayer {\n    initializeState({ device }) {\n        const isSupported = GPUGridAggregator.isSupported(device);\n        if (!isSupported) {\n            log.error('GPUGridLayer is not supported on this browser, use GridLayer instead')();\n        }\n        super.initializeAggregationLayer({\n            dimensions: DIMENSIONS\n        });\n        this.setState({\n            gpuAggregation: false, // TODO(v9): Re-enable GPU aggregation.\n            projectPoints: false, // aggregation in world space\n            isSupported,\n            weights: {\n                color: {\n                    needMin: true,\n                    needMax: true,\n                    combineMaxMin: true,\n                    maxMinBuffer: device.createBuffer({\n                        byteLength: 4 * 4,\n                        // @ts-expect-error webgl-legacy\n                        accessor: { size: 4, type: 5126, divisor: 1 }\n                    })\n                },\n                elevation: {\n                    needMin: true,\n                    needMax: true,\n                    combineMaxMin: true,\n                    maxMinBuffer: device.createBuffer({\n                        byteLength: 4 * 4,\n                        // @ts-expect-error\n                        accessor: { size: 4, type: 5126, divisor: 1 }\n                    })\n                }\n            },\n            positionAttributeName: 'positions'\n        });\n        const attributeManager = this.getAttributeManager();\n        attributeManager.add({\n            [POSITION_ATTRIBUTE_NAME]: {\n                size: 3,\n                accessor: 'getPosition',\n                type: 'float64',\n                fp64: this.use64bitPositions()\n            },\n            color: { size: 3, accessor: 'getColorWeight' },\n            elevation: { size: 3, accessor: 'getElevationWeight' }\n        });\n    }\n    updateState(opts) {\n        if (this.state.isSupported === false) {\n            // Skip update, layer not supported\n            return;\n        }\n        super.updateState(opts);\n        const { aggregationDirty } = this.state;\n        if (aggregationDirty) {\n            // reset cached CPU Aggregation results (used for picking)\n            this.setState({\n                gridHash: null\n            });\n        }\n    }\n    getHashKeyForIndex(index) {\n        const { numRow, numCol, boundingBox, gridOffset } = this.state;\n        const gridSize = [numCol, numRow];\n        const gridOrigin = [boundingBox.xMin, boundingBox.yMin];\n        const cellSize = [gridOffset.xOffset, gridOffset.yOffset];\n        const yIndex = Math.floor(index / gridSize[0]);\n        const xIndex = index - yIndex * gridSize[0];\n        // This will match the index to the hash-key to access aggregation data from CPU aggregation results.\n        const latIdx = Math.floor((yIndex * cellSize[1] + gridOrigin[1] + 90 + cellSize[1] / 2) / cellSize[1]);\n        const lonIdx = Math.floor((xIndex * cellSize[0] + gridOrigin[0] + 180 + cellSize[0] / 2) / cellSize[0]);\n        return `${latIdx}-${lonIdx}`;\n    }\n    getPositionForIndex(index) {\n        const { numRow, numCol, boundingBox, gridOffset } = this.state;\n        const gridSize = [numCol, numRow];\n        const gridOrigin = [boundingBox.xMin, boundingBox.yMin];\n        const cellSize = [gridOffset.xOffset, gridOffset.yOffset];\n        const yIndex = Math.floor(index / gridSize[0]);\n        const xIndex = index - yIndex * gridSize[0];\n        const yPos = yIndex * cellSize[1] + gridOrigin[1];\n        const xPos = xIndex * cellSize[0] + gridOrigin[0];\n        return [xPos, yPos];\n    }\n    getPickingInfo({ info, mode }) {\n        const { index } = info;\n        let object = null;\n        if (index >= 0) {\n            const gpuGridAggregator = this.state.gpuGridAggregator;\n            const position = this.getPositionForIndex(index);\n            const colorInfo = GPUGridAggregator.getAggregationData({\n                pixelIndex: index,\n                ...gpuGridAggregator.getData('color')\n            });\n            const elevationInfo = GPUGridAggregator.getAggregationData({\n                pixelIndex: index,\n                ...gpuGridAggregator.getData('elevation')\n            });\n            object = {\n                colorValue: colorInfo.cellWeight,\n                elevationValue: elevationInfo.cellWeight,\n                count: colorInfo.cellCount || elevationInfo.cellCount,\n                position,\n                totalCount: colorInfo.totalCount || elevationInfo.totalCount\n            };\n            if (mode !== 'hover') {\n                // perform CPU aggregation for full list of points for each cell\n                const { props } = this;\n                let { gridHash } = this.state;\n                if (!gridHash) {\n                    const { gridOffset, translation, boundingBox } = this.state;\n                    const { viewport } = this.context;\n                    const attributes = this.getAttributes();\n                    const cpuAggregation = pointToDensityGridDataCPU(props, {\n                        gridOffset,\n                        attributes,\n                        viewport,\n                        translation,\n                        boundingBox\n                    });\n                    gridHash = cpuAggregation.gridHash;\n                    this.setState({ gridHash });\n                }\n                const key = this.getHashKeyForIndex(index);\n                const cpuAggregationData = gridHash[key];\n                Object.assign(object, cpuAggregationData);\n            }\n        }\n        // override object with picked cell\n        info.picked = Boolean(object);\n        info.object = object;\n        return info;\n    }\n    renderLayers() {\n        if (!this.state.isSupported) {\n            return null;\n        }\n        const { elevationScale, extruded, cellSize: cellSizeMeters, coverage, material, elevationRange, colorDomain, elevationDomain } = this.props;\n        const { weights, numRow, numCol, gridOrigin, gridOffset } = this.state;\n        const { color, elevation } = weights;\n        const colorRange = colorRangeToFlatArray(this.props.colorRange);\n        const SubLayerClass = this.getSubLayerClass('gpu-grid-cell', GPUGridCellLayer);\n        return new SubLayerClass({\n            gridSize: [numCol, numRow],\n            gridOrigin,\n            gridOffset: [gridOffset.xOffset, gridOffset.yOffset],\n            colorRange,\n            elevationRange,\n            colorDomain,\n            elevationDomain,\n            cellSize: cellSizeMeters,\n            coverage,\n            material,\n            elevationScale,\n            extruded\n        }, this.getSubLayerProps({\n            id: 'gpu-grid-cell'\n        }), {\n            data: {\n                attributes: {\n                    colors: color.aggregationBuffer,\n                    elevations: elevation.aggregationBuffer\n                }\n            },\n            colorMaxMinBuffer: color.maxMinBuffer,\n            elevationMaxMinBuffer: elevation.maxMinBuffer,\n            numInstances: numCol * numRow\n        });\n    }\n    finalizeState(context) {\n        const { color, elevation } = this.state.weights;\n        [color, elevation].forEach(weight => {\n            const { aggregationBuffer, maxMinBuffer } = weight;\n            maxMinBuffer?.destroy();\n            aggregationBuffer?.destroy();\n        });\n        super.finalizeState(context);\n    }\n    // Aggregation Overrides\n    updateAggregationState(opts) {\n        const { props, oldProps } = opts;\n        const { cellSize, coordinateSystem } = props;\n        const { viewport } = this.context;\n        const cellSizeChanged = oldProps.cellSize !== cellSize;\n        const { dimensions } = this.state;\n        const positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n        // any attribute changed\n        const attributesChanged = positionsChanged || this.isAttributeChanged();\n        let { boundingBox } = this.state;\n        if (positionsChanged) {\n            boundingBox = getBoundingBox(this.getAttributes(), this.getNumInstances());\n            this.setState({ boundingBox });\n        }\n        if (positionsChanged || cellSizeChanged) {\n            const { gridOffset, translation, width, height, numCol, numRow } = getGridParams(boundingBox, cellSize, viewport, coordinateSystem);\n            this.allocateResources(numRow, numCol);\n            this.setState({\n                gridOffset,\n                translation,\n                gridOrigin: [-1 * translation[0], -1 * translation[1]],\n                width,\n                height,\n                numCol,\n                numRow\n            });\n        }\n        const aggregationDataDirty = attributesChanged ||\n            this.isAggregationDirty(opts, {\n                dimension: dimensions.data,\n                compareAll: true\n            });\n        if (aggregationDataDirty) {\n            this._updateAccessors(opts);\n        }\n        this.setState({\n            aggregationDataDirty\n        });\n    }\n    // Private\n    _updateAccessors(opts) {\n        const { colorAggregation, elevationAggregation } = opts.props;\n        const { color, elevation } = this.state.weights;\n        color.operation = AGGREGATION_OPERATION[colorAggregation];\n        elevation.operation = AGGREGATION_OPERATION[elevationAggregation];\n    }\n}\nGPUGridLayer.layerName = 'GPUGridLayer';\nGPUGridLayer.defaultProps = defaultProps;\nexport default GPUGridLayer;\n", "import { CompositeLayer } from '@deck.gl/core';\nimport GPUGridAggregator from \"../utils/gpu-grid-aggregation/gpu-grid-aggregator.js\";\nimport GPUGridLayer from \"../gpu-grid-layer/gpu-grid-layer.js\";\nimport CPUGridLayer from \"../cpu-grid-layer/cpu-grid-layer.js\";\nconst defaultProps = {\n    ...GPUGridLayer.defaultProps,\n    ...CPUGridLayer.defaultProps,\n    gpuAggregation: false\n};\n/** Aggregate data into a grid-based heatmap. The color and height of a cell are determined based on the objects it contains. */\nclass GridLayer extends CompositeLayer {\n    initializeState() {\n        this.state = {\n            useGPUAggregation: false // TODO(v9): Re-enable GPU aggregation.\n        };\n    }\n    updateState({ props }) {\n        this.setState({\n            // TODO(v9): Re-enable GPU aggregation.\n            // useGPUAggregation: this.canUseGPUAggregation(props)\n            useGPUAggregation: false\n        });\n    }\n    renderLayers() {\n        const { data, updateTriggers } = this.props;\n        const id = this.state.useGPUAggregation ? 'GPU' : 'CPU';\n        const LayerType = this.state.useGPUAggregation\n            ? this.getSubLayerClass('GPU', GPUGridLayer)\n            : this.getSubLayerClass('CPU', CPUGridLayer);\n        return new LayerType(this.props, this.getSubLayerProps({\n            id,\n            updateTriggers\n        }), {\n            data\n        });\n    }\n    // Private methods\n    canUseGPUAggregation(props) {\n        const { gpuAggregation, lowerPercentile, upperPercentile, getColorValue, getElevationValue, colorScaleType } = props;\n        if (!gpuAggregation) {\n            // cpu aggregation is requested\n            return false;\n        }\n        if (!GPUGridAggregator.isSupported(this.context.device)) {\n            return false;\n        }\n        if (lowerPercentile !== 0 || upperPercentile !== 100) {\n            // percentile calculations requires sorting not supported on GPU\n            return false;\n        }\n        if (getColorValue !== null || getElevationValue !== null) {\n            // accessor for custom color or elevation calculation is specified\n            return false;\n        }\n        if (colorScaleType === 'quantile' || colorScaleType === 'ordinal') {\n            // quantile and ordinal scales are not supported on GPU\n            return false;\n        }\n        return true;\n    }\n}\nGridLayer.layerName = 'GridLayer';\nGridLayer.defaultProps = defaultProps;\nexport default GridLayer;\n", "export function getBounds(points) {\n    // Now build bounding box in world space (aligned to world coordiante system)\n    const x = points.map(p => p[0]);\n    const y = points.map(p => p[1]);\n    const xMin = Math.min.apply(null, x);\n    const xMax = Math.max.apply(null, x);\n    const yMin = Math.min.apply(null, y);\n    const yMax = Math.max.apply(null, y);\n    return [xMin, yMin, xMax, yMax];\n}\n// true if currentBounds contains targetBounds, false otherwise\nexport function boundsContain(currentBounds, targetBounds) {\n    if (targetBounds[0] >= currentBounds[0] &&\n        targetBounds[2] <= currentBounds[2] &&\n        targetBounds[1] >= currentBounds[1] &&\n        targetBounds[3] <= currentBounds[3]) {\n        return true;\n    }\n    return false;\n}\nconst scratchArray = new Float32Array(12);\n// For given rectangle bounds generates two triangles vertices that coverit completely\nexport function packVertices(points, dimensions = 2) {\n    let index = 0;\n    for (const point of points) {\n        for (let i = 0; i < dimensions; i++) {\n            scratchArray[index++] = point[i] || 0;\n        }\n    }\n    return scratchArray;\n}\n// Expands boundingBox:[xMin, yMin, xMax, yMax] to match aspect ratio of given width and height\nexport function scaleToAspectRatio(boundingBox, width, height) {\n    const [xMin, yMin, xMax, yMax] = boundingBox;\n    const currentWidth = xMax - xMin;\n    const currentHeight = yMax - yMin;\n    let newWidth = currentWidth;\n    let newHeight = currentHeight;\n    if (currentWidth / currentHeight < width / height) {\n        // expand bounding box width\n        newWidth = (width / height) * currentHeight;\n    }\n    else {\n        newHeight = (height / width) * currentWidth;\n    }\n    if (newWidth < width) {\n        newWidth = width;\n        newHeight = height;\n    }\n    const xCenter = (xMax + xMin) / 2;\n    const yCenter = (yMax + yMin) / 2;\n    return [\n        xCenter - newWidth / 2,\n        yCenter - newHeight / 2,\n        xCenter + newWidth / 2,\n        yCenter + newHeight / 2\n    ];\n}\n// Get texture coordiante of point inside a bounding box\nexport function getTextureCoordinates(point, bounds) {\n    const [xMin, yMin, xMax, yMax] = bounds;\n    return [(point[0] - xMin) / (xMax - xMin), (point[1] - yMin) / (yMax - yMin)];\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n// Inspired by screen-grid-layer vertex shader in deck.gl\nexport default `\\\n#version 300 es\n#define SHADER_NAME heatp-map-layer-vertex-shader\nuniform sampler2D maxTexture;\nuniform float intensity;\nuniform vec2 colorDomain;\nuniform float threshold;\nuniform float aggregationMode;\nin vec3 positions;\nin vec2 texCoords;\nout vec2 vTexCoords;\nout float vIntensityMin;\nout float vIntensityMax;\nvoid main(void) {\ngl_Position = project_position_to_clipspace(positions, vec3(0.0), vec3(0.0));\nvTexCoords = texCoords;\nvec4 maxTexture = texture(maxTexture, vec2(0.5));\nfloat maxValue = aggregationMode < 0.5 ? maxTexture.r : maxTexture.g;\nfloat minValue = maxValue * threshold;\nif (colorDomain[1] > 0.) {\nmaxValue = colorDomain[1];\nminValue = colorDomain[0];\n}\nvIntensityMax = intensity / maxValue;\nvIntensityMin = intensity / minValue;\n}\n`;\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nexport default `\\\n#version 300 es\n#define SHADER_NAME triangle-layer-fragment-shader\nprecision highp float;\nuniform float opacity;\nuniform sampler2D weightsTexture;\nuniform sampler2D colorTexture;\nuniform float aggregationMode;\nin vec2 vTexCoords;\nin float vIntensityMin;\nin float vIntensityMax;\nout vec4 fragColor;\nvec4 getLinearColor(float value) {\nfloat factor = clamp(value * vIntensityMax, 0., 1.);\nvec4 color = texture(colorTexture, vec2(factor, 0.5));\ncolor.a *= min(value * vIntensityMin, 1.0);\nreturn color;\n}\nvoid main(void) {\nvec4 weights = texture(weightsTexture, vTexCoords);\nfloat weight = weights.r;\nif (aggregationMode > 0.5) {\nweight /= max(1.0, weights.a);\n}\nif (weight <= 0.) {\ndiscard;\n}\nvec4 linearColor = getLinearColor(weight);\nlinearColor.a *= opacity;\nfragColor = linearColor;\n}\n`;\n", "// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { Model } from '@luma.gl/engine';\nimport { Layer, project32 } from '@deck.gl/core';\nimport vs from \"./triangle-layer-vertex.glsl.js\";\nimport fs from \"./triangle-layer-fragment.glsl.js\";\nclass TriangleLayer extends Layer {\n    getShaders() {\n        return { vs, fs, modules: [project32] };\n    }\n    initializeState({ device }) {\n        this.setState({ model: this._getModel(device) });\n    }\n    _getModel(device) {\n        const { vertexCount, data, weightsTexture, maxTexture, colorTexture } = this.props;\n        return new Model(device, {\n            ...this.getShaders(),\n            id: this.props.id,\n            bindings: { weightsTexture, maxTexture, colorTexture },\n            attributes: data.attributes,\n            bufferLayout: [\n                { name: 'positions', format: 'float32x3' },\n                { name: 'texCoords', format: 'float32x2' }\n            ],\n            topology: 'triangle-fan-webgl',\n            vertexCount\n        });\n    }\n    draw({ uniforms }) {\n        const { model } = this.state;\n        const { intensity, threshold, aggregationMode, colorDomain } = this.props;\n        model.setUniforms({\n            ...uniforms,\n            intensity,\n            threshold,\n            aggregationMode,\n            colorDomain\n        });\n        model.draw(this.context.renderPass);\n    }\n}\nTriangleLayer.layerName = 'TriangleLayer';\nexport default TriangleLayer;\n", "export default `\\\n#version 300 es\nin vec3 positions;\nin vec3 positions64Low;\nin float weights;\nout vec4 weightsTexture;\nuniform float radiusPixels;\nuniform float textureWidth;\nuniform vec4 commonBounds;\nuniform float weightsScale;\nvoid main()\n{\nweightsTexture = vec4(weights * weightsScale, 0., 0., 1.);\nfloat radiusTexels = project_pixel_size(radiusPixels) * textureWidth / (commonBounds.z - commonBounds.x);\ngl_PointSize = radiusTexels * 2.;\nvec3 commonPosition = project_position(positions, positions64Low);\ngl_Position.xy = (commonPosition.xy - commonBounds.xy) / (commonBounds.zw - commonBounds.xy) ;\ngl_Position.xy = (gl_Position.xy * 2.) - (1.);\ngl_Position.w = 1.0;\n}\n`;\n", "export default `\\\n#version 300 es\nin vec4 weightsTexture;\nout vec4 fragColor;\nfloat gaussianKDE(float u){\nreturn pow(2.71828, -u*u/0.05555)/(1.77245385*0.166666);\n}\nvoid main()\n{\nfloat dist = length(gl_PointCoord - vec2(0.5, 0.5));\nif (dist > 0.5) {\ndiscard;\n}\nfragColor = weightsTexture * gaussianKDE(2. * dist);\nDECKGL_FILTER_COLOR(fragColor, geometry);\n}\n`;\n", "export default `\\\n#version 300 es\nuniform sampler2D inTexture;\nuniform float textureSize;\nout vec4 outTexture;\nvoid main()\n{\nint yIndex = gl_VertexID / int(textureSize);\nint xIndex = gl_VertexID - (yIndex * int(textureSize));\nvec2 uv = (0.5 + vec2(float(xIndex), float(yIndex))) / textureSize;\noutTexture = texture(inTexture, uv);\ngl_Position = vec4(0.0, 0.0, 0.0, 1.0);\ngl_PointSize = 1.0;\n}\n`;\n", "export default `\\\n#version 300 es\nin vec4 outTexture;\nout vec4 fragColor;\nvoid main() {\nfragColor = outTexture;\nfragColor.g = outTexture.r / max(1.0, outTexture.a);\n}\n`;\n", "// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n/* global setTimeout clearTimeout */\nimport { getBounds, boundsContain, packVertices, scaleToAspectRatio, getTextureCoordinates } from \"./heatmap-layer-utils.js\";\nimport { TextureTransform } from '@luma.gl/engine';\nimport { AttributeManager, COORDINATE_SYSTEM, log } from '@deck.gl/core';\nimport TriangleLayer from \"./triangle-layer.js\";\nimport AggregationLayer from \"../aggregation-layer.js\";\nimport { defaultColorRange, colorRangeToFlatArray } from \"../utils/color-utils.js\";\nimport weightsVs from \"./weights-vs.glsl.js\";\nimport weightsFs from \"./weights-fs.glsl.js\";\nimport maxVs from \"./max-vs.glsl.js\";\nimport maxFs from \"./max-fs.glsl.js\";\nconst RESOLUTION = 2; // (number of common space pixels) / (number texels)\nconst TEXTURE_PROPS = {\n    format: 'rgba8unorm',\n    mipmaps: false,\n    sampler: {\n        minFilter: 'linear',\n        magFilter: 'linear',\n        addressModeU: 'clamp-to-edge',\n        addressModeV: 'clamp-to-edge'\n    }\n};\nconst DEFAULT_COLOR_DOMAIN = [0, 0];\nconst AGGREGATION_MODE = {\n    SUM: 0,\n    MEAN: 1\n};\nconst defaultProps = {\n    getPosition: { type: 'accessor', value: (x) => x.position },\n    getWeight: { type: 'accessor', value: 1 },\n    intensity: { type: 'number', min: 0, value: 1 },\n    radiusPixels: { type: 'number', min: 1, max: 100, value: 50 },\n    colorRange: defaultColorRange,\n    threshold: { type: 'number', min: 0, max: 1, value: 0.05 },\n    colorDomain: { type: 'array', value: null, optional: true },\n    // 'SUM' or 'MEAN'\n    aggregation: 'SUM',\n    weightsTextureSize: { type: 'number', min: 128, max: 2048, value: 2048 },\n    debounceTimeout: { type: 'number', min: 0, max: 1000, value: 500 }\n};\nconst FLOAT_TARGET_FEATURES = [\n    'float32-renderable-webgl', // ability to render to float texture\n    'texture-blend-float-webgl' // ability to blend when rendering to float texture\n];\nconst DIMENSIONS = {\n    data: {\n        props: ['radiusPixels']\n    }\n};\n/** Visualizes the spatial distribution of data. */\nclass HeatmapLayer extends AggregationLayer {\n    initializeState() {\n        super.initializeAggregationLayer(DIMENSIONS);\n        this.setState({ colorDomain: DEFAULT_COLOR_DOMAIN });\n        this._setupTextureParams();\n        this._setupAttributes();\n        this._setupResources();\n    }\n    shouldUpdateState({ changeFlags }) {\n        // Need to be updated when viewport changes\n        return changeFlags.somethingChanged;\n    }\n    /* eslint-disable max-statements,complexity */\n    updateState(opts) {\n        super.updateState(opts);\n        this._updateHeatmapState(opts);\n    }\n    _updateHeatmapState(opts) {\n        const { props, oldProps } = opts;\n        const changeFlags = this._getChangeFlags(opts);\n        if (changeFlags.dataChanged || changeFlags.viewportChanged) {\n            // if data is changed, do not debounce and immediately update the weight map\n            changeFlags.boundsChanged = this._updateBounds(changeFlags.dataChanged);\n            this._updateTextureRenderingBounds();\n        }\n        if (changeFlags.dataChanged || changeFlags.boundsChanged) {\n            // Update weight map immediately\n            clearTimeout(this.state.updateTimer);\n            this.setState({ isWeightMapDirty: true });\n        }\n        else if (changeFlags.viewportZoomChanged) {\n            // Update weight map when zoom stops\n            this._debouncedUpdateWeightmap();\n        }\n        if (props.colorRange !== oldProps.colorRange) {\n            this._updateColorTexture(opts);\n        }\n        if (this.state.isWeightMapDirty) {\n            this._updateWeightmap();\n        }\n        this.setState({ zoom: opts.context.viewport.zoom });\n    }\n    renderLayers() {\n        const { weightsTexture, triPositionBuffer, triTexCoordBuffer, maxWeightsTexture, colorTexture, colorDomain } = this.state;\n        const { updateTriggers, intensity, threshold, aggregation } = this.props;\n        const TriangleLayerClass = this.getSubLayerClass('triangle', TriangleLayer);\n        return new TriangleLayerClass(this.getSubLayerProps({\n            id: 'triangle-layer',\n            updateTriggers\n        }), {\n            // position buffer is filled with world coordinates generated from viewport.unproject\n            // i.e. LNGLAT if geospatial, CARTESIAN otherwise\n            coordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n            data: {\n                attributes: {\n                    positions: triPositionBuffer,\n                    texCoords: triTexCoordBuffer\n                }\n            },\n            vertexCount: 4,\n            maxTexture: maxWeightsTexture,\n            colorTexture,\n            aggregationMode: AGGREGATION_MODE[aggregation] || 0,\n            weightsTexture,\n            intensity,\n            threshold,\n            colorDomain\n        });\n    }\n    finalizeState(context) {\n        super.finalizeState(context);\n        const { weightsTransform, weightsTexture, maxWeightTransform, maxWeightsTexture, triPositionBuffer, triTexCoordBuffer, colorTexture, updateTimer } = this.state;\n        weightsTransform?.destroy();\n        weightsTexture?.destroy();\n        maxWeightTransform?.destroy();\n        maxWeightsTexture?.destroy();\n        triPositionBuffer?.destroy();\n        triTexCoordBuffer?.destroy();\n        colorTexture?.destroy();\n        if (updateTimer) {\n            clearTimeout(updateTimer);\n        }\n    }\n    // PRIVATE\n    // override Composite layer private method to create AttributeManager instance\n    _getAttributeManager() {\n        return new AttributeManager(this.context.device, {\n            id: this.props.id,\n            stats: this.context.stats\n        });\n    }\n    _getChangeFlags(opts) {\n        const changeFlags = {};\n        const { dimensions } = this.state;\n        changeFlags.dataChanged =\n            (this.isAttributeChanged() && 'attribute changed') || // if any attribute is changed\n                (this.isAggregationDirty(opts, {\n                    compareAll: true,\n                    dimension: dimensions.data\n                }) &&\n                    'aggregation is dirty');\n        changeFlags.viewportChanged = opts.changeFlags.viewportChanged;\n        const { zoom } = this.state;\n        if (!opts.context.viewport || opts.context.viewport.zoom !== zoom) {\n            changeFlags.viewportZoomChanged = true;\n        }\n        return changeFlags;\n    }\n    _createTextures() {\n        const { textureSize, format } = this.state;\n        this.setState({\n            weightsTexture: this.context.device.createTexture({\n                ...TEXTURE_PROPS,\n                width: textureSize,\n                height: textureSize,\n                format\n            }),\n            maxWeightsTexture: this.context.device.createTexture({\n                ...TEXTURE_PROPS,\n                width: 1,\n                height: 1,\n                format\n            })\n        });\n    }\n    _setupAttributes() {\n        const attributeManager = this.getAttributeManager();\n        attributeManager.add({\n            positions: { size: 3, type: 'float64', accessor: 'getPosition' },\n            weights: { size: 1, accessor: 'getWeight' }\n        });\n        this.setState({ positionAttributeName: 'positions' });\n    }\n    _setupTextureParams() {\n        const { device } = this.context;\n        const { weightsTextureSize } = this.props;\n        const textureSize = Math.min(weightsTextureSize, device.limits.maxTextureDimension2D);\n        const floatTargetSupport = FLOAT_TARGET_FEATURES.every(feature => device.features.has(feature));\n        const format = floatTargetSupport ? 'rgba32float' : 'rgba8unorm';\n        const weightsScale = floatTargetSupport ? 1 : 1 / 255;\n        this.setState({ textureSize, format, weightsScale });\n        if (!floatTargetSupport) {\n            log.warn(`HeatmapLayer: ${this.id} rendering to float texture not supported, falling back to low precision format`)();\n        }\n    }\n    _createWeightsTransform(shaders) {\n        let { weightsTransform } = this.state;\n        const { weightsTexture } = this.state;\n        const attributeManager = this.getAttributeManager();\n        weightsTransform?.destroy();\n        weightsTransform = new TextureTransform(this.context.device, {\n            id: `${this.id}-weights-transform`,\n            bufferLayout: attributeManager.getBufferLayouts(),\n            vertexCount: 1,\n            targetTexture: weightsTexture,\n            parameters: {\n                depthWriteEnabled: false,\n                blendColorOperation: 'add',\n                blendColorSrcFactor: 'one',\n                blendColorDstFactor: 'one',\n                blendAlphaSrcFactor: 'one',\n                blendAlphaDstFactor: 'one'\n            },\n            topology: 'point-list',\n            ...shaders\n        });\n        this.setState({ weightsTransform });\n    }\n    _setupResources() {\n        this._createTextures();\n        const { device } = this.context;\n        const { textureSize, weightsTexture, maxWeightsTexture } = this.state;\n        const weightsTransformShaders = this.getShaders({\n            vs: weightsVs,\n            fs: weightsFs\n        });\n        this._createWeightsTransform(weightsTransformShaders);\n        const maxWeightsTransformShaders = this.getShaders({ vs: maxVs, fs: maxFs });\n        const maxWeightTransform = new TextureTransform(device, {\n            id: `${this.id}-max-weights-transform`,\n            bindings: { inTexture: weightsTexture },\n            uniforms: { textureSize },\n            targetTexture: maxWeightsTexture,\n            ...maxWeightsTransformShaders,\n            vertexCount: textureSize * textureSize,\n            topology: 'point-list',\n            parameters: {\n                depthWriteEnabled: false,\n                blendColorOperation: 'max',\n                blendAlphaOperation: 'max',\n                blendColorSrcFactor: 'one',\n                blendColorDstFactor: 'one',\n                blendAlphaSrcFactor: 'one',\n                blendAlphaDstFactor: 'one'\n            }\n        });\n        this.setState({\n            weightsTexture,\n            maxWeightsTexture,\n            maxWeightTransform,\n            zoom: null,\n            triPositionBuffer: device.createBuffer({ byteLength: 48 }),\n            triTexCoordBuffer: device.createBuffer({ byteLength: 48 })\n        });\n    }\n    // overwrite super class method to update transform model\n    updateShaders(shaderOptions) {\n        // shader params (modules, injects) changed, update model object\n        this._createWeightsTransform({\n            vs: weightsVs,\n            fs: weightsFs,\n            ...shaderOptions\n        });\n    }\n    _updateMaxWeightValue() {\n        const { maxWeightTransform } = this.state;\n        maxWeightTransform.run({\n            parameters: { viewport: [0, 0, 1, 1] },\n            clearColor: [0, 0, 0, 0]\n        });\n    }\n    // Computes world bounds area that needs to be processed for generate heatmap\n    _updateBounds(forceUpdate = false) {\n        const { viewport } = this.context;\n        // Unproject all 4 corners of the current screen coordinates into world coordinates (lng/lat)\n        // Takes care of viewport has non zero bearing/pitch (i.e axis not aligned with world coordiante system)\n        const viewportCorners = [\n            viewport.unproject([0, 0]),\n            viewport.unproject([viewport.width, 0]),\n            viewport.unproject([viewport.width, viewport.height]),\n            viewport.unproject([0, viewport.height])\n        ].map(p => p.map(Math.fround));\n        // #1: get world bounds for current viewport extends\n        const visibleWorldBounds = getBounds(viewportCorners); // TODO: Change to visible bounds\n        const newState = { visibleWorldBounds, viewportCorners };\n        let boundsChanged = false;\n        if (forceUpdate ||\n            !this.state.worldBounds ||\n            !boundsContain(this.state.worldBounds, visibleWorldBounds)) {\n            // #2 : convert world bounds to common (Flat) bounds\n            // #3 : extend common bounds to match aspect ratio with viewport\n            const scaledCommonBounds = this._worldToCommonBounds(visibleWorldBounds);\n            // #4 :convert aligned common bounds to world bounds\n            const worldBounds = this._commonToWorldBounds(scaledCommonBounds);\n            // Clip webmercator projection limits\n            if (this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n                worldBounds[1] = Math.max(worldBounds[1], -85.051129);\n                worldBounds[3] = Math.min(worldBounds[3], 85.051129);\n                worldBounds[0] = Math.max(worldBounds[0], -360);\n                worldBounds[2] = Math.min(worldBounds[2], 360);\n            }\n            // #5: now convert world bounds to common using Layer's coordiante system and origin\n            const normalizedCommonBounds = this._worldToCommonBounds(worldBounds);\n            newState.worldBounds = worldBounds;\n            newState.normalizedCommonBounds = normalizedCommonBounds;\n            boundsChanged = true;\n        }\n        this.setState(newState);\n        return boundsChanged;\n    }\n    _updateTextureRenderingBounds() {\n        // Just render visible portion of the texture\n        const { triPositionBuffer, triTexCoordBuffer, normalizedCommonBounds, viewportCorners } = this.state;\n        const { viewport } = this.context;\n        triPositionBuffer.write(packVertices(viewportCorners, 3));\n        const textureBounds = viewportCorners.map(p => getTextureCoordinates(viewport.projectPosition(p), normalizedCommonBounds));\n        triTexCoordBuffer.write(packVertices(textureBounds, 2));\n    }\n    _updateColorTexture(opts) {\n        const { colorRange } = opts.props;\n        let { colorTexture } = this.state;\n        const colors = colorRangeToFlatArray(colorRange, false, Uint8Array);\n        if (colorTexture && colorTexture?.width === colorRange.length) {\n            // TODO(v9): Unclear whether `setSubImageData` is a public API, or what to use if not.\n            colorTexture.setSubImageData({ data: colors });\n        }\n        else {\n            colorTexture?.destroy();\n            colorTexture = this.context.device.createTexture({\n                ...TEXTURE_PROPS,\n                data: colors,\n                width: colorRange.length,\n                height: 1\n            });\n        }\n        this.setState({ colorTexture });\n    }\n    _updateWeightmap() {\n        const { radiusPixels, colorDomain, aggregation } = this.props;\n        const { worldBounds, textureSize, weightsScale } = this.state;\n        const weightsTransform = this.state.weightsTransform;\n        this.state.isWeightMapDirty = false;\n        // convert world bounds to common using Layer's coordiante system and origin\n        const commonBounds = this._worldToCommonBounds(worldBounds, {\n            useLayerCoordinateSystem: true\n        });\n        if (colorDomain && aggregation === 'SUM') {\n            // scale color domain to weight per pixel\n            const { viewport } = this.context;\n            const metersPerPixel = (viewport.distanceScales.metersPerUnit[2] * (commonBounds[2] - commonBounds[0])) /\n                textureSize;\n            this.state.colorDomain = colorDomain.map(x => x * metersPerPixel * weightsScale);\n        }\n        else {\n            this.state.colorDomain = colorDomain || DEFAULT_COLOR_DOMAIN;\n        }\n        const attributeManager = this.getAttributeManager();\n        const attributes = attributeManager.getAttributes();\n        const moduleSettings = this.getModuleSettings();\n        const uniforms = { radiusPixels, commonBounds, textureWidth: textureSize, weightsScale };\n        this._setModelAttributes(weightsTransform.model, attributes);\n        weightsTransform.model.setVertexCount(this.getNumInstances());\n        weightsTransform.model.setUniforms(uniforms);\n        weightsTransform.model.updateModuleSettings(moduleSettings);\n        weightsTransform.run({\n            parameters: { viewport: [0, 0, textureSize, textureSize] },\n            clearColor: [0, 0, 0, 0]\n        });\n        this._updateMaxWeightValue();\n    }\n    _debouncedUpdateWeightmap(fromTimer = false) {\n        let { updateTimer } = this.state;\n        const { debounceTimeout } = this.props;\n        if (fromTimer) {\n            updateTimer = null;\n            // update\n            this._updateBounds(true);\n            this._updateTextureRenderingBounds();\n            this.setState({ isWeightMapDirty: true });\n        }\n        else {\n            this.setState({ isWeightMapDirty: false });\n            clearTimeout(updateTimer);\n            updateTimer = setTimeout(this._debouncedUpdateWeightmap.bind(this, true), debounceTimeout);\n        }\n        this.setState({ updateTimer });\n    }\n    // input: worldBounds: [minLong, minLat, maxLong, maxLat]\n    // input: opts.useLayerCoordinateSystem : layers coordiante system is used\n    // optput: commonBounds: [minX, minY, maxX, maxY] scaled to fit the current texture\n    _worldToCommonBounds(worldBounds, opts = {}) {\n        const { useLayerCoordinateSystem = false } = opts;\n        const [minLong, minLat, maxLong, maxLat] = worldBounds;\n        const { viewport } = this.context;\n        const { textureSize } = this.state;\n        const { coordinateSystem } = this.props;\n        const offsetMode = useLayerCoordinateSystem &&\n            (coordinateSystem === COORDINATE_SYSTEM.LNGLAT_OFFSETS ||\n                coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS);\n        const offsetOriginCommon = offsetMode\n            ? viewport.projectPosition(this.props.coordinateOrigin)\n            : [0, 0];\n        const size = (textureSize * RESOLUTION) / viewport.scale;\n        let bottomLeftCommon;\n        let topRightCommon;\n        // Y-axis is flipped between World and Common bounds\n        if (useLayerCoordinateSystem && !offsetMode) {\n            bottomLeftCommon = this.projectPosition([minLong, minLat, 0]);\n            topRightCommon = this.projectPosition([maxLong, maxLat, 0]);\n        }\n        else {\n            bottomLeftCommon = viewport.projectPosition([minLong, minLat, 0]);\n            topRightCommon = viewport.projectPosition([maxLong, maxLat, 0]);\n        }\n        // Ignore z component\n        return scaleToAspectRatio([\n            bottomLeftCommon[0] - offsetOriginCommon[0],\n            bottomLeftCommon[1] - offsetOriginCommon[1],\n            topRightCommon[0] - offsetOriginCommon[0],\n            topRightCommon[1] - offsetOriginCommon[1]\n        ], size, size);\n    }\n    // input commonBounds: [xMin, yMin, xMax, yMax]\n    // output worldBounds: [minLong, minLat, maxLong, maxLat]\n    _commonToWorldBounds(commonBounds) {\n        const [xMin, yMin, xMax, yMax] = commonBounds;\n        const { viewport } = this.context;\n        const bottomLeftWorld = viewport.unprojectPosition([xMin, yMin]);\n        const topRightWorld = viewport.unprojectPosition([xMax, yMax]);\n        return bottomLeftWorld.slice(0, 2).concat(topRightWorld.slice(0, 2));\n    }\n}\nHeatmapLayer.layerName = 'HeatmapLayer';\nHeatmapLayer.defaultProps = defaultProps;\nexport default HeatmapLayer;\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport * as React from 'react';\nimport { createElement, useRef, useState, useMemo, useEffect, useImperativeHandle } from 'react';\nimport { Deck } from '@deck.gl/core';\nimport useIsomorphicLayoutEffect from \"./utils/use-isomorphic-layout-effect.js\";\nimport extractJSXLayers from \"./utils/extract-jsx-layers.js\";\nimport positionChildrenUnderViews from \"./utils/position-children-under-views.js\";\nimport extractStyles from \"./utils/extract-styles.js\";\nfunction getRefHandles(thisRef) {\n    return {\n        get deck() {\n            return thisRef.deck;\n        },\n        // The following method can only be called after ref is available, by which point deck is defined in useEffect\n        pickObject: opts => thisRef.deck.pickObject(opts),\n        pickMultipleObjects: opts => thisRef.deck.pickMultipleObjects(opts),\n        pickObjects: opts => thisRef.deck.pickObjects(opts)\n    };\n}\nfunction redrawDeck(thisRef) {\n    if (thisRef.redrawReason) {\n        // Only redraw if we have received a dirty flag\n        // @ts-expect-error accessing protected method\n        thisRef.deck._drawLayers(thisRef.redrawReason);\n        thisRef.redrawReason = null;\n    }\n}\nfunction createDeckInstance(thisRef, DeckClass, props) {\n    const deck = new DeckClass({\n        ...props,\n        // The Deck's animation loop is independent from React's render cycle, causing potential\n        // synchronization issues. We provide this custom render function to make sure that React\n        // and Deck update on the same schedule.\n        _customRender: redrawReason => {\n            // Save the dirty flag for later\n            thisRef.redrawReason = redrawReason;\n            // Viewport/view state is passed to child components as props.\n            // If they have changed, we need to trigger a React rerender to update children props.\n            const viewports = deck.getViewports();\n            if (thisRef.lastRenderedViewports !== viewports) {\n                // Viewports have changed, update children props first.\n                // This will delay the Deck canvas redraw till after React update (in useLayoutEffect)\n                // so that the canvas does not get rendered before the child components update.\n                thisRef.forceUpdate();\n            }\n            else {\n                redrawDeck(thisRef);\n            }\n        }\n    });\n    return deck;\n}\nfunction DeckGLWithRef(props, ref) {\n    // A mechanism to force redraw\n    const [version, setVersion] = useState(0);\n    // A reference to persistent states\n    const _thisRef = useRef({\n        control: null,\n        version,\n        forceUpdate: () => setVersion(v => v + 1)\n    });\n    const thisRef = _thisRef.current;\n    // DOM refs\n    const containerRef = useRef(null);\n    const canvasRef = useRef(null);\n    // extract any deck.gl layers masquerading as react elements from props.children\n    const jsxProps = useMemo(() => extractJSXLayers(props), [props.layers, props.views, props.children]);\n    // Callbacks\n    let inRender = true;\n    const handleViewStateChange = params => {\n        if (inRender && props.viewState) {\n            // Callback may invoke a state update. Defer callback to after render() to avoid React error\n            // In React StrictMode, render is executed twice and useEffect/useLayoutEffect is executed once\n            // Store deferred parameters in ref so that we can access it in another render\n            thisRef.viewStateUpdateRequested = params;\n            return null;\n        }\n        thisRef.viewStateUpdateRequested = null;\n        return props.onViewStateChange?.(params);\n    };\n    const handleInteractionStateChange = params => {\n        if (inRender) {\n            // Callback may invoke a state update. Defer callback to after render() to avoid React error\n            // In React StrictMode, render is executed twice and useEffect/useLayoutEffect is executed once\n            // Store deferred parameters in ref so that we can access it in another render\n            thisRef.interactionStateUpdateRequested = params;\n        }\n        else {\n            thisRef.interactionStateUpdateRequested = null;\n            props.onInteractionStateChange?.(params);\n        }\n    };\n    // Update Deck's props. If Deck needs redraw, this will trigger a call to `_customRender` in\n    // the next animation frame.\n    // Needs to be called both from initial mount, and when new props are received\n    const deckProps = useMemo(() => {\n        const forwardProps = {\n            ...props,\n            // Override user styling props. We will set the canvas style in render()\n            style: null,\n            width: '100%',\n            height: '100%',\n            parent: containerRef.current,\n            canvas: canvasRef.current,\n            layers: jsxProps.layers,\n            views: jsxProps.views,\n            onViewStateChange: handleViewStateChange,\n            onInteractionStateChange: handleInteractionStateChange\n        };\n        // The defaultValue for _customRender is null, which would overwrite the definition\n        // of _customRender. Remove to avoid frequently redeclaring the method here.\n        delete forwardProps._customRender;\n        if (thisRef.deck) {\n            thisRef.deck.setProps(forwardProps);\n        }\n        return forwardProps;\n    }, [props]);\n    useEffect(() => {\n        const DeckClass = props.Deck || Deck;\n        thisRef.deck = createDeckInstance(thisRef, DeckClass, {\n            ...deckProps,\n            parent: containerRef.current,\n            canvas: canvasRef.current\n        });\n        return () => thisRef.deck?.finalize();\n    }, []);\n    useIsomorphicLayoutEffect(() => {\n        // render has just been called. The children are positioned based on the current view state.\n        // Redraw Deck canvas immediately, if necessary, using the current view state, so that it\n        // matches the child components.\n        redrawDeck(thisRef);\n        // Execute deferred callbacks\n        const { viewStateUpdateRequested, interactionStateUpdateRequested } = thisRef;\n        if (viewStateUpdateRequested) {\n            handleViewStateChange(viewStateUpdateRequested);\n        }\n        if (interactionStateUpdateRequested) {\n            handleInteractionStateChange(interactionStateUpdateRequested);\n        }\n    });\n    useImperativeHandle(ref, () => getRefHandles(thisRef), []);\n    const currentViewports = thisRef.deck && thisRef.deck.isInitialized ? thisRef.deck.getViewports() : undefined;\n    const { ContextProvider, width = '100%', height = '100%', id, style } = props;\n    const { containerStyle, canvasStyle } = useMemo(() => extractStyles({ width, height, style }), [width, height, style]);\n    // Props changes may lead to 3 types of updates:\n    // 1. Only the WebGL canvas - updated in Deck's render cycle (next animation frame)\n    // 2. Only the DOM - updated in React's lifecycle (now)\n    // 3. Both the WebGL canvas and the DOM - defer React rerender to next animation frame just\n    //    before Deck redraw to ensure perfect synchronization & avoid excessive redraw\n    //    This is because multiple changes may happen to Deck between two frames e.g. transition\n    if ((!thisRef.viewStateUpdateRequested && thisRef.lastRenderedViewports === currentViewports) || // case 2\n        thisRef.version !== version // case 3 just before deck redraws\n    ) {\n        thisRef.lastRenderedViewports = currentViewports;\n        thisRef.version = version;\n        // Render the background elements (typically react-map-gl instances)\n        // using the view descriptors\n        const childrenUnderViews = positionChildrenUnderViews({\n            children: jsxProps.children,\n            deck: thisRef.deck,\n            ContextProvider\n        });\n        const canvas = createElement('canvas', {\n            key: 'canvas',\n            id: id || 'deckgl-overlay',\n            ref: canvasRef,\n            style: canvasStyle\n        });\n        // Render deck.gl as the last child\n        thisRef.control = createElement('div', { id: `${id || 'deckgl'}-wrapper`, ref: containerRef, style: containerStyle }, [canvas, childrenUnderViews]);\n    }\n    inRender = false;\n    return thisRef.control;\n}\nconst DeckGL = React.forwardRef(DeckGLWithRef);\nexport default DeckGL;\n", "// From https://github.com/streamich/react-use/blob/master/src/useIsomorphicLayoutEffect.ts\n// useLayoutEffect but does not trigger warning in server-side rendering\nimport { useEffect, useLayoutEffect } from 'react';\nconst useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;\nexport default useIsomorphicLayoutEffect;\n", "import * as React from 'react';\nimport { createElement } from 'react';\nimport { inheritsFrom } from \"./inherits-from.js\";\nimport { Layer, View } from '@deck.gl/core';\nimport { isComponent } from \"./evaluate-children.js\";\n// recursively wrap render callbacks in `View`\nfunction wrapInView(node) {\n    if (typeof node === 'function') {\n        // React.Children does not traverse functions.\n        // All render callbacks must be protected under a <View>\n        // @ts-expect-error View is not a ReactJSXElement constructor. Only used as a temporary wrapper and will be removed in extractJSXLayers\n        return createElement(View, {}, node);\n    }\n    if (Array.isArray(node)) {\n        return node.map(wrapInView);\n    }\n    if (isComponent(node)) {\n        if (node.type === React.Fragment) {\n            return wrapInView(node.props.children);\n        }\n        if (inheritsFrom(node.type, View)) {\n            return node;\n        }\n    }\n    return node;\n}\n// extracts any deck.gl layers masquerading as react elements from props.children\nexport default function extractJSXLayers({ children, layers = [], views = null }) {\n    const reactChildren = []; // extract real react elements (i.e. not deck.gl layers)\n    const jsxLayers = []; // extracted layer from react children, will add to deck.gl layer array\n    const jsxViews = {};\n    // React.children\n    React.Children.forEach(wrapInView(children), reactElement => {\n        if (isComponent(reactElement)) {\n            // For some reason Children.forEach doesn't filter out `null`s\n            const ElementType = reactElement.type;\n            if (inheritsFrom(ElementType, Layer)) {\n                const layer = createLayer(ElementType, reactElement.props);\n                jsxLayers.push(layer);\n            }\n            else {\n                reactChildren.push(reactElement);\n            }\n            // empty id => default view\n            if (inheritsFrom(ElementType, View) && ElementType !== View && reactElement.props.id) {\n                // @ts-ignore Cannot instantiate an abstract class (View)\n                const view = new ElementType(reactElement.props);\n                jsxViews[view.id] = view;\n            }\n        }\n        else if (reactElement) {\n            reactChildren.push(reactElement);\n        }\n    });\n    // Avoid modifying views if no JSX views were found\n    if (Object.keys(jsxViews).length > 0) {\n        // If a view is specified in both views prop and JSX, use the one in views\n        if (Array.isArray(views)) {\n            views.forEach(view => {\n                jsxViews[view.id] = view;\n            });\n        }\n        else if (views) {\n            jsxViews[views.id] = views;\n        }\n        views = Object.values(jsxViews);\n    }\n    // Avoid modifying layers array if no JSX layers were found\n    layers = jsxLayers.length > 0 ? [...jsxLayers, ...layers] : layers;\n    return { layers, children: reactChildren, views };\n}\nfunction createLayer(LayerType, reactProps) {\n    const props = {};\n    // Layer.defaultProps is treated as ReactElement.defaultProps and merged into react props\n    // Remove them\n    const defaultProps = LayerType.defaultProps || {};\n    for (const key in reactProps) {\n        if (defaultProps[key] !== reactProps[key]) {\n            props[key] = reactProps[key];\n        }\n    }\n    // @ts-ignore Cannot instantiate an abstract class (Layer)\n    return new LayerType(props);\n}\n", "// Check if one JavaScript class inherits from another\nexport function inheritsFrom(Type, ParentType) {\n    while (Type) {\n        if (Type === ParentType) {\n            return true;\n        }\n        Type = Object.getPrototypeOf(Type);\n    }\n    return false;\n}\n", "import { cloneElement } from 'react';\nconst MAP_STYLE = { position: 'absolute', zIndex: -1 };\nexport default function evaluateChildren(children, childProps) {\n    if (typeof children === 'function') {\n        return children(childProps);\n    }\n    if (Array.isArray(children)) {\n        return children.map(child => evaluateChildren(child, childProps));\n    }\n    if (isComponent(children)) {\n        // Special treatment for react-map-gl's Map component\n        // to support shorthand use case <DeckGL><StaticMap /></DeckGL>\n        if (isReactMap(children)) {\n            // Place map under the canvas\n            childProps.style = MAP_STYLE;\n            return cloneElement(children, childProps);\n        }\n        if (needsDeckGLViewProps(children)) {\n            return cloneElement(children, childProps);\n        }\n    }\n    return children;\n}\nexport function isComponent(child) {\n    return (child && typeof child === 'object' && 'type' in child) || false;\n}\nfunction isReactMap(child) {\n    return child.props?.mapStyle;\n}\nfunction needsDeckGLViewProps(child) {\n    const componentClass = child.type;\n    // @ts-expect-error deckGLViewProps is a custom hack defined on the constructor (nebula.gl)\n    return componentClass && componentClass.deckGLViewProps;\n}\n", "import { createElement } from 'react';\nimport { View } from '@deck.gl/core';\nimport { inheritsFrom } from \"./inherits-from.js\";\nimport evaluateChildren, { isComponent } from \"./evaluate-children.js\";\n// Iterate over views and reposition children associated with views\n// TODO - Can we supply a similar function for the non-React case?\nexport default function positionChildrenUnderViews({ children, deck, ContextProvider }) {\n    // @ts-expect-error accessing protected property\n    const { viewManager } = deck || {};\n    if (!viewManager || !viewManager.views.length) {\n        return [];\n    }\n    const views = {};\n    const defaultViewId = viewManager.views[0].id;\n    // Sort children by view id\n    for (const child of children) {\n        // Unless child is a View, position / render as part of the default view\n        let viewId = defaultViewId;\n        let viewChildren = child;\n        if (isComponent(child) && inheritsFrom(child.type, View)) {\n            viewId = child.props.id || defaultViewId;\n            viewChildren = child.props.children;\n        }\n        const viewport = viewManager.getViewport(viewId);\n        const viewState = viewManager.getViewState(viewId);\n        // Drop (auto-hide) elements with viewId that are not matched by any current view\n        if (viewport) {\n            viewState.padding = viewport.padding;\n            const { x, y, width, height } = viewport;\n            // Resolve potentially relative dimensions using the deck.gl container size\n            viewChildren = evaluateChildren(viewChildren, {\n                x,\n                y,\n                width,\n                height,\n                viewport,\n                viewState\n            });\n            if (!views[viewId]) {\n                views[viewId] = {\n                    viewport,\n                    children: []\n                };\n            }\n            views[viewId].children.push(viewChildren);\n        }\n    }\n    // Render views\n    return Object.keys(views).map(viewId => {\n        const { viewport, children: viewChildren } = views[viewId];\n        const { x, y, width, height } = viewport;\n        const style = {\n            position: 'absolute',\n            left: x,\n            top: y,\n            width,\n            height\n        };\n        const key = `view-${viewId}`;\n        // If children is passed as an array, React will throw the \"each element in a list needs\n        // a key\" warning. Sending each child as separate arguments removes this requirement.\n        const viewElement = createElement('div', { key, id: key, style }, ...viewChildren);\n        if (ContextProvider) {\n            const contextValue = {\n                viewport,\n                // @ts-expect-error accessing protected property\n                container: deck.canvas.offsetParent,\n                // @ts-expect-error accessing protected property\n                eventManager: deck.eventManager,\n                onViewStateChange: params => {\n                    params.viewId = viewId;\n                    // @ts-expect-error accessing protected method\n                    deck._onViewStateChange(params);\n                }\n            };\n            return createElement(ContextProvider, { key, value: contextValue }, viewElement);\n        }\n        return viewElement;\n    });\n}\n", "const CANVAS_ONLY_STYLES = {\n    mixBlendMode: null\n};\nexport default function extractStyles({ width, height, style }) {\n    // This styling is enforced for correct positioning with children\n    const containerStyle = {\n        position: 'absolute',\n        zIndex: 0,\n        left: 0,\n        top: 0,\n        width,\n        height\n    };\n    // Fill the container\n    const canvasStyle = {\n        left: 0,\n        top: 0\n    };\n    if (style) {\n        for (const key in style) {\n            if (key in CANVAS_ONLY_STYLES) {\n                // apply style to the canvas, but not deck's children, e.g. mix-blend-mode\n                canvasStyle[key] = style[key];\n            }\n            else {\n                // apply style to the container, e.g. position/flow settings\n                containerStyle[key] = style[key];\n            }\n        }\n    }\n    return { containerStyle, canvasStyle };\n}\n", "/** Normal hydration that attaches to a DOM tree but does not diff it. */\nexport const MODE_HYDRATE = 1 << 5;\n/** Signifies this VNode suspended on the previous render */\nexport const MODE_SUSPENDED = 1 << 7;\n/** Indicates that this node needs to be inserted while patching children */\nexport const INSERT_VNODE = 1 << 16;\n/** Indicates a VNode has been matched with another VNode in the diff */\nexport const MATCHED = 1 << 17;\n\n/** Reset all mode flags */\nexport const RESET_MODE = ~(MODE_HYDRATE | MODE_SUSPENDED);\n\nexport const EMPTY_OBJ = /** @type {any} */ ({});\nexport const EMPTY_ARR = [];\nexport const IS_NON_DIMENSIONAL =\n\t/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;\n", "import { EMPTY_ARR } from './constants';\n\nexport const isArray = Array.isArray;\n\n/**\n * Assign properties from `props` to `obj`\n * @template O, P The obj and props types\n * @param {O} obj The object to copy properties to\n * @param {P} props The object to copy properties from\n * @returns {O & P}\n */\nexport function assign(obj, props) {\n\t// @ts-expect-error We change the type of `obj` to be `O & P`\n\tfor (let i in props) obj[i] = props[i];\n\treturn /** @type {O & P} */ (obj);\n}\n\n/**\n * Remove a child node from its parent if attached. This is a workaround for\n * IE11 which doesn't support `Element.prototype.remove()`. Using this function\n * is smaller than including a dedicated polyfill.\n * @param {preact.ContainerNode} node The node to remove\n */\nexport function removeNode(node) {\n\tif (node && node.parentNode) node.parentNode.removeChild(node);\n}\n\nexport const slice = EMPTY_ARR.slice;\n", "import { _catchError } from './diff/catch-error';\n\n/**\n * The `option` object can potentially contain callback functions\n * that are called during various stages of our renderer. This is the\n * foundation on which all our addons like `preact/debug`, `preact/compat`,\n * and `preact/hooks` are based on. See the `Options` type in `internal.d.ts`\n * for a full list of available option hooks (most editors/IDEs allow you to\n * ctrl+click or cmd+click on mac the type definition below).\n * @type {Options}\n */\nconst options = {\n\t_catchError\n};\n\nexport default options;\n", "import { slice } from './util';\nimport options from './options';\n\nlet vnodeId = 0;\n\n/**\n * Create an virtual node (used for JSX)\n * @param {VNode[\"type\"]} type The node name or Component constructor for this\n * virtual node\n * @param {object | null | undefined} [props] The properties of the virtual node\n * @param {Array<import('.').ComponentChildren>} [children] The children of the\n * virtual node\n * @returns {VNode}\n */\nexport function createElement(type, props, children) {\n\tlet normalizedProps = {},\n\t\tkey,\n\t\tref,\n\t\ti;\n\tfor (i in props) {\n\t\tif (i == 'key') key = props[i];\n\t\telse if (i == 'ref') ref = props[i];\n\t\telse normalizedProps[i] = props[i];\n\t}\n\n\tif (arguments.length > 2) {\n\t\tnormalizedProps.children =\n\t\t\targuments.length > 3 ? slice.call(arguments, 2) : children;\n\t}\n\n\t// If a Component VNode, check for and apply defaultProps\n\t// Note: type may be undefined in development, must never error here.\n\tif (typeof type == 'function' && type.defaultProps != null) {\n\t\tfor (i in type.defaultProps) {\n\t\t\tif (normalizedProps[i] === undefined) {\n\t\t\t\tnormalizedProps[i] = type.defaultProps[i];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn createVNode(type, normalizedProps, key, ref, null);\n}\n\n/**\n * Create a VNode (used internally by Preact)\n * @param {VNode[\"type\"]} type The node name or Component\n * Constructor for this virtual node\n * @param {object | string | number | null} props The properties of this virtual node.\n * If this virtual node represents a text node, this is the text of the node (string or number).\n * @param {string | number | null} key The key for this virtual node, used when\n * diffing it against its children\n * @param {VNode[\"ref\"]} ref The ref property that will\n * receive a reference to its created child\n * @returns {VNode}\n */\nexport function createVNode(type, props, key, ref, original) {\n\t// V8 seems to be better at detecting type shapes if the object is allocated from the same call site\n\t// Do not inline into createElement and coerceToVNode!\n\t/** @type {VNode} */\n\tconst vnode = {\n\t\ttype,\n\t\tprops,\n\t\tkey,\n\t\tref,\n\t\t_children: null,\n\t\t_parent: null,\n\t\t_depth: 0,\n\t\t_dom: null,\n\t\t// _nextDom must be initialized to undefined b/c it will eventually\n\t\t// be set to dom.nextSibling which can return `null` and it is important\n\t\t// to be able to distinguish between an uninitialized _nextDom and\n\t\t// a _nextDom that has been set to `null`\n\t\t_nextDom: undefined,\n\t\t_component: null,\n\t\tconstructor: undefined,\n\t\t_original: original == null ? ++vnodeId : original,\n\t\t_index: -1,\n\t\t_flags: 0\n\t};\n\n\t// Only invoke the vnode hook if this was *not* a direct copy:\n\tif (original == null && options.vnode != null) options.vnode(vnode);\n\n\treturn vnode;\n}\n\nexport function createRef() {\n\treturn { current: null };\n}\n\nexport function Fragment(props) {\n\treturn props.children;\n}\n\n/**\n * Check if a the argument is a valid Preact VNode.\n * @param {*} vnode\n * @returns {vnode is VNode}\n */\nexport const isValidElement = vnode =>\n\tvnode != null && vnode.constructor == undefined;\n", "import { assign } from './util';\nimport { diff, commitRoot } from './diff/index';\nimport options from './options';\nimport { Fragment } from './create-element';\nimport { MODE_HYDRATE } from './constants';\n\n/**\n * Base Component class. Provides `setState()` and `forceUpdate()`, which\n * trigger rendering\n * @param {object} props The initial component props\n * @param {object} context The initial context from parent components'\n * getChildContext\n */\nexport function BaseComponent(props, context) {\n\tthis.props = props;\n\tthis.context = context;\n}\n\n/**\n * Update component state and schedule a re-render.\n * @this {Component}\n * @param {object | ((s: object, p: object) => object)} update A hash of state\n * properties to update with new values or a function that given the current\n * state and props returns a new partial state\n * @param {() => void} [callback] A function to be called once component state is\n * updated\n */\nBaseComponent.prototype.setState = function (update, callback) {\n\t// only clone state when copying to nextState the first time.\n\tlet s;\n\tif (this._nextState != null && this._nextState !== this.state) {\n\t\ts = this._nextState;\n\t} else {\n\t\ts = this._nextState = assign({}, this.state);\n\t}\n\n\tif (typeof update == 'function') {\n\t\t// Some libraries like `immer` mark the current state as readonly,\n\t\t// preventing us from mutating it, so we need to clone it. See #2716\n\t\tupdate = update(assign({}, s), this.props);\n\t}\n\n\tif (update) {\n\t\tassign(s, update);\n\t}\n\n\t// Skip update if updater function returned null\n\tif (update == null) return;\n\n\tif (this._vnode) {\n\t\tif (callback) {\n\t\t\tthis._stateCallbacks.push(callback);\n\t\t}\n\t\tenqueueRender(this);\n\t}\n};\n\n/**\n * Immediately perform a synchronous re-render of the component\n * @this {Component}\n * @param {() => void} [callback] A function to be called after component is\n * re-rendered\n */\nBaseComponent.prototype.forceUpdate = function (callback) {\n\tif (this._vnode) {\n\t\t// Set render mode so that we can differentiate where the render request\n\t\t// is coming from. We need this because forceUpdate should never call\n\t\t// shouldComponentUpdate\n\t\tthis._force = true;\n\t\tif (callback) this._renderCallbacks.push(callback);\n\t\tenqueueRender(this);\n\t}\n};\n\n/**\n * Accepts `props` and `state`, and returns a new Virtual DOM tree to build.\n * Virtual DOM is generally constructed via [JSX](http://jasonformat.com/wtf-is-jsx).\n * @param {object} props Props (eg: JSX attributes) received from parent\n * element/component\n * @param {object} state The component's current state\n * @param {object} context Context object, as returned by the nearest\n * ancestor's `getChildContext()`\n * @returns {ComponentChildren | void}\n */\nBaseComponent.prototype.render = Fragment;\n\n/**\n * @param {VNode} vnode\n * @param {number | null} [childIndex]\n */\nexport function getDomSibling(vnode, childIndex) {\n\tif (childIndex == null) {\n\t\t// Use childIndex==null as a signal to resume the search from the vnode's sibling\n\t\treturn vnode._parent\n\t\t\t? getDomSibling(vnode._parent, vnode._index + 1)\n\t\t\t: null;\n\t}\n\n\tlet sibling;\n\tfor (; childIndex < vnode._children.length; childIndex++) {\n\t\tsibling = vnode._children[childIndex];\n\n\t\tif (sibling != null && sibling._dom != null) {\n\t\t\t// Since updateParentDomPointers keeps _dom pointer correct,\n\t\t\t// we can rely on _dom to tell us if this subtree contains a\n\t\t\t// rendered DOM node, and what the first rendered DOM node is\n\t\t\treturn sibling._dom;\n\t\t}\n\t}\n\n\t// If we get here, we have not found a DOM node in this vnode's children.\n\t// We must resume from this vnode's sibling (in it's parent _children array)\n\t// Only climb up and search the parent if we aren't searching through a DOM\n\t// VNode (meaning we reached the DOM parent of the original vnode that began\n\t// the search)\n\treturn typeof vnode.type == 'function' ? getDomSibling(vnode) : null;\n}\n\n/**\n * Trigger in-place re-rendering of a component.\n * @param {Component} component The component to rerender\n */\nfunction renderComponent(component) {\n\tlet oldVNode = component._vnode,\n\t\toldDom = oldVNode._dom,\n\t\tcommitQueue = [],\n\t\trefQueue = [];\n\n\tif (component._parentDom) {\n\t\tconst newVNode = assign({}, oldVNode);\n\t\tnewVNode._original = oldVNode._original + 1;\n\t\tif (options.vnode) options.vnode(newVNode);\n\n\t\tdiff(\n\t\t\tcomponent._parentDom,\n\t\t\tnewVNode,\n\t\t\toldVNode,\n\t\t\tcomponent._globalContext,\n\t\t\tcomponent._parentDom.namespaceURI,\n\t\t\toldVNode._flags & MODE_HYDRATE ? [oldDom] : null,\n\t\t\tcommitQueue,\n\t\t\toldDom == null ? getDomSibling(oldVNode) : oldDom,\n\t\t\t!!(oldVNode._flags & MODE_HYDRATE),\n\t\t\trefQueue\n\t\t);\n\n\t\tnewVNode._original = oldVNode._original;\n\t\tnewVNode._parent._children[newVNode._index] = newVNode;\n\t\tcommitRoot(commitQueue, newVNode, refQueue);\n\n\t\tif (newVNode._dom != oldDom) {\n\t\t\tupdateParentDomPointers(newVNode);\n\t\t}\n\t}\n}\n\n/**\n * @param {VNode} vnode\n */\nfunction updateParentDomPointers(vnode) {\n\tif ((vnode = vnode._parent) != null && vnode._component != null) {\n\t\tvnode._dom = vnode._component.base = null;\n\t\tfor (let i = 0; i < vnode._children.length; i++) {\n\t\t\tlet child = vnode._children[i];\n\t\t\tif (child != null && child._dom != null) {\n\t\t\t\tvnode._dom = vnode._component.base = child._dom;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn updateParentDomPointers(vnode);\n\t}\n}\n\n/**\n * The render queue\n * @type {Array<Component>}\n */\nlet rerenderQueue = [];\n\n/*\n * The value of `Component.debounce` must asynchronously invoke the passed in callback. It is\n * important that contributors to Preact can consistently reason about what calls to `setState`, etc.\n * do, and when their effects will be applied. See the links below for some further reading on designing\n * asynchronous APIs.\n * * [Designing APIs for Asynchrony](https://blog.izs.me/2013/08/designing-apis-for-asynchrony)\n * * [Callbacks synchronous and asynchronous](https://blog.ometer.com/2011/07/24/callbacks-synchronous-and-asynchronous/)\n */\n\nlet prevDebounce;\n\nconst defer =\n\ttypeof Promise == 'function'\n\t\t? Promise.prototype.then.bind(Promise.resolve())\n\t\t: setTimeout;\n\n/**\n * Enqueue a rerender of a component\n * @param {Component} c The component to rerender\n */\nexport function enqueueRender(c) {\n\tif (\n\t\t(!c._dirty &&\n\t\t\t(c._dirty = true) &&\n\t\t\trerenderQueue.push(c) &&\n\t\t\t!process._rerenderCount++) ||\n\t\tprevDebounce !== options.debounceRendering\n\t) {\n\t\tprevDebounce = options.debounceRendering;\n\t\t(prevDebounce || defer)(process);\n\t}\n}\n\n/**\n * @param {Component} a\n * @param {Component} b\n */\nconst depthSort = (a, b) => a._vnode._depth - b._vnode._depth;\n\n/** Flush the render queue by rerendering all queued components */\nfunction process() {\n\tlet c;\n\trerenderQueue.sort(depthSort);\n\t// Don't update `renderCount` yet. Keep its value non-zero to prevent unnecessary\n\t// process() calls from getting scheduled while `queue` is still being consumed.\n\twhile ((c = rerenderQueue.shift())) {\n\t\tif (c._dirty) {\n\t\t\tlet renderQueueLength = rerenderQueue.length;\n\t\t\trenderComponent(c);\n\t\t\tif (rerenderQueue.length > renderQueueLength) {\n\t\t\t\t// When i.e. rerendering a provider additional new items can be injected, we want to\n\t\t\t\t// keep the order from top to bottom with those new items so we can handle them in a\n\t\t\t\t// single pass\n\t\t\t\trerenderQueue.sort(depthSort);\n\t\t\t}\n\t\t}\n\t}\n\tprocess._rerenderCount = 0;\n}\n\nprocess._rerenderCount = 0;\n", "import { IS_NON_DIMENSIONAL } from '../constants';\nimport options from '../options';\n\nfunction setStyle(style, key, value) {\n\tif (key[0] === '-') {\n\t\tstyle.setProperty(key, value == null ? '' : value);\n\t} else if (value == null) {\n\t\tstyle[key] = '';\n\t} else if (typeof value != 'number' || IS_NON_DIMENSIONAL.test(key)) {\n\t\tstyle[key] = value;\n\t} else {\n\t\tstyle[key] = value + 'px';\n\t}\n}\n\n// A logical clock to solve issues like https://github.com/preactjs/preact/issues/3927.\n// When the DOM performs an event it leaves micro-ticks in between bubbling up which means that\n// an event can trigger on a newly reated DOM-node while the event bubbles up.\n//\n// Originally inspired by Vue\n// (https://github.com/vuejs/core/blob/caeb8a68811a1b0f79/packages/runtime-dom/src/modules/events.ts#L90-L101),\n// but modified to use a logical clock instead of Date.now() in case event handlers get attached\n// and events get dispatched during the same millisecond.\n//\n// The clock is incremented after each new event dispatch. This allows 1 000 000 new events\n// per second for over 280 years before the value reaches Number.MAX_SAFE_INTEGER (2**53 - 1).\nlet eventClock = 0;\n\n/**\n * Set a property value on a DOM node\n * @param {PreactElement} dom The DOM node to modify\n * @param {string} name The name of the property to set\n * @param {*} value The value to set the property to\n * @param {*} oldValue The old value the property had\n * @param {string} namespace Whether or not this DOM node is an SVG node or not\n */\nexport function setProperty(dom, name, value, oldValue, namespace) {\n\tlet useCapture;\n\n\to: if (name === 'style') {\n\t\tif (typeof value == 'string') {\n\t\t\tdom.style.cssText = value;\n\t\t} else {\n\t\t\tif (typeof oldValue == 'string') {\n\t\t\t\tdom.style.cssText = oldValue = '';\n\t\t\t}\n\n\t\t\tif (oldValue) {\n\t\t\t\tfor (name in oldValue) {\n\t\t\t\t\tif (!(value && name in value)) {\n\t\t\t\t\t\tsetStyle(dom.style, name, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (value) {\n\t\t\t\tfor (name in value) {\n\t\t\t\t\tif (!oldValue || value[name] !== oldValue[name]) {\n\t\t\t\t\t\tsetStyle(dom.style, name, value[name]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// Benchmark for comparison: https://esbench.com/bench/574c954bdb965b9a00965ac6\n\telse if (name[0] === 'o' && name[1] === 'n') {\n\t\tuseCapture =\n\t\t\tname !== (name = name.replace(/(PointerCapture)$|Capture$/i, '$1'));\n\n\t\t// Infer correct casing for DOM built-in events:\n\t\tif (\n\t\t\tname.toLowerCase() in dom ||\n\t\t\tname === 'onFocusOut' ||\n\t\t\tname === 'onFocusIn'\n\t\t)\n\t\t\tname = name.toLowerCase().slice(2);\n\t\telse name = name.slice(2);\n\n\t\tif (!dom._listeners) dom._listeners = {};\n\t\tdom._listeners[name + useCapture] = value;\n\n\t\tif (value) {\n\t\t\tif (!oldValue) {\n\t\t\t\tvalue._attached = eventClock;\n\t\t\t\tdom.addEventListener(\n\t\t\t\t\tname,\n\t\t\t\t\tuseCapture ? eventProxyCapture : eventProxy,\n\t\t\t\t\tuseCapture\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tvalue._attached = oldValue._attached;\n\t\t\t}\n\t\t} else {\n\t\t\tdom.removeEventListener(\n\t\t\t\tname,\n\t\t\t\tuseCapture ? eventProxyCapture : eventProxy,\n\t\t\t\tuseCapture\n\t\t\t);\n\t\t}\n\t} else {\n\t\tif (namespace == 'http://www.w3.org/2000/svg') {\n\t\t\t// Normalize incorrect prop usage for SVG:\n\t\t\t// - xlink:href / xlinkHref --> href (xlink:href was removed from SVG and isn't needed)\n\t\t\t// - className --> class\n\t\t\tname = name.replace(/xlink(H|:h)/, 'h').replace(/sName$/, 's');\n\t\t} else if (\n\t\t\tname != 'width' &&\n\t\t\tname != 'height' &&\n\t\t\tname != 'href' &&\n\t\t\tname != 'list' &&\n\t\t\tname != 'form' &&\n\t\t\t// Default value in browsers is `-1` and an empty string is\n\t\t\t// cast to `0` instead\n\t\t\tname != 'tabIndex' &&\n\t\t\tname != 'download' &&\n\t\t\tname != 'rowSpan' &&\n\t\t\tname != 'colSpan' &&\n\t\t\tname != 'role' &&\n\t\t\tname != 'popover' &&\n\t\t\tname in dom\n\t\t) {\n\t\t\ttry {\n\t\t\t\tdom[name] = value == null ? '' : value;\n\t\t\t\t// labelled break is 1b smaller here than a return statement (sorry)\n\t\t\t\tbreak o;\n\t\t\t} catch (e) {}\n\t\t}\n\n\t\t// aria- and data- attributes have no boolean representation.\n\t\t// A `false` value is different from the attribute not being\n\t\t// present, so we can't remove it. For non-boolean aria\n\t\t// attributes we could treat false as a removal, but the\n\t\t// amount of exceptions would cost too many bytes. On top of\n\t\t// that other frameworks generally stringify `false`.\n\n\t\tif (typeof value == 'function') {\n\t\t\t// never serialize functions as attribute values\n\t\t} else if (value != null && (value !== false || name[4] === '-')) {\n\t\t\tdom.setAttribute(name, name == 'popover' && value == true ? '' : value);\n\t\t} else {\n\t\t\tdom.removeAttribute(name);\n\t\t}\n\t}\n}\n\n/**\n * Create an event proxy function.\n * @param {boolean} useCapture Is the event handler for the capture phase.\n * @private\n */\nfunction createEventProxy(useCapture) {\n\t/**\n\t * Proxy an event to hooked event handlers\n\t * @param {PreactEvent} e The event object from the browser\n\t * @private\n\t */\n\treturn function (e) {\n\t\tif (this._listeners) {\n\t\t\tconst eventHandler = this._listeners[e.type + useCapture];\n\t\t\tif (e._dispatched == null) {\n\t\t\t\te._dispatched = eventClock++;\n\n\t\t\t\t// When `e._dispatched` is smaller than the time when the targeted event\n\t\t\t\t// handler was attached we know we have bubbled up to an element that was added\n\t\t\t\t// during patching the DOM.\n\t\t\t} else if (e._dispatched < eventHandler._attached) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn eventHandler(options.event ? options.event(e) : e);\n\t\t}\n\t};\n}\n\nconst eventProxy = createEventProxy(false);\nconst eventProxyCapture = createEventProxy(true);\n", "import { enqueueRender } from './component';\n\nexport let i = 0;\n\nexport function createContext(defaultValue, contextId) {\n\tcontextId = '__cC' + i++;\n\n\tconst context = {\n\t\t_id: contextId,\n\t\t_defaultValue: defaultValue,\n\t\t/** @type {FunctionComponent} */\n\t\tConsumer(props, contextValue) {\n\t\t\t// return props.children(\n\t\t\t// \tcontext[contextId] ? context[contextId].props.value : defaultValue\n\t\t\t// );\n\t\t\treturn props.children(contextValue);\n\t\t},\n\t\t/** @type {FunctionComponent} */\n\t\tProvider(props) {\n\t\t\tif (!this.getChildContext) {\n\t\t\t\t/** @type {Component[] | null} */\n\t\t\t\tlet subs = [];\n\t\t\t\tlet ctx = {};\n\t\t\t\tctx[contextId] = this;\n\n\t\t\t\tthis.getChildContext = () => ctx;\n\n\t\t\t\tthis.componentWillUnmount = () => {\n\t\t\t\t\tsubs = null;\n\t\t\t\t};\n\n\t\t\t\tthis.shouldComponentUpdate = function (_props) {\n\t\t\t\t\tif (this.props.value !== _props.value) {\n\t\t\t\t\t\tsubs.some(c => {\n\t\t\t\t\t\t\tc._force = true;\n\t\t\t\t\t\t\tenqueueRender(c);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tthis.sub = c => {\n\t\t\t\t\tsubs.push(c);\n\t\t\t\t\tlet old = c.componentWillUnmount;\n\t\t\t\t\tc.componentWillUnmount = () => {\n\t\t\t\t\t\tif (subs) {\n\t\t\t\t\t\t\tsubs.splice(subs.indexOf(c), 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (old) old.call(c);\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn props.children;\n\t\t}\n\t};\n\n\t// Devtools needs access to the context object when it\n\t// encounters a Provider. This is necessary to support\n\t// setting `displayName` on the context object instead\n\t// of on the component itself. See:\n\t// https://reactjs.org/docs/context.html#contextdisplayname\n\n\treturn (context.Provider._contextRef = context.Consumer.contextType =\n\t\tcontext);\n}\n", "import { diff, unmount, applyRef } from './index';\nimport { createVNode, Fragment } from '../create-element';\nimport { EMPTY_OBJ, EMPTY_ARR, INSERT_VNODE, MATCHED } from '../constants';\nimport { isArray } from '../util';\nimport { getDomSibling } from '../component';\n\n/**\n * Diff the children of a virtual node\n * @param {PreactElement} parentDom The DOM element whose children are being\n * diffed\n * @param {ComponentChildren[]} renderResult\n * @param {VNode} newParentVNode The new virtual node whose children should be\n * diff'ed against oldParentVNode\n * @param {VNode} oldParentVNode The old virtual node whose children should be\n * diff'ed against newParentVNode\n * @param {object} globalContext The current context object - modified by\n * getChildContext\n * @param {string} namespace Current namespace of the DOM node (HTML, SVG, or MathML)\n * @param {Array<PreactElement>} excessDomChildren\n * @param {Array<Component>} commitQueue List of components which have callbacks\n * to invoke in commitRoot\n * @param {PreactElement} oldDom The current attached DOM element any new dom\n * elements should be placed around. Likely `null` on first render (except when\n * hydrating). Can be a sibling DOM element when diffing Fragments that have\n * siblings. In most cases, it starts out as `oldChildren[0]._dom`.\n * @param {boolean} isHydrating Whether or not we are in hydration\n * @param {any[]} refQueue an array of elements needed to invoke refs\n */\nexport function diffChildren(\n\tparentDom,\n\trenderResult,\n\tnewParentVNode,\n\toldParentVNode,\n\tglobalContext,\n\tnamespace,\n\texcessDomChildren,\n\tcommitQueue,\n\toldDom,\n\tisHydrating,\n\trefQueue\n) {\n\tlet i,\n\t\t/** @type {VNode} */\n\t\toldVNode,\n\t\t/** @type {VNode} */\n\t\tchildVNode,\n\t\t/** @type {PreactElement} */\n\t\tnewDom,\n\t\t/** @type {PreactElement} */\n\t\tfirstChildDom;\n\n\t// This is a compression of oldParentVNode!=null && oldParentVNode != EMPTY_OBJ && oldParentVNode._children || EMPTY_ARR\n\t// as EMPTY_OBJ._children should be `undefined`.\n\t/** @type {VNode[]} */\n\tlet oldChildren = (oldParentVNode && oldParentVNode._children) || EMPTY_ARR;\n\n\tlet newChildrenLength = renderResult.length;\n\n\tnewParentVNode._nextDom = oldDom;\n\tconstructNewChildrenArray(newParentVNode, renderResult, oldChildren);\n\toldDom = newParentVNode._nextDom;\n\n\tfor (i = 0; i < newChildrenLength; i++) {\n\t\tchildVNode = newParentVNode._children[i];\n\t\tif (childVNode == null) continue;\n\n\t\t// At this point, constructNewChildrenArray has assigned _index to be the\n\t\t// matchingIndex for this VNode's oldVNode (or -1 if there is no oldVNode).\n\t\tif (childVNode._index === -1) {\n\t\t\toldVNode = EMPTY_OBJ;\n\t\t} else {\n\t\t\toldVNode = oldChildren[childVNode._index] || EMPTY_OBJ;\n\t\t}\n\n\t\t// Update childVNode._index to its final index\n\t\tchildVNode._index = i;\n\n\t\t// Morph the old element into the new one, but don't append it to the dom yet\n\t\tdiff(\n\t\t\tparentDom,\n\t\t\tchildVNode,\n\t\t\toldVNode,\n\t\t\tglobalContext,\n\t\t\tnamespace,\n\t\t\texcessDomChildren,\n\t\t\tcommitQueue,\n\t\t\toldDom,\n\t\t\tisHydrating,\n\t\t\trefQueue\n\t\t);\n\n\t\t// Adjust DOM nodes\n\t\tnewDom = childVNode._dom;\n\t\tif (childVNode.ref && oldVNode.ref != childVNode.ref) {\n\t\t\tif (oldVNode.ref) {\n\t\t\t\tapplyRef(oldVNode.ref, null, childVNode);\n\t\t\t}\n\t\t\trefQueue.push(\n\t\t\t\tchildVNode.ref,\n\t\t\t\tchildVNode._component || newDom,\n\t\t\t\tchildVNode\n\t\t\t);\n\t\t}\n\n\t\tif (firstChildDom == null && newDom != null) {\n\t\t\tfirstChildDom = newDom;\n\t\t}\n\n\t\tif (\n\t\t\tchildVNode._flags & INSERT_VNODE ||\n\t\t\toldVNode._children === childVNode._children\n\t\t) {\n\t\t\toldDom = insert(childVNode, oldDom, parentDom);\n\t\t} else if (\n\t\t\ttypeof childVNode.type == 'function' &&\n\t\t\tchildVNode._nextDom !== undefined\n\t\t) {\n\t\t\t// Since Fragments or components that return Fragment like VNodes can\n\t\t\t// contain multiple DOM nodes as the same level, continue the diff from\n\t\t\t// the sibling of last DOM child of this child VNode\n\t\t\toldDom = childVNode._nextDom;\n\t\t} else if (newDom) {\n\t\t\toldDom = newDom.nextSibling;\n\t\t}\n\n\t\t// Eagerly cleanup _nextDom. We don't need to persist the value because it\n\t\t// is only used by `diffChildren` to determine where to resume the diff\n\t\t// after diffing Components and Fragments. Once we store it the nextDOM\n\t\t// local var, we can clean up the property. Also prevents us hanging on to\n\t\t// DOM nodes that may have been unmounted.\n\t\tchildVNode._nextDom = undefined;\n\n\t\t// Unset diffing flags\n\t\tchildVNode._flags &= ~(INSERT_VNODE | MATCHED);\n\t}\n\n\t// TODO: With new child diffing algo, consider alt ways to diff Fragments.\n\t// Such as dropping oldDom and moving fragments in place\n\t//\n\t// Because the newParentVNode is Fragment-like, we need to set it's\n\t// _nextDom property to the nextSibling of its last child DOM node.\n\t//\n\t// `oldDom` contains the correct value here because if the last child\n\t// is a Fragment-like, then oldDom has already been set to that child's _nextDom.\n\t// If the last child is a DOM VNode, then oldDom will be set to that DOM\n\t// node's nextSibling.\n\tnewParentVNode._nextDom = oldDom;\n\tnewParentVNode._dom = firstChildDom;\n}\n\n/**\n * @param {VNode} newParentVNode\n * @param {ComponentChildren[]} renderResult\n * @param {VNode[]} oldChildren\n */\nfunction constructNewChildrenArray(newParentVNode, renderResult, oldChildren) {\n\t/** @type {number} */\n\tlet i;\n\t/** @type {VNode} */\n\tlet childVNode;\n\t/** @type {VNode} */\n\tlet oldVNode;\n\n\tconst newChildrenLength = renderResult.length;\n\tlet oldChildrenLength = oldChildren.length,\n\t\tremainingOldChildren = oldChildrenLength;\n\n\tlet skew = 0;\n\n\tnewParentVNode._children = [];\n\tfor (i = 0; i < newChildrenLength; i++) {\n\t\t// @ts-expect-error We are reusing the childVNode variable to hold both the\n\t\t// pre and post normalized childVNode\n\t\tchildVNode = renderResult[i];\n\n\t\tif (\n\t\t\tchildVNode == null ||\n\t\t\ttypeof childVNode == 'boolean' ||\n\t\t\ttypeof childVNode == 'function'\n\t\t) {\n\t\t\tchildVNode = newParentVNode._children[i] = null;\n\t\t\tcontinue;\n\t\t}\n\t\t// If this newVNode is being reused (e.g. <div>{reuse}{reuse}</div>) in the same diff,\n\t\t// or we are rendering a component (e.g. setState) copy the oldVNodes so it can have\n\t\t// it's own DOM & etc. pointers\n\t\telse if (\n\t\t\ttypeof childVNode == 'string' ||\n\t\t\ttypeof childVNode == 'number' ||\n\t\t\t// eslint-disable-next-line valid-typeof\n\t\t\ttypeof childVNode == 'bigint' ||\n\t\t\tchildVNode.constructor == String\n\t\t) {\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tnull,\n\t\t\t\tchildVNode,\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\tnull\n\t\t\t);\n\t\t} else if (isArray(childVNode)) {\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tFragment,\n\t\t\t\t{ children: childVNode },\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\tnull\n\t\t\t);\n\t\t} else if (childVNode.constructor === undefined && childVNode._depth > 0) {\n\t\t\t// VNode is already in use, clone it. This can happen in the following\n\t\t\t// scenario:\n\t\t\t//   const reuse = <div />\n\t\t\t//   <div>{reuse}<span />{reuse}</div>\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tchildVNode.type,\n\t\t\t\tchildVNode.props,\n\t\t\t\tchildVNode.key,\n\t\t\t\tchildVNode.ref ? childVNode.ref : null,\n\t\t\t\tchildVNode._original\n\t\t\t);\n\t\t} else {\n\t\t\tchildVNode = newParentVNode._children[i] = childVNode;\n\t\t}\n\n\t\tconst skewedIndex = i + skew;\n\t\tchildVNode._parent = newParentVNode;\n\t\tchildVNode._depth = newParentVNode._depth + 1;\n\n\t\t// Temporarily store the matchingIndex on the _index property so we can pull\n\t\t// out the oldVNode in diffChildren. We'll override this to the VNode's\n\t\t// final index after using this property to get the oldVNode\n\t\tconst matchingIndex = (childVNode._index = findMatchingIndex(\n\t\t\tchildVNode,\n\t\t\toldChildren,\n\t\t\tskewedIndex,\n\t\t\tremainingOldChildren\n\t\t));\n\n\t\toldVNode = null;\n\t\tif (matchingIndex !== -1) {\n\t\t\toldVNode = oldChildren[matchingIndex];\n\t\t\tremainingOldChildren--;\n\t\t\tif (oldVNode) {\n\t\t\t\toldVNode._flags |= MATCHED;\n\t\t\t}\n\t\t}\n\n\t\t// Here, we define isMounting for the purposes of the skew diffing\n\t\t// algorithm. Nodes that are unsuspending are considered mounting and we detect\n\t\t// this by checking if oldVNode._original === null\n\t\tconst isMounting = oldVNode == null || oldVNode._original === null;\n\n\t\tif (isMounting) {\n\t\t\tif (matchingIndex == -1) {\n\t\t\t\tskew--;\n\t\t\t}\n\n\t\t\t// If we are mounting a DOM VNode, mark it for insertion\n\t\t\tif (typeof childVNode.type != 'function') {\n\t\t\t\tchildVNode._flags |= INSERT_VNODE;\n\t\t\t}\n\t\t} else if (matchingIndex !== skewedIndex) {\n\t\t\t// When we move elements around i.e. [0, 1, 2] --> [1, 0, 2]\n\t\t\t// --> we diff 1, we find it at position 1 while our skewed index is 0 and our skew is 0\n\t\t\t//     we set the skew to 1 as we found an offset.\n\t\t\t// --> we diff 0, we find it at position 0 while our skewed index is at 2 and our skew is 1\n\t\t\t//     this makes us increase the skew again.\n\t\t\t// --> we diff 2, we find it at position 2 while our skewed index is at 4 and our skew is 2\n\t\t\t//\n\t\t\t// this becomes an optimization question where currently we see a 1 element offset as an insertion\n\t\t\t// or deletion i.e. we optimize for [0, 1, 2] --> [9, 0, 1, 2]\n\t\t\t// while a more than 1 offset we see as a swap.\n\t\t\t// We could probably build heuristics for having an optimized course of action here as well, but\n\t\t\t// might go at the cost of some bytes.\n\t\t\t//\n\t\t\t// If we wanted to optimize for i.e. only swaps we'd just do the last two code-branches and have\n\t\t\t// only the first item be a re-scouting and all the others fall in their skewed counter-part.\n\t\t\t// We could also further optimize for swaps\n\t\t\tif (matchingIndex == skewedIndex - 1) {\n\t\t\t\tskew--;\n\t\t\t} else if (matchingIndex == skewedIndex + 1) {\n\t\t\t\tskew++;\n\t\t\t} else {\n\t\t\t\tif (matchingIndex > skewedIndex) {\n\t\t\t\t\tskew--;\n\t\t\t\t} else {\n\t\t\t\t\tskew++;\n\t\t\t\t}\n\n\t\t\t\t// Move this VNode's DOM if the original index (matchingIndex) doesn't\n\t\t\t\t// match the new skew index (i + new skew)\n\t\t\t\t// In the former two branches we know that it matches after skewing\n\t\t\t\tchildVNode._flags |= INSERT_VNODE;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove remaining oldChildren if there are any. Loop forwards so that as we\n\t// unmount DOM from the beginning of the oldChildren, we can adjust oldDom to\n\t// point to the next child, which needs to be the first DOM node that won't be\n\t// unmounted.\n\tif (remainingOldChildren) {\n\t\tfor (i = 0; i < oldChildrenLength; i++) {\n\t\t\toldVNode = oldChildren[i];\n\t\t\tif (oldVNode != null && (oldVNode._flags & MATCHED) === 0) {\n\t\t\t\tif (oldVNode._dom == newParentVNode._nextDom) {\n\t\t\t\t\tnewParentVNode._nextDom = getDomSibling(oldVNode);\n\t\t\t\t}\n\n\t\t\t\tunmount(oldVNode, oldVNode);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * @param {VNode} parentVNode\n * @param {PreactElement} oldDom\n * @param {PreactElement} parentDom\n * @returns {PreactElement}\n */\nfunction insert(parentVNode, oldDom, parentDom) {\n\t// Note: VNodes in nested suspended trees may be missing _children.\n\n\tif (typeof parentVNode.type == 'function') {\n\t\tlet children = parentVNode._children;\n\t\tfor (let i = 0; children && i < children.length; i++) {\n\t\t\tif (children[i]) {\n\t\t\t\t// If we enter this code path on sCU bailout, where we copy\n\t\t\t\t// oldVNode._children to newVNode._children, we need to update the old\n\t\t\t\t// children's _parent pointer to point to the newVNode (parentVNode\n\t\t\t\t// here).\n\t\t\t\tchildren[i]._parent = parentVNode;\n\t\t\t\toldDom = insert(children[i], oldDom, parentDom);\n\t\t\t}\n\t\t}\n\n\t\treturn oldDom;\n\t} else if (parentVNode._dom != oldDom) {\n\t\tif (oldDom && parentVNode.type && !parentDom.contains(oldDom)) {\n\t\t\toldDom = getDomSibling(parentVNode);\n\t\t}\n\t\tparentDom.insertBefore(parentVNode._dom, oldDom || null);\n\t\toldDom = parentVNode._dom;\n\t}\n\n\tdo {\n\t\toldDom = oldDom && oldDom.nextSibling;\n\t} while (oldDom != null && oldDom.nodeType === 8);\n\n\treturn oldDom;\n}\n\n/**\n * Flatten and loop through the children of a virtual node\n * @param {ComponentChildren} children The unflattened children of a virtual\n * node\n * @returns {VNode[]}\n */\nexport function toChildArray(children, out) {\n\tout = out || [];\n\tif (children == null || typeof children == 'boolean') {\n\t} else if (isArray(children)) {\n\t\tchildren.some(child => {\n\t\t\ttoChildArray(child, out);\n\t\t});\n\t} else {\n\t\tout.push(children);\n\t}\n\treturn out;\n}\n\n/**\n * @param {VNode} childVNode\n * @param {VNode[]} oldChildren\n * @param {number} skewedIndex\n * @param {number} remainingOldChildren\n * @returns {number}\n */\nfunction findMatchingIndex(\n\tchildVNode,\n\toldChildren,\n\tskewedIndex,\n\tremainingOldChildren\n) {\n\tconst key = childVNode.key;\n\tconst type = childVNode.type;\n\tlet x = skewedIndex - 1;\n\tlet y = skewedIndex + 1;\n\tlet oldVNode = oldChildren[skewedIndex];\n\n\t// We only need to perform a search if there are more children\n\t// (remainingOldChildren) to search. However, if the oldVNode we just looked\n\t// at skewedIndex was not already used in this diff, then there must be at\n\t// least 1 other (so greater than 1) remainingOldChildren to attempt to match\n\t// against. So the following condition checks that ensuring\n\t// remainingOldChildren > 1 if the oldVNode is not already used/matched. Else\n\t// if the oldVNode was null or matched, then there could needs to be at least\n\t// 1 (aka `remainingOldChildren > 0`) children to find and compare against.\n\tlet shouldSearch =\n\t\tremainingOldChildren >\n\t\t(oldVNode != null && (oldVNode._flags & MATCHED) === 0 ? 1 : 0);\n\n\tif (\n\t\toldVNode === null ||\n\t\t(oldVNode &&\n\t\t\tkey == oldVNode.key &&\n\t\t\ttype === oldVNode.type &&\n\t\t\t(oldVNode._flags & MATCHED) === 0)\n\t) {\n\t\treturn skewedIndex;\n\t} else if (shouldSearch) {\n\t\twhile (x >= 0 || y < oldChildren.length) {\n\t\t\tif (x >= 0) {\n\t\t\t\toldVNode = oldChildren[x];\n\t\t\t\tif (\n\t\t\t\t\toldVNode &&\n\t\t\t\t\t(oldVNode._flags & MATCHED) === 0 &&\n\t\t\t\t\tkey == oldVNode.key &&\n\t\t\t\t\ttype === oldVNode.type\n\t\t\t\t) {\n\t\t\t\t\treturn x;\n\t\t\t\t}\n\t\t\t\tx--;\n\t\t\t}\n\n\t\t\tif (y < oldChildren.length) {\n\t\t\t\toldVNode = oldChildren[y];\n\t\t\t\tif (\n\t\t\t\t\toldVNode &&\n\t\t\t\t\t(oldVNode._flags & MATCHED) === 0 &&\n\t\t\t\t\tkey == oldVNode.key &&\n\t\t\t\t\ttype === oldVNode.type\n\t\t\t\t) {\n\t\t\t\t\treturn y;\n\t\t\t\t}\n\t\t\t\ty++;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn -1;\n}\n", "import {\n\tEMPTY_OBJ,\n\tMODE_HYDRATE,\n\tMODE_SUSPENDED,\n\tRESET_MODE\n} from '../constants';\nimport { BaseComponent, getDomSibling } from '../component';\nimport { Fragment } from '../create-element';\nimport { diffChildren } from './children';\nimport { setProperty } from './props';\nimport { assign, isArray, removeNode, slice } from '../util';\nimport options from '../options';\n\n/**\n * Diff two virtual nodes and apply proper changes to the DOM\n * @param {PreactElement} parentDom The parent of the DOM element\n * @param {VNode} newVNode The new virtual node\n * @param {VNode} oldVNode The old virtual node\n * @param {object} globalContext The current context object. Modified by\n * getChildContext\n * @param {string} namespace Current namespace of the DOM node (HTML, SVG, or MathML)\n * @param {Array<PreactElement>} excessDomChildren\n * @param {Array<Component>} commitQueue List of components which have callbacks\n * to invoke in commitRoot\n * @param {PreactElement} oldDom The current attached DOM element any new dom\n * elements should be placed around. Likely `null` on first render (except when\n * hydrating). Can be a sibling DOM element when diffing Fragments that have\n * siblings. In most cases, it starts out as `oldChildren[0]._dom`.\n * @param {boolean} isHydrating Whether or not we are in hydration\n * @param {any[]} refQueue an array of elements needed to invoke refs\n */\nexport function diff(\n\tparentDom,\n\tnewVNode,\n\toldVNode,\n\tglobalContext,\n\tnamespace,\n\texcessDomChildren,\n\tcommitQueue,\n\toldDom,\n\tisHydrating,\n\trefQueue\n) {\n\t/** @type {any} */\n\tlet tmp,\n\t\tnewType = newVNode.type;\n\n\t// When passing through createElement it assigns the object\n\t// constructor as undefined. This to prevent JSON-injection.\n\tif (newVNode.constructor !== undefined) return null;\n\n\t// If the previous diff bailed out, resume creating/hydrating.\n\tif (oldVNode._flags & MODE_SUSPENDED) {\n\t\tisHydrating = !!(oldVNode._flags & MODE_HYDRATE);\n\t\toldDom = newVNode._dom = oldVNode._dom;\n\t\texcessDomChildren = [oldDom];\n\t}\n\n\tif ((tmp = options._diff)) tmp(newVNode);\n\n\touter: if (typeof newType == 'function') {\n\t\ttry {\n\t\t\tlet c, isNew, oldProps, oldState, snapshot, clearProcessingException;\n\t\t\tlet newProps = newVNode.props;\n\t\t\tconst isClassComponent =\n\t\t\t\t'prototype' in newType && newType.prototype.render;\n\n\t\t\t// Necessary for createContext api. Setting this property will pass\n\t\t\t// the context value as `this.context` just for this component.\n\t\t\ttmp = newType.contextType;\n\t\t\tlet provider = tmp && globalContext[tmp._id];\n\t\t\tlet componentContext = tmp\n\t\t\t\t? provider\n\t\t\t\t\t? provider.props.value\n\t\t\t\t\t: tmp._defaultValue\n\t\t\t\t: globalContext;\n\n\t\t\t// Get component and set it to `c`\n\t\t\tif (oldVNode._component) {\n\t\t\t\tc = newVNode._component = oldVNode._component;\n\t\t\t\tclearProcessingException = c._processingException = c._pendingError;\n\t\t\t} else {\n\t\t\t\t// Instantiate the new component\n\t\t\t\tif (isClassComponent) {\n\t\t\t\t\t// @ts-expect-error The check above verifies that newType is suppose to be constructed\n\t\t\t\t\tnewVNode._component = c = new newType(newProps, componentContext); // eslint-disable-line new-cap\n\t\t\t\t} else {\n\t\t\t\t\t// @ts-expect-error Trust me, Component implements the interface we want\n\t\t\t\t\tnewVNode._component = c = new BaseComponent(\n\t\t\t\t\t\tnewProps,\n\t\t\t\t\t\tcomponentContext\n\t\t\t\t\t);\n\t\t\t\t\tc.constructor = newType;\n\t\t\t\t\tc.render = doRender;\n\t\t\t\t}\n\t\t\t\tif (provider) provider.sub(c);\n\n\t\t\t\tc.props = newProps;\n\t\t\t\tif (!c.state) c.state = {};\n\t\t\t\tc.context = componentContext;\n\t\t\t\tc._globalContext = globalContext;\n\t\t\t\tisNew = c._dirty = true;\n\t\t\t\tc._renderCallbacks = [];\n\t\t\t\tc._stateCallbacks = [];\n\t\t\t}\n\n\t\t\t// Invoke getDerivedStateFromProps\n\t\t\tif (isClassComponent && c._nextState == null) {\n\t\t\t\tc._nextState = c.state;\n\t\t\t}\n\n\t\t\tif (isClassComponent && newType.getDerivedStateFromProps != null) {\n\t\t\t\tif (c._nextState == c.state) {\n\t\t\t\t\tc._nextState = assign({}, c._nextState);\n\t\t\t\t}\n\n\t\t\t\tassign(\n\t\t\t\t\tc._nextState,\n\t\t\t\t\tnewType.getDerivedStateFromProps(newProps, c._nextState)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\toldProps = c.props;\n\t\t\toldState = c.state;\n\t\t\tc._vnode = newVNode;\n\n\t\t\t// Invoke pre-render lifecycle methods\n\t\t\tif (isNew) {\n\t\t\t\tif (\n\t\t\t\t\tisClassComponent &&\n\t\t\t\t\tnewType.getDerivedStateFromProps == null &&\n\t\t\t\t\tc.componentWillMount != null\n\t\t\t\t) {\n\t\t\t\t\tc.componentWillMount();\n\t\t\t\t}\n\n\t\t\t\tif (isClassComponent && c.componentDidMount != null) {\n\t\t\t\t\tc._renderCallbacks.push(c.componentDidMount);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (\n\t\t\t\t\tisClassComponent &&\n\t\t\t\t\tnewType.getDerivedStateFromProps == null &&\n\t\t\t\t\tnewProps !== oldProps &&\n\t\t\t\t\tc.componentWillReceiveProps != null\n\t\t\t\t) {\n\t\t\t\t\tc.componentWillReceiveProps(newProps, componentContext);\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t!c._force &&\n\t\t\t\t\t((c.shouldComponentUpdate != null &&\n\t\t\t\t\t\tc.shouldComponentUpdate(\n\t\t\t\t\t\t\tnewProps,\n\t\t\t\t\t\t\tc._nextState,\n\t\t\t\t\t\t\tcomponentContext\n\t\t\t\t\t\t) === false) ||\n\t\t\t\t\t\tnewVNode._original === oldVNode._original)\n\t\t\t\t) {\n\t\t\t\t\t// More info about this here: https://gist.github.com/JoviDeCroock/bec5f2ce93544d2e6070ef8e0036e4e8\n\t\t\t\t\tif (newVNode._original !== oldVNode._original) {\n\t\t\t\t\t\t// When we are dealing with a bail because of sCU we have to update\n\t\t\t\t\t\t// the props, state and dirty-state.\n\t\t\t\t\t\t// when we are dealing with strict-equality we don't as the child could still\n\t\t\t\t\t\t// be dirtied see #3883\n\t\t\t\t\t\tc.props = newProps;\n\t\t\t\t\t\tc.state = c._nextState;\n\t\t\t\t\t\tc._dirty = false;\n\t\t\t\t\t}\n\n\t\t\t\t\tnewVNode._dom = oldVNode._dom;\n\t\t\t\t\tnewVNode._children = oldVNode._children;\n\t\t\t\t\tnewVNode._children.some(vnode => {\n\t\t\t\t\t\tif (vnode) vnode._parent = newVNode;\n\t\t\t\t\t});\n\n\t\t\t\t\tfor (let i = 0; i < c._stateCallbacks.length; i++) {\n\t\t\t\t\t\tc._renderCallbacks.push(c._stateCallbacks[i]);\n\t\t\t\t\t}\n\t\t\t\t\tc._stateCallbacks = [];\n\n\t\t\t\t\tif (c._renderCallbacks.length) {\n\t\t\t\t\t\tcommitQueue.push(c);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\n\t\t\t\tif (c.componentWillUpdate != null) {\n\t\t\t\t\tc.componentWillUpdate(newProps, c._nextState, componentContext);\n\t\t\t\t}\n\n\t\t\t\tif (isClassComponent && c.componentDidUpdate != null) {\n\t\t\t\t\tc._renderCallbacks.push(() => {\n\t\t\t\t\t\tc.componentDidUpdate(oldProps, oldState, snapshot);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tc.context = componentContext;\n\t\t\tc.props = newProps;\n\t\t\tc._parentDom = parentDom;\n\t\t\tc._force = false;\n\n\t\t\tlet renderHook = options._render,\n\t\t\t\tcount = 0;\n\t\t\tif (isClassComponent) {\n\t\t\t\tc.state = c._nextState;\n\t\t\t\tc._dirty = false;\n\n\t\t\t\tif (renderHook) renderHook(newVNode);\n\n\t\t\t\ttmp = c.render(c.props, c.state, c.context);\n\n\t\t\t\tfor (let i = 0; i < c._stateCallbacks.length; i++) {\n\t\t\t\t\tc._renderCallbacks.push(c._stateCallbacks[i]);\n\t\t\t\t}\n\t\t\t\tc._stateCallbacks = [];\n\t\t\t} else {\n\t\t\t\tdo {\n\t\t\t\t\tc._dirty = false;\n\t\t\t\t\tif (renderHook) renderHook(newVNode);\n\n\t\t\t\t\ttmp = c.render(c.props, c.state, c.context);\n\n\t\t\t\t\t// Handle setState called in render, see #2553\n\t\t\t\t\tc.state = c._nextState;\n\t\t\t\t} while (c._dirty && ++count < 25);\n\t\t\t}\n\n\t\t\t// Handle setState called in render, see #2553\n\t\t\tc.state = c._nextState;\n\n\t\t\tif (c.getChildContext != null) {\n\t\t\t\tglobalContext = assign(assign({}, globalContext), c.getChildContext());\n\t\t\t}\n\n\t\t\tif (isClassComponent && !isNew && c.getSnapshotBeforeUpdate != null) {\n\t\t\t\tsnapshot = c.getSnapshotBeforeUpdate(oldProps, oldState);\n\t\t\t}\n\n\t\t\tlet isTopLevelFragment =\n\t\t\t\ttmp != null && tmp.type === Fragment && tmp.key == null;\n\t\t\tlet renderResult = isTopLevelFragment ? tmp.props.children : tmp;\n\n\t\t\tdiffChildren(\n\t\t\t\tparentDom,\n\t\t\t\tisArray(renderResult) ? renderResult : [renderResult],\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tnamespace,\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\toldDom,\n\t\t\t\tisHydrating,\n\t\t\t\trefQueue\n\t\t\t);\n\n\t\t\tc.base = newVNode._dom;\n\n\t\t\t// We successfully rendered this VNode, unset any stored hydration/bailout state:\n\t\t\tnewVNode._flags &= RESET_MODE;\n\n\t\t\tif (c._renderCallbacks.length) {\n\t\t\t\tcommitQueue.push(c);\n\t\t\t}\n\n\t\t\tif (clearProcessingException) {\n\t\t\t\tc._pendingError = c._processingException = null;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tnewVNode._original = null;\n\t\t\t// if hydrating or creating initial tree, bailout preserves DOM:\n\t\t\tif (isHydrating || excessDomChildren != null) {\n\t\t\t\tnewVNode._flags |= isHydrating\n\t\t\t\t\t? MODE_HYDRATE | MODE_SUSPENDED\n\t\t\t\t\t: MODE_HYDRATE;\n\n\t\t\t\twhile (oldDom && oldDom.nodeType === 8 && oldDom.nextSibling) {\n\t\t\t\t\toldDom = oldDom.nextSibling;\n\t\t\t\t}\n\t\t\t\texcessDomChildren[excessDomChildren.indexOf(oldDom)] = null;\n\t\t\t\tnewVNode._dom = oldDom;\n\t\t\t} else {\n\t\t\t\tnewVNode._dom = oldVNode._dom;\n\t\t\t\tnewVNode._children = oldVNode._children;\n\t\t\t}\n\t\t\toptions._catchError(e, newVNode, oldVNode);\n\t\t}\n\t} else if (\n\t\texcessDomChildren == null &&\n\t\tnewVNode._original === oldVNode._original\n\t) {\n\t\tnewVNode._children = oldVNode._children;\n\t\tnewVNode._dom = oldVNode._dom;\n\t} else {\n\t\tnewVNode._dom = diffElementNodes(\n\t\t\toldVNode._dom,\n\t\t\tnewVNode,\n\t\t\toldVNode,\n\t\t\tglobalContext,\n\t\t\tnamespace,\n\t\t\texcessDomChildren,\n\t\t\tcommitQueue,\n\t\t\tisHydrating,\n\t\t\trefQueue\n\t\t);\n\t}\n\n\tif ((tmp = options.diffed)) tmp(newVNode);\n}\n\n/**\n * @param {Array<Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {VNode} root\n */\nexport function commitRoot(commitQueue, root, refQueue) {\n\troot._nextDom = undefined;\n\n\tfor (let i = 0; i < refQueue.length; i++) {\n\t\tapplyRef(refQueue[i], refQueue[++i], refQueue[++i]);\n\t}\n\n\tif (options._commit) options._commit(root, commitQueue);\n\n\tcommitQueue.some(c => {\n\t\ttry {\n\t\t\t// @ts-expect-error Reuse the commitQueue variable here so the type changes\n\t\t\tcommitQueue = c._renderCallbacks;\n\t\t\tc._renderCallbacks = [];\n\t\t\tcommitQueue.some(cb => {\n\t\t\t\t// @ts-expect-error See above comment on commitQueue\n\t\t\t\tcb.call(c);\n\t\t\t});\n\t\t} catch (e) {\n\t\t\toptions._catchError(e, c._vnode);\n\t\t}\n\t});\n}\n\n/**\n * Diff two virtual nodes representing DOM element\n * @param {PreactElement} dom The DOM element representing the virtual nodes\n * being diffed\n * @param {VNode} newVNode The new virtual node\n * @param {VNode} oldVNode The old virtual node\n * @param {object} globalContext The current context object\n * @param {string} namespace Current namespace of the DOM node (HTML, SVG, or MathML)\n * @param {Array<PreactElement>} excessDomChildren\n * @param {Array<Component>} commitQueue List of components which have callbacks\n * to invoke in commitRoot\n * @param {boolean} isHydrating Whether or not we are in hydration\n * @param {any[]} refQueue an array of elements needed to invoke refs\n * @returns {PreactElement}\n */\nfunction diffElementNodes(\n\tdom,\n\tnewVNode,\n\toldVNode,\n\tglobalContext,\n\tnamespace,\n\texcessDomChildren,\n\tcommitQueue,\n\tisHydrating,\n\trefQueue\n) {\n\tlet oldProps = oldVNode.props;\n\tlet newProps = newVNode.props;\n\tlet nodeType = /** @type {string} */ (newVNode.type);\n\t/** @type {any} */\n\tlet i;\n\t/** @type {{ __html?: string }} */\n\tlet newHtml;\n\t/** @type {{ __html?: string }} */\n\tlet oldHtml;\n\t/** @type {ComponentChildren} */\n\tlet newChildren;\n\tlet value;\n\tlet inputValue;\n\tlet checked;\n\n\t// Tracks entering and exiting namespaces when descending through the tree.\n\tif (nodeType === 'svg') namespace = 'http://www.w3.org/2000/svg';\n\telse if (nodeType === 'math')\n\t\tnamespace = 'http://www.w3.org/1998/Math/MathML';\n\telse if (!namespace) namespace = 'http://www.w3.org/1999/xhtml';\n\n\tif (excessDomChildren != null) {\n\t\tfor (i = 0; i < excessDomChildren.length; i++) {\n\t\t\tvalue = excessDomChildren[i];\n\n\t\t\t// if newVNode matches an element in excessDomChildren or the `dom`\n\t\t\t// argument matches an element in excessDomChildren, remove it from\n\t\t\t// excessDomChildren so it isn't later removed in diffChildren\n\t\t\tif (\n\t\t\t\tvalue &&\n\t\t\t\t'setAttribute' in value === !!nodeType &&\n\t\t\t\t(nodeType ? value.localName === nodeType : value.nodeType === 3)\n\t\t\t) {\n\t\t\t\tdom = value;\n\t\t\t\texcessDomChildren[i] = null;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (dom == null) {\n\t\tif (nodeType === null) {\n\t\t\treturn document.createTextNode(newProps);\n\t\t}\n\n\t\tdom = document.createElementNS(\n\t\t\tnamespace,\n\t\t\tnodeType,\n\t\t\tnewProps.is && newProps\n\t\t);\n\n\t\t// we are creating a new node, so we can assume this is a new subtree (in\n\t\t// case we are hydrating), this deopts the hydrate\n\t\tif (isHydrating) {\n\t\t\tif (options._hydrationMismatch)\n\t\t\t\toptions._hydrationMismatch(newVNode, excessDomChildren);\n\t\t\tisHydrating = false;\n\t\t}\n\t\t// we created a new parent, so none of the previously attached children can be reused:\n\t\texcessDomChildren = null;\n\t}\n\n\tif (nodeType === null) {\n\t\t// During hydration, we still have to split merged text from SSR'd HTML.\n\t\tif (oldProps !== newProps && (!isHydrating || dom.data !== newProps)) {\n\t\t\tdom.data = newProps;\n\t\t}\n\t} else {\n\t\t// If excessDomChildren was not null, repopulate it with the current element's children:\n\t\texcessDomChildren = excessDomChildren && slice.call(dom.childNodes);\n\n\t\toldProps = oldVNode.props || EMPTY_OBJ;\n\n\t\t// If we are in a situation where we are not hydrating but are using\n\t\t// existing DOM (e.g. replaceNode) we should read the existing DOM\n\t\t// attributes to diff them\n\t\tif (!isHydrating && excessDomChildren != null) {\n\t\t\toldProps = {};\n\t\t\tfor (i = 0; i < dom.attributes.length; i++) {\n\t\t\t\tvalue = dom.attributes[i];\n\t\t\t\toldProps[value.name] = value.value;\n\t\t\t}\n\t\t}\n\n\t\tfor (i in oldProps) {\n\t\t\tvalue = oldProps[i];\n\t\t\tif (i == 'children') {\n\t\t\t} else if (i == 'dangerouslySetInnerHTML') {\n\t\t\t\toldHtml = value;\n\t\t\t} else if (!(i in newProps)) {\n\t\t\t\tif (\n\t\t\t\t\t(i == 'value' && 'defaultValue' in newProps) ||\n\t\t\t\t\t(i == 'checked' && 'defaultChecked' in newProps)\n\t\t\t\t) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tsetProperty(dom, i, null, value, namespace);\n\t\t\t}\n\t\t}\n\n\t\t// During hydration, props are not diffed at all (including dangerouslySetInnerHTML)\n\t\t// @TODO we should warn in debug mode when props don't match here.\n\t\tfor (i in newProps) {\n\t\t\tvalue = newProps[i];\n\t\t\tif (i == 'children') {\n\t\t\t\tnewChildren = value;\n\t\t\t} else if (i == 'dangerouslySetInnerHTML') {\n\t\t\t\tnewHtml = value;\n\t\t\t} else if (i == 'value') {\n\t\t\t\tinputValue = value;\n\t\t\t} else if (i == 'checked') {\n\t\t\t\tchecked = value;\n\t\t\t} else if (\n\t\t\t\t(!isHydrating || typeof value == 'function') &&\n\t\t\t\toldProps[i] !== value\n\t\t\t) {\n\t\t\t\tsetProperty(dom, i, value, oldProps[i], namespace);\n\t\t\t}\n\t\t}\n\n\t\t// If the new vnode didn't have dangerouslySetInnerHTML, diff its children\n\t\tif (newHtml) {\n\t\t\t// Avoid re-applying the same '__html' if it did not changed between re-render\n\t\t\tif (\n\t\t\t\t!isHydrating &&\n\t\t\t\t(!oldHtml ||\n\t\t\t\t\t(newHtml.__html !== oldHtml.__html &&\n\t\t\t\t\t\tnewHtml.__html !== dom.innerHTML))\n\t\t\t) {\n\t\t\t\tdom.innerHTML = newHtml.__html;\n\t\t\t}\n\n\t\t\tnewVNode._children = [];\n\t\t} else {\n\t\t\tif (oldHtml) dom.innerHTML = '';\n\n\t\t\tdiffChildren(\n\t\t\t\tdom,\n\t\t\t\tisArray(newChildren) ? newChildren : [newChildren],\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tnodeType === 'foreignObject'\n\t\t\t\t\t? 'http://www.w3.org/1999/xhtml'\n\t\t\t\t\t: namespace,\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\texcessDomChildren\n\t\t\t\t\t? excessDomChildren[0]\n\t\t\t\t\t: oldVNode._children && getDomSibling(oldVNode, 0),\n\t\t\t\tisHydrating,\n\t\t\t\trefQueue\n\t\t\t);\n\n\t\t\t// Remove children that are not part of any vnode.\n\t\t\tif (excessDomChildren != null) {\n\t\t\t\tfor (i = excessDomChildren.length; i--; ) {\n\t\t\t\t\tremoveNode(excessDomChildren[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// As above, don't diff props during hydration\n\t\tif (!isHydrating) {\n\t\t\ti = 'value';\n\t\t\tif (nodeType === 'progress' && inputValue == null) {\n\t\t\t\tdom.removeAttribute('value');\n\t\t\t} else if (\n\t\t\t\tinputValue !== undefined &&\n\t\t\t\t// #2756 For the <progress>-element the initial value is 0,\n\t\t\t\t// despite the attribute not being present. When the attribute\n\t\t\t\t// is missing the progress bar is treated as indeterminate.\n\t\t\t\t// To fix that we'll always update it when it is 0 for progress elements\n\t\t\t\t(inputValue !== dom[i] ||\n\t\t\t\t\t(nodeType === 'progress' && !inputValue) ||\n\t\t\t\t\t// This is only for IE 11 to fix <select> value not being updated.\n\t\t\t\t\t// To avoid a stale select value we need to set the option.value\n\t\t\t\t\t// again, which triggers IE11 to re-evaluate the select value\n\t\t\t\t\t(nodeType === 'option' && inputValue !== oldProps[i]))\n\t\t\t) {\n\t\t\t\tsetProperty(dom, i, inputValue, oldProps[i], namespace);\n\t\t\t}\n\n\t\t\ti = 'checked';\n\t\t\tif (checked !== undefined && checked !== dom[i]) {\n\t\t\t\tsetProperty(dom, i, checked, oldProps[i], namespace);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn dom;\n}\n\n/**\n * Invoke or update a ref, depending on whether it is a function or object ref.\n * @param {Ref<any> & { _unmount?: unknown }} ref\n * @param {any} value\n * @param {VNode} vnode\n */\nexport function applyRef(ref, value, vnode) {\n\ttry {\n\t\tif (typeof ref == 'function') {\n\t\t\tlet hasRefUnmount = typeof ref._unmount == 'function';\n\t\t\tif (hasRefUnmount) {\n\t\t\t\t// @ts-ignore TS doesn't like moving narrowing checks into variables\n\t\t\t\tref._unmount();\n\t\t\t}\n\n\t\t\tif (!hasRefUnmount || value != null) {\n\t\t\t\t// Store the cleanup function on the function\n\t\t\t\t// instance object itself to avoid shape\n\t\t\t\t// transitioning vnode\n\t\t\t\tref._unmount = ref(value);\n\t\t\t}\n\t\t} else ref.current = value;\n\t} catch (e) {\n\t\toptions._catchError(e, vnode);\n\t}\n}\n\n/**\n * Unmount a virtual node from the tree and apply DOM changes\n * @param {VNode} vnode The virtual node to unmount\n * @param {VNode} parentVNode The parent of the VNode that initiated the unmount\n * @param {boolean} [skipRemove] Flag that indicates that a parent node of the\n * current element is already detached from the DOM.\n */\nexport function unmount(vnode, parentVNode, skipRemove) {\n\tlet r;\n\tif (options.unmount) options.unmount(vnode);\n\n\tif ((r = vnode.ref)) {\n\t\tif (!r.current || r.current === vnode._dom) {\n\t\t\tapplyRef(r, null, parentVNode);\n\t\t}\n\t}\n\n\tif ((r = vnode._component) != null) {\n\t\tif (r.componentWillUnmount) {\n\t\t\ttry {\n\t\t\t\tr.componentWillUnmount();\n\t\t\t} catch (e) {\n\t\t\t\toptions._catchError(e, parentVNode);\n\t\t\t}\n\t\t}\n\n\t\tr.base = r._parentDom = null;\n\t}\n\n\tif ((r = vnode._children)) {\n\t\tfor (let i = 0; i < r.length; i++) {\n\t\t\tif (r[i]) {\n\t\t\t\tunmount(\n\t\t\t\t\tr[i],\n\t\t\t\t\tparentVNode,\n\t\t\t\t\tskipRemove || typeof vnode.type != 'function'\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!skipRemove) {\n\t\tremoveNode(vnode._dom);\n\t}\n\n\t// Must be set to `undefined` to properly clean up `_nextDom`\n\t// for which `null` is a valid value. See comment in `create-element.js`\n\tvnode._component = vnode._parent = vnode._dom = vnode._nextDom = undefined;\n}\n\n/** The `.render()` method for a PFC backing instance. */\nfunction doRender(props, state, context) {\n\treturn this.constructor(props, context);\n}\n", "import { EMPTY_OBJ } from './constants';\nimport { commitRoot, diff } from './diff/index';\nimport { createElement, Fragment } from './create-element';\nimport options from './options';\nimport { slice } from './util';\n\n/**\n * Render a Preact virtual node into a DOM element\n * @param {ComponentChild} vnode The virtual node to render\n * @param {PreactElement} parentDom The DOM element to render into\n * @param {PreactElement | object} [replaceNode] Optional: Attempt to re-use an\n * existing DOM tree rooted at `replaceNode`\n */\nexport function render(vnode, parentDom, replaceNode) {\n\tif (options._root) options._root(vnode, parentDom);\n\n\t// We abuse the `replaceNode` parameter in `hydrate()` to signal if we are in\n\t// hydration mode or not by passing the `hydrate` function instead of a DOM\n\t// element..\n\tlet isHydrating = typeof replaceNode == 'function';\n\n\t// To be able to support calling `render()` multiple times on the same\n\t// DOM node, we need to obtain a reference to the previous tree. We do\n\t// this by assigning a new `_children` property to DOM nodes which points\n\t// to the last rendered tree. By default this property is not present, which\n\t// means that we are mounting a new tree for the first time.\n\tlet oldVNode = isHydrating\n\t\t? null\n\t\t: (replaceNode && replaceNode._children) || parentDom._children;\n\n\tvnode = ((!isHydrating && replaceNode) || parentDom)._children =\n\t\tcreateElement(Fragment, null, [vnode]);\n\n\t// List of effects that need to be called after diffing.\n\tlet commitQueue = [],\n\t\trefQueue = [];\n\tdiff(\n\t\tparentDom,\n\t\t// Determine the new vnode tree and store it on the DOM element on\n\t\t// our custom `_children` property.\n\t\tvnode,\n\t\toldVNode || EMPTY_OBJ,\n\t\tEMPTY_OBJ,\n\t\tparentDom.namespaceURI,\n\t\t!isHydrating && replaceNode\n\t\t\t? [replaceNode]\n\t\t\t: oldVNode\n\t\t\t\t? null\n\t\t\t\t: parentDom.firstChild\n\t\t\t\t\t? slice.call(parentDom.childNodes)\n\t\t\t\t\t: null,\n\t\tcommitQueue,\n\t\t!isHydrating && replaceNode\n\t\t\t? replaceNode\n\t\t\t: oldVNode\n\t\t\t\t? oldVNode._dom\n\t\t\t\t: parentDom.firstChild,\n\t\tisHydrating,\n\t\trefQueue\n\t);\n\n\t// Flush all queued effects\n\tcommitRoot(commitQueue, vnode, refQueue);\n}\n\n/**\n * Update an existing DOM element with data from a Preact virtual node\n * @param {ComponentChild} vnode The virtual node to render\n * @param {PreactElement} parentDom The DOM element to update\n */\nexport function hydrate(vnode, parentDom) {\n\trender(vnode, parentDom, hydrate);\n}\n", "import { assign, slice } from './util';\nimport { createVNode } from './create-element';\n\n/**\n * Clones the given VNode, optionally adding attributes/props and replacing its\n * children.\n * @param {VNode} vnode The virtual DOM element to clone\n * @param {object} props Attributes/props to add when cloning\n * @param {Array<ComponentChildren>} rest Any additional arguments will be used\n * as replacement children.\n * @returns {VNode}\n */\nexport function cloneElement(vnode, props, children) {\n\tlet normalizedProps = assign({}, vnode.props),\n\t\tkey,\n\t\tref,\n\t\ti;\n\n\tlet defaultProps;\n\n\tif (vnode.type && vnode.type.defaultProps) {\n\t\tdefaultProps = vnode.type.defaultProps;\n\t}\n\n\tfor (i in props) {\n\t\tif (i == 'key') key = props[i];\n\t\telse if (i == 'ref') ref = props[i];\n\t\telse if (props[i] === undefined && defaultProps !== undefined) {\n\t\t\tnormalizedProps[i] = defaultProps[i];\n\t\t} else {\n\t\t\tnormalizedProps[i] = props[i];\n\t\t}\n\t}\n\n\tif (arguments.length > 2) {\n\t\tnormalizedProps.children =\n\t\t\targuments.length > 3 ? slice.call(arguments, 2) : children;\n\t}\n\n\treturn createVNode(\n\t\tvnode.type,\n\t\tnormalizedProps,\n\t\tkey || vnode.key,\n\t\tref || vnode.ref,\n\t\tnull\n\t);\n}\n", "/**\n * Find the closest error boundary to a thrown error and call it\n * @param {object} error The thrown value\n * @param {VNode} vnode The vnode that threw the error that was caught (except\n * for unmounting when this parameter is the highest parent that was being\n * unmounted)\n * @param {VNode} [oldVNode]\n * @param {ErrorInfo} [errorInfo]\n */\nexport function _catchError(error, vnode, oldVNode, errorInfo) {\n\t/** @type {Component} */\n\tlet component,\n\t\t/** @type {ComponentType} */\n\t\tctor,\n\t\t/** @type {boolean} */\n\t\thandled;\n\n\tfor (; (vnode = vnode._parent); ) {\n\t\tif ((component = vnode._component) && !component._processingException) {\n\t\t\ttry {\n\t\t\t\tctor = component.constructor;\n\n\t\t\t\tif (ctor && ctor.getDerivedStateFromError != null) {\n\t\t\t\t\tcomponent.setState(ctor.getDerivedStateFromError(error));\n\t\t\t\t\thandled = component._dirty;\n\t\t\t\t}\n\n\t\t\t\tif (component.componentDidCatch != null) {\n\t\t\t\t\tcomponent.componentDidCatch(error, errorInfo || {});\n\t\t\t\t\thandled = component._dirty;\n\t\t\t\t}\n\n\t\t\t\t// This is an error boundary. Mark it as having bailed out, and whether it was mid-hydration.\n\t\t\t\tif (handled) {\n\t\t\t\t\treturn (component._pendingError = component);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\terror = e;\n\t\t\t}\n\t\t}\n\t}\n\n\tthrow error;\n}\n", "const ENCODED_ENTITIES = /[\"&<]/;\n\n/** @param {string} str */\nexport function encodeEntities(str) {\n\t// Skip all work for strings with no entities needing encoding:\n\tif (str.length === 0 || ENCODED_ENTITIES.test(str) === false) return str;\n\n\tlet last = 0,\n\t\ti = 0,\n\t\tout = '',\n\t\tch = '';\n\n\t// Seek forward in str until the next entity char:\n\tfor (; i < str.length; i++) {\n\t\tswitch (str.charCodeAt(i)) {\n\t\t\tcase 34:\n\t\t\t\tch = '&quot;';\n\t\t\t\tbreak;\n\t\t\tcase 38:\n\t\t\t\tch = '&amp;';\n\t\t\t\tbreak;\n\t\t\tcase 60:\n\t\t\t\tch = '&lt;';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tcontinue;\n\t\t}\n\t\t// Append skipped/buffered characters and the encoded entity:\n\t\tif (i !== last) out += str.slice(last, i);\n\t\tout += ch;\n\t\t// Start the next seek/buffer after the entity's offset:\n\t\tlast = i + 1;\n\t}\n\tif (i !== last) out += str.slice(last, i);\n\treturn out;\n}\n", "/** Normal hydration that attaches to a DOM tree but does not diff it. */\nexport const MODE_HYDRATE = 1 << 5;\n/** Signifies this VNode suspended on the previous render */\nexport const MODE_SUSPENDED = 1 << 7;\n/** Indicates that this node needs to be inserted while patching children */\nexport const INSERT_VNODE = 1 << 16;\n/** Indicates a VNode has been matched with another VNode in the diff */\nexport const MATCHED = 1 << 17;\n\n/** Reset all mode flags */\nexport const RESET_MODE = ~(MODE_HYDRATE | MODE_SUSPENDED);\n\nexport const EMPTY_OBJ = /** @type {any} */ ({});\nexport const EMPTY_ARR = [];\nexport const IS_NON_DIMENSIONAL =\n\t/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;\n", "import { options, Fragment } from 'preact';\nimport { encodeEntities } from './utils';\nimport { IS_NON_DIMENSIONAL } from '../../src/constants';\n\nlet vnodeId = 0;\n\nconst isArray = Array.isArray;\n\n/**\n * @fileoverview\n * This file exports various methods that implement Babel's \"automatic\" JSX runtime API:\n * - jsx(type, props, key)\n * - jsxs(type, props, key)\n * - jsxDEV(type, props, key, __source, __self)\n *\n * The implementation of createVNode here is optimized for performance.\n * Benchmarks: https://esbench.com/bench/5f6b54a0b4632100a7dcd2b3\n */\n\n/**\n * JSX.Element factory used by Babel's {runtime:\"automatic\"} JSX transform\n * @param {VNode['type']} type\n * @param {VNode['props']} props\n * @param {VNode['key']} [key]\n * @param {unknown} [isStaticChildren]\n * @param {unknown} [__source]\n * @param {unknown} [__self]\n */\nfunction createVNode(type, props, key, isStaticChildren, __source, __self) {\n\tif (!props) props = {};\n\t// We'll want to preserve `ref` in props to get rid of the need for\n\t// forwardRef components in the future, but that should happen via\n\t// a separate PR.\n\tlet normalizedProps = props,\n\t\tref,\n\t\ti;\n\n\tif ('ref' in normalizedProps) {\n\t\tnormalizedProps = {};\n\t\tfor (i in props) {\n\t\t\tif (i == 'ref') {\n\t\t\t\tref = props[i];\n\t\t\t} else {\n\t\t\t\tnormalizedProps[i] = props[i];\n\t\t\t}\n\t\t}\n\t}\n\n\t/** @type {VNode & { __source: any; __self: any }} */\n\tconst vnode = {\n\t\ttype,\n\t\tprops: normalizedProps,\n\t\tkey,\n\t\tref,\n\t\t_children: null,\n\t\t_parent: null,\n\t\t_depth: 0,\n\t\t_dom: null,\n\t\t_nextDom: undefined,\n\t\t_component: null,\n\t\tconstructor: undefined,\n\t\t_original: --vnodeId,\n\t\t_index: -1,\n\t\t_flags: 0,\n\t\t__source,\n\t\t__self\n\t};\n\n\t// If a Component VNode, check for and apply defaultProps.\n\t// Note: `type` is often a String, and can be `undefined` in development.\n\tif (typeof type === 'function' && (ref = type.defaultProps)) {\n\t\tfor (i in ref)\n\t\t\tif (typeof normalizedProps[i] === 'undefined') {\n\t\t\t\tnormalizedProps[i] = ref[i];\n\t\t\t}\n\t}\n\n\tif (options.vnode) options.vnode(vnode);\n\treturn vnode;\n}\n\n/**\n * Create a template vnode. This function is not expected to be\n * used directly, but rather through a precompile JSX transform\n * @param {string[]} templates\n * @param  {Array<string | null | VNode>} exprs\n * @returns {VNode}\n */\nfunction jsxTemplate(templates, ...exprs) {\n\tconst vnode = createVNode(Fragment, { tpl: templates, exprs });\n\t// Bypass render to string top level Fragment optimization\n\tvnode.key = vnode._vnode;\n\treturn vnode;\n}\n\nconst JS_TO_CSS = {};\nconst CSS_REGEX = /[A-Z]/g;\n\n/**\n * Serialize an HTML attribute to a string. This function is not\n * expected to be used directly, but rather through a precompile\n * JSX transform\n * @param {string} name The attribute name\n * @param {*} value The attribute value\n * @returns {string}\n */\nfunction jsxAttr(name, value) {\n\tif (options.attr) {\n\t\tconst result = options.attr(name, value);\n\t\tif (typeof result === 'string') return result;\n\t}\n\n\tif (name === 'ref' || name === 'key') return '';\n\tif (name === 'style' && typeof value === 'object') {\n\t\tlet str = '';\n\t\tfor (let prop in value) {\n\t\t\tlet val = value[prop];\n\t\t\tif (val != null && val !== '') {\n\t\t\t\tconst name =\n\t\t\t\t\tprop[0] == '-'\n\t\t\t\t\t\t? prop\n\t\t\t\t\t\t: JS_TO_CSS[prop] ||\n\t\t\t\t\t\t\t(JS_TO_CSS[prop] = prop.replace(CSS_REGEX, '-$&').toLowerCase());\n\n\t\t\t\tlet suffix = ';';\n\t\t\t\tif (\n\t\t\t\t\ttypeof val === 'number' &&\n\t\t\t\t\t// Exclude custom-attributes\n\t\t\t\t\t!name.startsWith('--') &&\n\t\t\t\t\t!IS_NON_DIMENSIONAL.test(name)\n\t\t\t\t) {\n\t\t\t\t\tsuffix = 'px;';\n\t\t\t\t}\n\t\t\t\tstr = str + name + ':' + val + suffix;\n\t\t\t}\n\t\t}\n\t\treturn name + '=\"' + str + '\"';\n\t}\n\n\tif (\n\t\tvalue == null ||\n\t\tvalue === false ||\n\t\ttypeof value === 'function' ||\n\t\ttypeof value === 'object'\n\t) {\n\t\treturn '';\n\t} else if (value === true) return name;\n\n\treturn name + '=\"' + encodeEntities(value) + '\"';\n}\n\n/**\n * Escape a dynamic child passed to `jsxTemplate`. This function\n * is not expected to be used directly, but rather through a\n * precompile JSX transform\n * @param {*} value\n * @returns {string | null | VNode | Array<string | null | VNode>}\n */\nfunction jsxEscape(value) {\n\tif (\n\t\tvalue == null ||\n\t\ttypeof value === 'boolean' ||\n\t\ttypeof value === 'function'\n\t) {\n\t\treturn null;\n\t}\n\n\tif (typeof value === 'object') {\n\t\t// Check for VNode\n\t\tif (value.constructor === undefined) return value;\n\n\t\tif (isArray(value)) {\n\t\t\tfor (let i = 0; i < value.length; i++) {\n\t\t\t\tvalue[i] = jsxEscape(value[i]);\n\t\t\t}\n\t\t\treturn value;\n\t\t}\n\t}\n\n\treturn encodeEntities('' + value);\n}\n\nexport {\n\tcreateVNode as jsx,\n\tcreateVNode as jsxs,\n\tcreateVNode as jsxDEV,\n\tFragment,\n\t// precompiled JSX transform\n\tjsxTemplate,\n\tjsxAttr,\n\tjsxEscape\n};\n", "import { jsx as _jsx } from \"preact/jsx-runtime\";\nexport const IconButton = props => {\n    const { className, label, onClick } = props;\n    return (_jsx(\"div\", { className: \"deck-widget-button\", children: _jsx(\"button\", { className: `deck-widget-icon-button ${className}`, type: \"button\", onClick: onClick, title: label, children: _jsx(\"div\", { className: \"deck-widget-icon\" }) }) }));\n};\nexport const ButtonGroup = props => {\n    const { children, orientation } = props;\n    return _jsx(\"div\", { className: `deck-widget-button-group ${orientation}`, children: children });\n};\nexport const GroupedIconButton = props => {\n    const { className, label, onClick } = props;\n    return (_jsx(\"button\", { className: `deck-widget-icon-button ${className}`, type: \"button\", onClick: onClick, title: label, children: _jsx(\"div\", { className: \"deck-widget-icon\" }) }));\n};\n", "import { jsx as _jsx } from \"preact/jsx-runtime\";\n/* global document */\nimport { _deepEqual as deepEqual } from '@deck.gl/core';\nimport { render } from 'preact';\nimport { IconButton } from \"./components.js\";\nexport class FullscreenWidget {\n    constructor(props) {\n        this.id = 'fullscreen';\n        this.placement = 'top-left';\n        this.fullscreen = false;\n        this.id = props.id || 'fullscreen';\n        this.placement = props.placement || 'top-left';\n        props.enterLabel = props.enterLabel || 'Enter Fullscreen';\n        props.exitLabel = props.exitLabel || 'Exit Fullscreen';\n        props.style = props.style || {};\n        this.props = props;\n    }\n    onAdd({ deck }) {\n        const { style, className } = this.props;\n        const el = document.createElement('div');\n        el.classList.add('deck-widget', 'deck-widget-fullscreen');\n        if (className)\n            el.classList.add(className);\n        if (style) {\n            Object.entries(style).map(([key, value]) => el.style.setProperty(key, value));\n        }\n        this.deck = deck;\n        this.element = el;\n        this.update();\n        document.addEventListener('fullscreenchange', this.onFullscreenChange.bind(this));\n        return el;\n    }\n    onRemove() {\n        this.deck = undefined;\n        this.element = undefined;\n        document.removeEventListener('fullscreenchange', this.onFullscreenChange.bind(this));\n    }\n    update() {\n        const { enterLabel, exitLabel } = this.props;\n        const el = this.element;\n        if (!el) {\n            return;\n        }\n        const ui = (_jsx(IconButton, { onClick: this.handleClick.bind(this), label: this.fullscreen ? exitLabel : enterLabel, className: this.fullscreen ? 'deck-widget-fullscreen-exit' : 'deck-widget-fullscreen-enter' }));\n        render(ui, el);\n    }\n    setProps(props) {\n        const oldProps = this.props;\n        const el = this.element;\n        if (el) {\n            if (oldProps.className !== props.className) {\n                if (oldProps.className)\n                    el.classList.remove(oldProps.className);\n                if (props.className)\n                    el.classList.add(props.className);\n            }\n            if (!deepEqual(oldProps.style, props.style, 1)) {\n                if (oldProps.style) {\n                    Object.entries(oldProps.style).map(([key]) => el.style.removeProperty(key));\n                }\n                if (props.style) {\n                    Object.entries(props.style).map(([key, value]) => el.style.setProperty(key, value));\n                }\n            }\n        }\n        Object.assign(this.props, props);\n    }\n    getContainer() {\n        return this.props.container || this.deck?.getCanvas()?.parentElement;\n    }\n    onFullscreenChange() {\n        const prevFullscreen = this.fullscreen;\n        const fullscreen = document.fullscreenElement === this.getContainer();\n        if (prevFullscreen !== fullscreen) {\n            this.fullscreen = !this.fullscreen;\n        }\n        this.update();\n    }\n    async handleClick() {\n        if (this.fullscreen) {\n            await this.exitFullscreen();\n        }\n        else {\n            await this.requestFullscreen();\n        }\n        this.update();\n    }\n    async requestFullscreen() {\n        const container = this.getContainer();\n        if (container?.requestFullscreen) {\n            await container.requestFullscreen({ navigationUI: 'hide' });\n        }\n        else {\n            this.togglePseudoFullscreen();\n        }\n    }\n    async exitFullscreen() {\n        if (document.exitFullscreen) {\n            await document.exitFullscreen();\n        }\n        else {\n            this.togglePseudoFullscreen();\n        }\n    }\n    togglePseudoFullscreen() {\n        this.getContainer()?.classList.toggle('deck-pseudo-fullscreen');\n    }\n}\n", "import { jsx as _jsx, jsxs as _jsxs } from \"preact/jsx-runtime\";\n/* global document */\nimport { FlyToInterpolator, WebMercatorViewport, _GlobeViewport } from '@deck.gl/core';\nimport { render } from 'preact';\nexport class CompassWidget {\n    constructor(props) {\n        this.id = 'compass';\n        this.placement = 'top-left';\n        this.viewId = null;\n        this.viewports = {};\n        this.id = props.id || 'compass';\n        this.viewId = props.viewId || null;\n        this.placement = props.placement || 'top-left';\n        props.transitionDuration = props.transitionDuration || 200;\n        props.label = props.label || 'Compass';\n        props.style = props.style || {};\n        this.props = props;\n    }\n    setProps(props) {\n        Object.assign(this.props, props);\n    }\n    onViewportChange(viewport) {\n        this.viewports[viewport.id] = viewport;\n        this.update();\n    }\n    onAdd({ deck }) {\n        const { style, className } = this.props;\n        const element = document.createElement('div');\n        element.classList.add('deck-widget', 'deck-widget-compass');\n        if (className)\n            element.classList.add(className);\n        if (style) {\n            Object.entries(style).map(([key, value]) => element.style.setProperty(key, value));\n        }\n        this.deck = deck;\n        this.element = element;\n        this.update();\n        return element;\n    }\n    getRotation(viewport) {\n        if (viewport instanceof WebMercatorViewport) {\n            return [-viewport.bearing, viewport.pitch];\n        }\n        else if (viewport instanceof _GlobeViewport) {\n            return [0, Math.max(-80, Math.min(80, viewport.latitude))];\n        }\n        return [0, 0];\n    }\n    update() {\n        const viewId = this.viewId || Object.values(this.viewports)[0]?.id || 'default-view';\n        const viewport = this.viewports[viewId];\n        const [rz, rx] = this.getRotation(viewport);\n        const element = this.element;\n        if (!element) {\n            return;\n        }\n        const ui = (_jsx(\"div\", { className: \"deck-widget-button\", style: { perspective: 100 }, children: _jsx(\"button\", { type: \"button\", onClick: () => {\n                    for (const viewport of Object.values(this.viewports)) {\n                        this.handleCompassReset(viewport);\n                    }\n                }, label: this.props.label, style: { transform: `rotateX(${rx}deg)` }, children: _jsx(\"svg\", { fill: \"none\", width: \"100%\", height: \"100%\", viewBox: \"0 0 26 26\", children: _jsxs(\"g\", { transform: `rotate(${rz},13,13)`, children: [_jsx(\"path\", { d: \"M10 13.0001L12.9999 5L15.9997 13.0001H10Z\", fill: \"var(--icon-compass-north-color, #F05C44)\" }), _jsx(\"path\", { d: \"M16.0002 12.9999L13.0004 21L10.0005 12.9999H16.0002Z\", fill: \"var(--icon-compass-south-color, #C2C2CC)\" })] }) }) }) }));\n        render(ui, element);\n    }\n    onRemove() {\n        this.deck = undefined;\n        this.element = undefined;\n    }\n    handleCompassReset(viewport) {\n        const viewId = this.viewId || viewport.id || 'default-view';\n        if (viewport instanceof WebMercatorViewport) {\n            const nextViewState = {\n                ...viewport,\n                bearing: 0,\n                ...(this.getRotation(viewport)[0] === 0 ? { pitch: 0 } : {}),\n                transitionDuration: this.props.transitionDuration,\n                transitionInterpolator: new FlyToInterpolator()\n            };\n            // @ts-ignore Using private method temporary until there's a public one\n            this.deck._onViewStateChange({ viewId, viewState: nextViewState, interactionState: {} });\n        }\n    }\n}\n", "import { jsx as _jsx, jsxs as _jsxs } from \"preact/jsx-runtime\";\n/* global document */\nimport { FlyToInterpolator } from '@deck.gl/core';\nimport { render } from 'preact';\nimport { ButtonGroup, GroupedIconButton } from \"./components.js\";\nexport class ZoomWidget {\n    constructor(props) {\n        this.id = 'zoom';\n        this.placement = 'top-left';\n        this.orientation = 'vertical';\n        this.viewId = null;\n        this.viewports = {};\n        this.id = props.id || 'zoom';\n        this.viewId = props.viewId || null;\n        this.placement = props.placement || 'top-left';\n        this.orientation = props.orientation || 'vertical';\n        props.transitionDuration = props.transitionDuration || 200;\n        props.zoomInLabel = props.zoomInLabel || 'Zoom In';\n        props.zoomOutLabel = props.zoomOutLabel || 'Zoom Out';\n        props.style = props.style || {};\n        this.props = props;\n    }\n    onAdd({ deck }) {\n        const { style, className } = this.props;\n        const element = document.createElement('div');\n        element.classList.add('deck-widget', 'deck-widget-zoom');\n        if (className)\n            element.classList.add(className);\n        if (style) {\n            Object.entries(style).map(([key, value]) => element.style.setProperty(key, value));\n        }\n        const ui = (_jsxs(ButtonGroup, { orientation: this.orientation, children: [_jsx(GroupedIconButton, { onClick: () => this.handleZoomIn(), label: this.props.zoomInLabel, className: \"deck-widget-zoom-in\" }), _jsx(GroupedIconButton, { onClick: () => this.handleZoomOut(), label: this.props.zoomOutLabel, className: \"deck-widget-zoom-out\" })] }));\n        render(ui, element);\n        this.deck = deck;\n        this.element = element;\n        return element;\n    }\n    onRemove() {\n        this.deck = undefined;\n        this.element = undefined;\n    }\n    setProps(props) {\n        Object.assign(this.props, props);\n    }\n    onViewportChange(viewport) {\n        this.viewports[viewport.id] = viewport;\n    }\n    handleZoom(viewport, nextZoom) {\n        const viewId = this.viewId || viewport?.id || 'default-view';\n        const nextViewState = {\n            ...viewport,\n            zoom: nextZoom,\n            transitionDuration: this.props.transitionDuration,\n            transitionInterpolator: new FlyToInterpolator()\n        };\n        // @ts-ignore Using private method temporary until there's a public one\n        this.deck._onViewStateChange({ viewId, viewState: nextViewState, interactionState: {} });\n    }\n    handleZoomIn() {\n        for (const viewport of Object.values(this.viewports)) {\n            this.handleZoom(viewport, viewport.zoom + 1);\n        }\n    }\n    handleZoomOut() {\n        for (const viewport of Object.values(this.viewports)) {\n            this.handleZoom(viewport, viewport.zoom - 1);\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["i", "REQUIRED_FEATURES", "i", "i", "x", "y", "i", "n", "a", "b", "x", "d", "v", "MAX_32_BIT_FLOAT", "ascending", "a", "b", "defaultProps", "i", "n", "x", "d", "n", "y", "x", "i", "x", "y", "i", "defaultProps", "d", "f", "defaultProps", "x", "d", "x", "y", "r", "i", "n", "x0", "y0", "x1", "y1", "dx", "dy", "j", "p", "_", "d", "i", "x", "y", "nop", "defaultProps", "x", "threshold", "x", "y", "threshold", "x", "y", "i", "defaultProps", "x", "POSITION_ATTRIBUTE_NAME", "DIMENSIONS", "d", "i", "defaultProps", "defaultProps", "x", "DIMENSIONS", "POSITION_ATTRIBUTE_NAME", "defaultProps", "x", "p", "y", "i", "threshold", "defaultProps", "x", "DIMENSIONS", "threshold", "p", "React", "import_react", "import_react", "import_react", "defaultProps", "import_react", "x", "y", "v", "slice", "options", "vnodeId", "isValidElement", "rerenderQueue", "prevDebounce", "defer", "depthSort", "eventClock", "eventProxy", "eventProxyCapture", "i", "EMPTY_OBJ", "EMPTY_ARR", "IS_NON_DIMENSIONAL", "isArray", "Array", "assign", "obj", "props", "removeNode", "node", "parentNode", "removeChild", "createElement", "type", "children", "key", "ref", "normalizedProps", "arguments", "length", "call", "defaultProps", "createVNode", "original", "vnode", "__k", "__", "__b", "__e", "__d", "__c", "constructor", "__v", "__i", "__u", "Fragment", "props", "children", "BaseComponent", "context", "this", "getDomSibling", "vnode", "childIndex", "__", "__i", "sibling", "__k", "length", "__e", "type", "updateParentDomPointers", "i", "child", "__c", "base", "enqueueRender", "c", "__d", "rerenderQueue", "push", "process", "__r", "prevDebounce", "options", "debounceRendering", "defer", "renderQueueLength", "component", "newVNode", "oldVNode", "oldDom", "commitQueue", "refQueue", "sort", "depthSort", "shift", "__v", "__P", "assign", "diff", "__n", "namespaceURI", "__u", "commitRoot", "diffChildren", "parentDom", "renderResult", "newParentVNode", "oldParentVNode", "globalContext", "namespace", "excessDomChildren", "isHydrating", "childVNode", "newDom", "firstChildDom", "oldChildren", "EMPTY_ARR", "newChildrenLength", "constructNewChildrenArray", "EMPTY_OBJ", "ref", "applyRef", "insert", "nextSibling", "skewedIndex", "matchingIndex", "oldChildrenLength", "remainingOldChildren", "skew", "constructor", "String", "createVNode", "isArray", "__b", "key", "findMatchingIndex", "unmount", "parentVNode", "contains", "insertBefore", "nodeType", "findMatchingIndex", "childVNode", "oldChildren", "skewedIndex", "remainingOldChildren", "key", "type", "x", "y", "oldVNode", "__u", "length", "setStyle", "style", "value", "setProperty", "IS_NON_DIMENSIONAL", "test", "dom", "name", "oldValue", "namespace", "useCapture", "o", "cssText", "replace", "toLowerCase", "slice", "l", "_attached", "eventClock", "addEventListener", "eventProxyCapture", "eventProxy", "removeEventListener", "e", "removeAttribute", "setAttribute", "createEventProxy", "this", "eventHandler", "_dispatched", "options", "event", "diff", "parentDom", "newVNode", "globalContext", "excessDomChildren", "commitQueue", "oldDom", "isHydrating", "refQueue", "tmp", "c", "isNew", "oldProps", "oldState", "snapshot", "clearProcessingException", "newProps", "isClassComponent", "provider", "componentContext", "i", "renderHook", "count", "renderResult", "newType", "constructor", "__e", "__b", "outer", "props", "prototype", "render", "contextType", "__c", "__", "__E", "BaseComponent", "doRender", "sub", "state", "context", "__n", "__d", "__h", "_sb", "__s", "getDerivedStateFromProps", "assign", "__v", "componentWillMount", "componentDidMount", "push", "componentWillReceiveProps", "shouldComponentUpdate", "__k", "some", "vnode", "componentWillUpdate", "componentDidUpdate", "__P", "__r", "getChildContext", "getSnapshotBeforeUpdate", "diffChildren", "isArray", "Fragment", "children", "base", "MODE_HYDRATE", "nodeType", "nextSibling", "indexOf", "diffElementNodes", "diffed", "commitRoot", "root", "applyRef", "cb", "call", "newHtml", "oldHtml", "newChildren", "inputValue", "checked", "localName", "document", "createTextNode", "createElementNS", "is", "__m", "data", "childNodes", "EMPTY_OBJ", "attributes", "__html", "innerHTML", "getDomSibling", "removeNode", "ref", "hasRefUnmount", "current", "unmount", "parentVNode", "skipRemove", "r", "componentWillUnmount", "replaceNode", "createElement", "namespaceURI", "firstChild", "slice", "EMPTY_ARR", "options", "__e", "error", "vnode", "oldVNode", "errorInfo", "component", "ctor", "handled", "__", "__c", "constructor", "getDerivedStateFromError", "setState", "__d", "componentDidCatch", "__E", "e", "vnodeId", "isValidElement", "undefined", "BaseComponent", "prototype", "update", "callback", "s", "this", "__s", "state", "assign", "props", "__v", "_sb", "push", "enqueueRender", "forceUpdate", "__h", "render", "Fragment", "rerenderQueue", "defer", "Promise", "then", "bind", "resolve", "setTimeout", "depthSort", "a", "b", "__b", "process", "__r", "eventClock", "eventProxy", "createEventProxy", "eventProxyCapture", "i", "vnodeId", "isArray", "Array", "createVNode", "type", "props", "key", "isStaticChildren", "__source", "__self", "ref", "i", "normalizedProps", "vnode", "__k", "__", "__b", "__e", "__d", "__c", "constructor", "__v", "__i", "__u", "defaultProps", "options", "u", "u", "u", "viewport", "u"]
}
